<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Cocoapods打包framework/静态库的注意点]]></title>
      <url>http://yoursite.com/2016/12/23/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/Cocoapods%E6%89%93%E5%8C%85framework:%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>   关于使用Cocoapods打包静态库或者是Framework的文章,网上一搜一堆.可是当你读完,发现用处有限.它们的都是用最简单的场景串了一遍打包的流程,而整个过程中的多个坑,却根本没有提及.这就造成了一个假象,Cocoapods打包framework是简单愉快的,放弃原来的创建framework的形式吧!结果,当热情满满的开发者去用的时候,发现已经入了歧途了! </p>
<p>本人目前正在处理一款语音框架的工作,所以正好整理出来,希望能够对大家有帮助!</p>
<h2 id="Cocoapods流程">Cocoapods流程</h2><p>关于如何安装<code>Cocoapods</code>,在此就不赘述了.如果没有<code>Cocoapods</code>使用经验,也不建议看这篇文章. 另外,建议将<code>Cocoapods</code>升级到最新版本(包括最新的beta),升级命令如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install cocoapods --pre</span><br></pre></td></tr></table></figure>
<h3 id="创建基本的工程结构">创建基本的工程结构</h3><ol>
<li><p>通过命令创建一个规范规程(这个很重要,方便你的开发与验证)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create YouFrameworkName</span><br></pre></td></tr></table></figure>
</li>
<li><p>接下来就是一些问题,根据实际情况选择.(我这开发的OC版本)</p>
</li>
</ol>
<p><strong>特别说明: 一定要创建Demo Application!这个对你的开发有极大的帮助!!</strong></p>
<p>具体步骤也不赘述了,给大家几篇参考文章.做完就具备了基本的结构了.主要是想一块继续深入下去.</p>
<p><a href="http://www.cnblogs.com/brycezhang/p/4117180.html" target="_blank" rel="external">使用CocoaPods开发并打包静态库</a></p>
<p><a href="http://www.jianshu.com/p/0b516ee6576f" target="_blank" rel="external">一步一步教你使用CocoaPods打包静态库</a></p>
<h3 id="继续深入">继续深入</h3><p>有一个问题需要注意: <strong>如果你选择打包.a的静态库,那么cocoapods是不会给你生成头文件的</strong> ,这就意味着,其实,你只能打包framework.</p>
<p>按照上面的两篇文章做完,你会发现.握草,根本不够项目用啊.我项目还有三方的<code>framework</code>,还有三方的<code>.a</code>库,还想添加<code>pch</code>文件…</p>
<p>另外,关于各种路径的问题,例如:<code>s.source_files</code> 和<code>s.header_dir</code>这些,经常会被Cocoapods报错:pattern匹配不到任何文件.其实,只要记住一个原则:<strong>你的库路径(可能是线上git库也可能是本地git库)+你的指定路径 =  要找的文件路径</strong>,那么就一定没问题. 例如我的库路径是:<code>:git =&gt; &#39;/Users/kenny/Documents/LTVoiceAssistant&#39;</code> 而我指定的<code>s.source_files = &#39;LTVoiceAssistant/Classes/**/*.{c,h,hh,m,mm,cpp,a,pch}&#39;</code>,它们两个拼接,正好是我各种源码文件的路径.</p>
<h4 id="三方Framework和Library">三方Framework和Library</h4><p>在项目中,我们经常会有一些以文件形式存在的framework和.a,例如我项目中就有百度的语音识别和一个高德的.而由于某些原因,你不能用cocoapods将其管理,只能拖到项目中,cocoapods使用<code>vendored_frameworks</code>和<code>vendored_libraries</code>字段进行设置:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.ios.vendored_libraries = 'LTVoiceAssistant/Classes/libBDVoiceRecognitionClient.a',</span><br><span class="line">                            'LTVoiceAssistant/Classes/libBDSSpeechSynthesizer.a'</span><br><span class="line"></span><br><span class="line">	s.ios.vendored_frameworks = 'LTVoiceAssistant/Classes/*.framework'</span><br></pre></td></tr></table></figure>
<h4 id="pch">pch</h4><p>如果你不是从零开始,而是将其他项目的代码剥离打包framework的话,这个绝对会帮你大忙,因为cocoapods的验证,会检查你代码的依赖性,如果有照不到的头文件或者引入关系不对,是通不过验证的.podspec中,提供了两种方式添加pch文件.<br>方法一 : 使用<code>s.prefix_header_contents</code>用法如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.prefix_header_contents = '#import "AHeader.h"','#import "BHeader.h"'</span><br></pre></td></tr></table></figure>
<p>可以看出,简单方便.但是也是因为简单,所以一些负责的宏之类的,你用这个是没法完成的.</p>
<p>方法二: 添加pch文件.<br>首先framework工程里(不是DemoApplication中)添加pch文件.然后将文件加入到编译的source中(如果你是拷贝进来的头文件)<br>最后,在podspec中,添加下面的信息:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.prefix_header_file = 'LTVoiceAssistant/Classes/Global/LTSpeech-prefix.pch'</span><br></pre></td></tr></table></figure></p>
<p>在cocoapods的issue中,作者特别提到了.如果报找不到,那么是Xcode没找到,不是cocoapods,所以,确保将pch加入了编译.</p>
<h4 id="xib和storyboard">xib和storyboard</h4><p>如果你的代码中包含Xib和Storyboard,需要注意,这几个文件是需要添加到资源中的.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.resource = 'LTVoiceAssistant/Classes/Cells/*.xib'</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[来个特殊的HelloWord-Mac下汇编初探]]></title>
      <url>http://yoursite.com/2016/10/13/Mac%E4%B8%8B%E7%9A%84%E6%B1%87%E7%BC%96/%E6%9D%A5%E4%B8%AA%E7%89%B9%E6%AE%8A%E7%9A%84HelloWord-Mac%E4%B8%8B%E6%B1%87%E7%BC%96%E5%88%9D%E6%8E%A2/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[用__Attribute__做点好玩的事情:第一篇]]></title>
      <url>http://yoursite.com/2016/09/28/%E7%A0%94%E7%A9%B6%E9%9A%8F%E7%AC%94/%E7%94%A8-Attribute-%E5%81%9A%E7%82%B9%E5%A5%BD%E7%8E%A9%E7%9A%84%E4%BA%8B%E6%83%85-%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>之前写过一篇<a href="http://imguiqing.cc/2016/09/25/%E7%A0%94%E7%A9%B6%E9%9A%8F%E7%AC%94/attribute-constructor-%E7%94%A8%E6%B3%95%E6%8E%A2%E7%A9%B6/" target="_blank" rel="external"><strong>attribute</strong>((constructor))用法探究</a>,当时是在看代码的时候,对它产生了偶遇.而这几天,越发发现这个<code>__attribute__</code>的强大.作为一个iOS开发者,我试着总结了一下这个在我们日常开发中的应用.<br><a id="more"></a></p>
<h2 id="从___Nonull说起">从 __Nonull说起</h2><p>苹果在Xcode6.3中引入了这个特性, 目的在于为Swift混编时,让编译器知道这个Object-C对象是不是可选的.使用方法如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)openPath:(<span class="built_in">NSString</span> * _Nonnull)path;</span><br></pre></td></tr></table></figure>
<p>今天在llvm的文档中,发现了一段这样的描述:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The nonnull attribute indicates that some function parameters must not be null, and can be used in several different ways. It’<span class="function">s original <span class="title">usage</span> <span class="params">(from GCC)</span> is as a <span class="title">function</span> <span class="params">(or Objective-C method)</span> attribute that specifies which parameters of the function are nonnull in a comma-separated <span class="built_in">list</span>.</span></span><br></pre></td></tr></table></figure>
<p>大概意思是:<br><code>nonnull</code>这个属性表示函数的参数不能为空,并且这个属性有几种不同的使用方式,最基本的用法就是用来修饰函数(或者OC的方法),使用一个用逗号分隔的参数表来表明函数或者方法的那个哪个参数非空.</p>
<p>还是代码比较明显:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)openFile:(<span class="built_in">NSString</span>*)file __attribute__((nonnull(<span class="number">1</span>)));</span><br></pre></td></tr></table></figure></p>
<p>当我们这么使用时候:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> openFile:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>就会得到这么一个警告:<br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/20160928147504628663285.jpg?imageView2/0/format/jpg" alt="20160928147504628663285.jpg"></p>
<p>几个注意点:</p>
<ul>
<li>nonull的参数从1开始</li>
<li>OC的隐含参数<code>self</code>和<code>_cmd</code>不计入参数范围</li>
</ul>
<p><code>_Nonnull</code>和<code>_Nullable</code>在文档中也有说明:</p>
<p><code>_Nonnull</code>修饰指针类型,表示这个指针类型不会把<code>null</code>当做有意义的参数,用法如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fetch(<span class="keyword">int</span> * _Nonnull ptr);</span><br></pre></td></tr></table></figure>
<p><code>_Nullable</code>修饰指针类型,表示这个指针类型可以是<code>null</code>的,用法如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fetch_or_zero(<span class="keyword">int</span> * _Nullable ptr);</span><br></pre></td></tr></table></figure>
<p><strong>注意:它们只能修饰指针类型的参数.</strong></p>
<h2 id="RAC中的_@onExit">RAC中的 @onExit</h2><p>用过RAC的应该对这个关键字不陌生,它实现了,当一个变量作用域结束时,调用指定的block,查看这个宏的定义:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#define onExit \</span></span><br><span class="line">    rac_keywordify \</span><br><span class="line">    __<span class="keyword">strong</span> rac_cleanupBlock_t metamacro_concat(rac_exitBlock_, __LINE__) __attribute__((cleanup(rac_executeCleanupBlock), unused)) = ^</span><br></pre></td></tr></table></figure>
<p>这个<code>rac_keywordfiy</code>的定义如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#if DEBUG</span></span><br><span class="line"><span class="preprocessor">#define rac_keywordify autoreleasepool &#123;&#125;</span></span><br><span class="line"><span class="preprocessor">#else</span></span><br><span class="line"><span class="preprocessor">#define rac_keywordify try &#123;&#125; @catch (...) &#123;&#125;</span></span><br><span class="line"><span class="preprocessor">#endif</span></span><br></pre></td></tr></table></figure>
<p>这也是为什么<code>onExit</code>使用的时候,前面需要添加一个<code>@</code>,因为只有这样才能凑成完整的<code>@autoreleasepool</code>或者<code>@try {}</code>.<br>言归正传,我们关注这个部分:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((cleanup(rac_executeCleanupBlock), unused))</span><br></pre></td></tr></table></figure>
<p>先说简单的,<code>unused</code>表示函数或者变量可能不用,防止编译器产生警告.<br>而这个<code>__attribute__((cleanup(...)))</code>用来修饰变量,当变量的作用域结束的时候,就调用参数.参数是一个函数,当然,也可以是<code>block</code>,RAC里面就是这么干的.用代码来说明:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> stringCleanUp(__<span class="keyword">strong</span> <span class="built_in">NSString</span> **string) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, *string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> cleanupBlock(__<span class="keyword">strong</span> <span class="keyword">void</span>(^*block)(<span class="keyword">void</span>)) &#123;</span><br><span class="line">    (*block)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    __<span class="keyword">strong</span> <span class="built_in">NSString</span> * myname  __attribute__((cleanup(stringCleanUp), unused)) = <span class="string">@"kenny"</span>;</span><br><span class="line">    </span><br><span class="line">    __<span class="keyword">strong</span> <span class="keyword">void</span>(^block)(<span class="keyword">void</span>) __attribute__((cleanup(cleanupBlock), unused)) = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"gonna released"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是<code>cleanup</code>的参数方法:它的参数是修饰的变量的地址.所以会用到了<code>*block</code>和<code>**string</code>,另外:</p>
<p>对于指向objc对象的指针(id *)，如果不强制声明<code>__strong</code>默认是<code>__autoreleasing</code>，造成类型不匹配</p>
<p>参考链接:</p>
<p><a href="https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html" target="_blank" rel="external">Common-Variable-Attributes</a></p>
<p><a href="http://blog.sunnyxx.com/2014/09/15/objc-attribute-cleanup/" target="_blank" rel="external">http://blog.sunnyxx.com/2014/09/15/objc-attribute-cleanup/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[OC中的对象下标索引]]></title>
      <url>http://yoursite.com/2016/09/27/%E7%A0%94%E7%A9%B6%E9%9A%8F%E7%AC%94/OC%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%8B%E6%A0%87%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<p>相信对Swift有一定了解的人都知道它的下标语法.这个语法让类具备了像字典或者数组那样,利用下标获取一些东西的能力.但是,很多开发者或许不知道,OC中早就在Xcode4的时代,就已经有了这个语法.</p>
<h2 id="OC中的对象下标语法">OC中的对象下标语法</h2><p>正如数组和字典, OC中的下标也分为了索引和键位.<br>索引下标需要声明和实现这两个方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)objectAtIndexedSubscript:(<span class="built_in">NSUInteger</span>)idx;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)obj atIndexedSubscript:(<span class="built_in">NSUInteger</span>)idx;</span><br></pre></td></tr></table></figure>
<p>键索引下标需要实现这两个方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)objectForKeyedSubscript:(<span class="keyword">id</span> &lt;<span class="built_in">NSCopying</span>&gt;)key;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)obj forKeyedSubscript:(<span class="keyword">id</span> &lt;<span class="built_in">NSCopying</span>&gt;)key;</span><br></pre></td></tr></table></figure>
<p>这么说还是有些抽象, 现在来具体看个例子:</p>
<h2 id="具体代码">具体代码</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BlackBox</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectAtIndexedSubscript:(<span class="built_in">NSUInteger</span>)idx;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)obj atIndexedSubscript:(<span class="built_in">NSUInteger</span>)idx;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectForKeyedSubscript:(<span class="keyword">id</span> &lt;<span class="built_in">NSCopying</span>&gt;)key;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)obj forKeyedSubscript:(<span class="keyword">id</span> &lt;<span class="built_in">NSCopying</span>&gt;)key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectAtIndexedSubscript:(<span class="built_in">NSUInteger</span>)idx&#123;</span><br><span class="line">  <span class="comment">//做各种逻辑构造返回对象</span></span><br><span class="line">    <span class="keyword">return</span> @(idx);</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)obj atIndexedSubscript:(<span class="built_in">NSUInteger</span>)idx&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectForKeyedSubscript:(<span class="keyword">id</span> &lt;<span class="built_in">NSCopying</span>&gt;)key&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *condition = (<span class="built_in">NSString</span>*)key;</span><br><span class="line">    <span class="comment">//做各种逻辑构造返回对象</span></span><br><span class="line">    <span class="keyword">return</span> condition;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)obj forKeyedSubscript:(<span class="keyword">id</span> &lt;<span class="built_in">NSCopying</span>&gt;)key&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后使用方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BlackBox *blackBox = [BlackBox new];</span><br><span class="line"><span class="keyword">id</span> object1 = blackBox[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">id</span> object2 = blackBox[<span class="string">@"all objects where value &gt;= 100"</span>];</span><br></pre></td></tr></table></figure>
<h2 id="使用场景">使用场景</h2><p>这个最好的感觉,就是封装细节.<br>现在比较火的路由,用这个方法去实现就比较好,例如:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">routes[<span class="string">@"black module://rootController:23"</span>] = ^(<span class="keyword">id</span> param)&#123;</span><br><span class="line">		<span class="comment">//逻辑代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="和方法的对比">和方法的对比</h2><p>然后这个用方法来实现,也是okay的啊,为啥要用这个下标呢? 个人感觉,本身,我们编程工作,很大一部分的内容就是命名.而这个命名也是很容易出问题的地方.而下标的方式,让我们可以省去这个步骤.很简单的一个例子:<br><code>array[10]</code> 和  <code>[array objectAtIndex:10]</code>你更愿意用哪个呢?</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ProtocolKit中宏的用法分析]]></title>
      <url>http://yoursite.com/2016/09/26/%E7%A0%94%E7%A9%B6%E9%9A%8F%E7%AC%94/Protocolkit%E4%B8%AD%E5%AE%8F%E7%9A%84%E7%94%A8%E6%B3%95%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>宏本身不难理解,但是往往嵌套多了,或者利用一些不常用的特性之后,会让人觉得迷惑.</p>
<h2 id="ProtocolKit中的一段宏定义">ProtocolKit中的一段宏定义</h2><p>在<code>ProtocolKit</code>中有这么一段宏的定义:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get container class name by counter</span></span><br><span class="line"><span class="preprocessor">#define _pk_get_container_class($protocol) _pk_get_container_class_imp($protocol, __COUNTER__)</span></span><br><span class="line"><span class="preprocessor">#define _pk_get_container_class_imp($protocol, $counter) _pk_get_container_class_imp_concat(__PKContainer_, $protocol, $counter)</span></span><br><span class="line"><span class="preprocessor">#define _pk_get_container_class_imp_concat($a, $b, $c) $a ## $b ## _ ## $c</span></span><br></pre></td></tr></table></figure>
<p>当时知道:</p>
<p><code>##</code> 连字符,通常用来拼接</p>
<p><code>__COUNTER__</code>  计数器,一般用来后缀在变量上面,保证变量的唯一性.在程序中,每使用一次,这个数字就<code>+1</code>,默认是<code>0</code></p>
<p>再看实际拼接的结果:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_pk_get_container_class(MyProtocol);</span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line">__PKContainer_MyProtocol_0;</span><br></pre></td></tr></table></figure>
<p>一开始的时候在想, 不就是要拼接么,为何要弄那么多层嵌套.难道是故意增加复杂度,让人觉得高深? 还有变量前面的<code>$</code>,是和shell中的一个意思? 表示变量?</p>
<h2 id="尝试简化">尝试简化</h2><p>遇到看不懂的东西,我喜欢先去掉,把自己知道的代码罗列出来.然后依次加上不懂得东西,看它对既有结果的改变.然后判断它的作用.<br>于是,我写了下面一个宏:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#define _kn_get_container_class(prefix,protocol) prefix##_##protocol##_##__COUNTER__</span></span><br></pre></td></tr></table></figure>
<p>然后使用:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *  _kn_get_container_class(__kn,MyProtocol);</span><br></pre></td></tr></table></figure></p>
<p>可是根据编译器的警告来看,并不是我想要的结果:</p>
<p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/20160926147485714436151.jpg?imageView2/0/format/jpg" alt="20160926147485714436151.jpg"></p>
<p>原来在<code>##</code>的作用下,<code>__COUNTER__</code>被当成了字面上的表示,并没有解析.<br>然后,根据作者的写法,把实现加深一层,改写为:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#define _simpleifyGetContainerClass(prefix,protocol,counter) _simple_getContainerClass_imp(prefix,protocol,counter)</span></span><br><span class="line"><span class="preprocessor">#define _simple_getContainerClass_imp(a,b,c) a##b##_##c</span></span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> * _simpleifyGetContainerClass(__PKContainer_,MyProtocol,__COUNTER__);</span><br></pre></td></tr></table></figure>
<p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/2016092614748581939059.jpg?imageView2/0/format/jpg" alt="2016092614748581939059.jpg"></p>
<p>发现结果正确.</p>
<p>我这种写法,需要使用者传递多个参数,也已经必须嵌套一层了.作者在此基础上加上默认的参数实现,也是很合理的.</p>
<p>另外可以看到,这个<code>$</code>符号,不加也可以,所以,个人猜想.这个和shell中<code>使用变量</code>不是一回事.可能加上仅仅为了阅读者明白,这个地方是个变量.若理解不正确,请您指正.</p>
<h2 id="GCC中一个可变参数的宏">GCC中一个可变参数的宏</h2><p>之前项目中,封装过打印.当时就用到了可变参数的宏:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#define GUIError(message,...) DDLogError(@<span class="title">"\n[   FILE  ]  %s \n[  METHOD ]  %s\n[   LINE  ] %d \n[ Message ]\n%@\n\n=======================================================\n"</span>,__FILE__,__FUNCTION__,__LINE__,[NSString stringWithFormat:message,## __VA_ARGS__])</span></span><br></pre></td></tr></table></figure>
<p>就是在定义的时候,以<code>...</code>作为最后一个参数,使用的时候,<code>__VA_ARGS__</code>就代指这一系列可变参数.</p>
<p>今天想找找关于宏的资料,发现GCC的文档中,也有关于可变参数宏的说明.在此,就不赘述了,想深入了解的,可以<a href="https://gcc.gnu.org/onlinedocs/gcc-6.2.0/gcc/Variadic-Macros.html#Variadic-Macros" target="_blank" rel="external">查看文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[__attribute__((constructor))用法探究]]></title>
      <url>http://yoursite.com/2016/09/25/%E7%A0%94%E7%A9%B6%E9%9A%8F%E7%AC%94/attribute-constructor-%E7%94%A8%E6%B3%95%E6%8E%A2%E7%A9%B6/</url>
      <content type="html"><![CDATA[<p>今天在看ProtocolKit的源码,看到了这么一行代码.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((constructor)) <span class="keyword">static</span> <span class="keyword">void</span> _pk_extension_inject_entry(<span class="keyword">void</span>) &#123;</span><br></pre></td></tr></table></figure>
<p>主要造成疑惑的是 <code>__attribute__((constructor))</code>,以前看过关于<code>__attribute__</code>这个关键字的,大概还记得就是可以修饰类型,函数什么的.类似一个编译标记.但是具体用法忘记了.</p>
<a id="more"></a>
<h2 id="attribute"><strong>attribute</strong></h2><p>GNU C 的一大特色就是<code>__attribute__</code> 机制。<code>__attribute__</code> 可以设置函数属性（Function Attribute ）、变量属性（Variable Attribute ）和类型属性（Type Attribute ）。</p>
<p><code>__attribute__</code> 书写特征是：<code>__attribute__</code> 前后都有两个下划线，并切后面会紧跟一对原括弧，括弧里面是相应的<code>__attribute__</code> 参数。</p>
<p><code>__attribute__</code> 语法格式为：<code>__attribute__ ((attribute-list))</code></p>
<p>以上内容来自<a href="http://www.cnblogs.com/astwish/p/3460618.html" target="_blank" rel="external">这篇文章</a> ,作者在文章里也说了很多详细的用法.我在这就不再重复了.下面主要说说刚刚提出的那个问题</p>
<h2 id="attribute((constructor))"><strong>attribute</strong>((constructor))</h2><p>既然搞不懂,我的习惯是写Demo,将不懂得东西抽取出来,便于排除其他因素,<br>新建一个工程,将<code>main.m</code>改写如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        printf(<span class="string">"main function"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate class]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">__attribute__((constructor)) <span class="keyword">static</span> <span class="keyword">void</span> beforeFunction()</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">"beforeFunction\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后运行,发现打印如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beforeFunction</span><br><span class="line">main function</span><br></pre></td></tr></table></figure>
<p>所以这个<code>__attribute__((constructor))</code>应该是在<code>main</code>函数之前,执行一个函数,便于我们做一些准备工作.后来,查阅了<a href="https://gcc.gnu.org/onlinedocs/gcc-6.2.0/gcc/Common-Function-Attributes.html#Common-Function-Attributes" target="_blank" rel="external">GNU的文档</a>,印证了我的想法.</p>
<p>另外在文档中,还有提及,还有这么一个写法<code>__attribute__((destructor))</code>.文档中关于这两个用法的说明如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The constructor attribute causes the function to be called automatically before execution enters main (). Similarly, the destructor attribute causes the function to be called automatically after main () completes or exit () is called. Functions with these attributes are useful <span class="keyword">for</span> initializing data that is used implicitly during the execution of the program.</span><br></pre></td></tr></table></figure>
<p>大概意思是:</p>
<p><code>constructor</code>参数让系统执行<code>main()</code>函数之前调用函数(被<code>__attribute__((constructor))</code>修饰的函数).同理, <code>destructor</code>让系统在<code>main()</code>函数退出或者调用了<code>exit()</code>之后,调用我们的函数.带有这些修饰属性的函数,对于我们初始化一些在程序中使用的数据非常有用.</p>
<h2 id="带有优先级的参数">带有优先级的参数</h2><p>按照文档中所说,我们还可以给属性设置优先级.这些函数并不非要写到<code>main.m</code>文件中,无论写到哪里,结果都是一样的.但是,为了更显式的让阅读者看到这些定义,至少,还是在<code>main.m</code>文件中留个声明.</p>
<p>声明和实现分离的写法如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line">__attribute__((constructor(<span class="number">101</span>))) <span class="keyword">void</span> before1();</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">void</span> before1()</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">"before1\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我仅仅用作测试,就不分开写了:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>  __attribute__((constructor(<span class="number">101</span>))) <span class="keyword">void</span> before1()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"before1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>  __attribute__((constructor(<span class="number">102</span>))) <span class="keyword">void</span> before2()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"before2\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>  __attribute__((constructor(<span class="number">102</span>))) <span class="keyword">void</span> before3()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"before3\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码没有什么疑问.以上三个函数会依照优先级的顺序调用.另外,我以前看过,这个<code>1-100</code>的范围是保留的,所以,最好从100之后开始用.(但是实际上,我在项目中测试100以内的,也没有得到警告)</p>
<h2 id="关于格式">关于格式</h2><p>按照文档中的说法,<code>__attribute__</code>应该放在函数声明之后,在<code>;</code>之前,不过这应该是个格式问题,从我之前那么多写法,也没有出错,可以得出这个结论.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GCD实现线程同步的三种方式]]></title>
      <url>http://yoursite.com/2016/09/24/iOS%20Tips/GCD%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>写这篇文章的原因是自己几天前的一个面试,当时面试官问这个线程同步的问题,感觉自己回答的不好,知识接触过,却不系统条理.所以这次特地整理一下</p>
<h2 id="什么是线程同步">什么是线程同步</h2><p>同步就是协同步调，按预定的先后次序进行运行。如：你说完，我再说。<br>“同”字从字面上容易理解为一起动作<br>其实不是，“同”字应是指协同、协助、互相配合。<br>如进程、线程同步，可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行；B依言执行，再将结果给A；A再继续操作。</p>
<p><strong>以上内容来自百度百科</strong></p>
<h2 id="GCD中实现线程同步的方式">GCD中实现线程同步的方式</h2><h3 id="dispatch_group">dispatch_group</h3><p><code>dispatch_group</code>是GCD中经常使用的线程同步方式,具体用法如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"cc.imguiqing"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 1 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 2 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 3 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以看出,这个和普通的GCD任务相比,每个API都多了一个group参数.但是如果仅仅是像上面的方式使用,就没有什么必要了.我们使用Group的原因,更多是想要知道这个Group中的执行情况.借此来获得时机做一些逻辑操作.所以<code>dispatch_group</code>提供了两个API:</p>
<ol>
<li>通知Group中的任务都执行完毕</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dispatch_group_notify(group, queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"all task done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>阻塞式的等待Group中的任务都执行完毕</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"since all done , I move on"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="更常见的写法">更常见的写法</h4><p>上面的写法虽然简单,但是如果看过一些三方库的代码,发现那么用的并不多.更多的是利用<code>dispatch_group_enter(group)</code>和<code>dispatch_group_leave(group)</code>来包装任务,本质上两者没有区别,多说这些仅仅是让你别以后看代码的时候感到疑惑,<br>代码如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue( <span class="number">0</span>, <span class="number">0</span> );</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line"></span><br><span class="line">dispatch_group_enter(group);</span><br><span class="line"><span class="built_in">dispatch_async</span>( queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>( <span class="string">@"task 1 --- %@"</span>, [<span class="built_in">NSThread</span> currentThread] );</span><br><span class="line">    dispatch_group_leave(group);</span><br><span class="line">&#125; );</span><br><span class="line">dispatch_group_enter(group);</span><br><span class="line"><span class="built_in">dispatch_async</span>( queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>( <span class="string">@"task 2 --- %@"</span>, [<span class="built_in">NSThread</span> currentThread] );</span><br><span class="line">    dispatch_group_leave(group);</span><br><span class="line">&#125; );</span><br><span class="line">dispatch_group_notify( group, queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>( <span class="string">@"all task done %@"</span>, [<span class="built_in">NSThread</span> currentThread] );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<h3 id="信号量">信号量</h3><p>信号量可以理解为一个特殊的变量.程序对它的访问都是原子性的,我们通过PV操作来修改信号量.<br>使用代码简单说明:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t sem = 	dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">[networkManager requestWithDelay:<span class="number">5</span> completion:^&#123;</span><br><span class="line">    dispatch_semaphore_signal(sem);<span class="comment">//+1</span></span><br><span class="line">&#125;];</span><br><span class="line">dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);<span class="comment">//-1</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"five sectonds"</span>);</span><br></pre></td></tr></table></figure>
<p>信号量创建的时候, 可以给他指定一个值.<code>dispatch_semaphore_signal(sem)</code>对信号进行<code>+1</code>操作.<code>dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER)</code>对信号进行<code>-1</code>操作.当进行<code>-1</code>时,如果发现信号结果会小于0,那么线程进入阻塞状态.只有当信号<code>&gt;=0</code>才能通过.</p>
<p>那么上面的代码段就容易明白了: 一直等到一个异步的网络请求结束,才继续执行<code>NSLog(@&quot;five sectonds&quot;);</code>,也是就其他的逻辑</p>
<h3 id="Barrier">Barrier</h3><p>相比上面两种方式,Barrier知道的人相对少一些.但是Barrier用起来相对上面两种更加简单.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"cc.imguiqing"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 1 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 2 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"barrier =========="</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 3 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面的代码,<code>task 1</code>和<code>task 2</code>会并发执行,然后执行<code>barrier</code>,最后是<code>task 3</code>,用图来说明:<br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/20160924147468717647516.jpg?imageView2/0/format/jpg" alt="20160924147468717647516.jpg"></p>
<p>这个 barrier就相当于一个栅栏,将不同的任务区分开来.从代码中也不难看出,这个barrier函数不需要依赖其它的变量,没有侵入性.所以非常好用.和Group也是非常好搭配.例如下面的代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"cc.imguiqing"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">500000000</span>; i++) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 1 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"======"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">500000000</span>; i++) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 2 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"======"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"task 3 on %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_notify(group, queue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"all task done"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"since all done , I move on"</span>);</span><br></pre></td></tr></table></figure>
<p>能保证 <code>task 1 2 3</code>顺序执行,同时,由于使用了Group,也能知道执行结束的时机. 但是仅仅是为了说明问题,如果要顺序执行,那么还是使用GCD中同步队列更加合适.</p>
<p><strong>注意点: 这个barrier函数只能用于并发队列,且不能是<code>global queue</code>.</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xcode 8 适配]]></title>
      <url>http://yoursite.com/2016/09/23/Xcode&%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Xcode-8-%E5%BF%85%E8%A6%81%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>相信很多小伙伴都升级了Xcode 8 ,但是发现很多恶心的地方.下面是自己这几天的积累,解决了一部分问题.希望能帮到大家.</p>
<h2 id="注释快捷键失效">注释快捷键失效</h2><p>我们常用的<code>cmd+/</code>失效了了.</p>
<h2 id="解决方案">解决方案</h2><p>终端输入:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/libexec/xpccachectl</span><br></pre></td></tr></table></figure></p>
<p>然后重启mac</p>
<h2 id="去掉多余打印">去掉多余打印</h2><p>当你开开心心的想去控制台看Log的时候,发现这样:<br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/2016092374983截图 2016-09-23 14时52分35秒.jpg" alt="2016092374983截图 2016-09-23 14时52分35秒.jpg"></p>
<h2 id="解决方法">解决方法</h2><p>到<code>Target</code>中添加如下键值对:<br><code>OS_ACTIVITY_MODE disable</code><br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/20160923147461373922375.jpg?imageView2/0/format/jpg" alt="20160923147461373922375.jpg"></p>
<h2 id="插件失效">插件失效</h2><p>每次升级,都会面临插件失效的情况. 以前比较简单的可以通过修改插件plist的方法来完成修复.<br>1.打开终端，输入以下代码获取到<code>DVTPlugInCompatibilityUUID</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults read /Applications/Xcode<span class="variable">.app</span>/Contents/Info DVTPlugInCompatibilityU<span class="built_in">UID</span></span><br></pre></td></tr></table></figure></p>
<p>2.然后输入如下命令 【最后一项是获取到的DVTPlugInCompatibilityUUID】<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -name Info<span class="variable">.plist</span> -maxdepth <span class="number">3</span> | xargs -I&#123;&#125; defaults write &#123;&#125; DVTPlugInCompatibilityU<span class="built_in">UIDs</span> -array-add <span class="number">9</span>F75337B-<span class="number">21</span>B4-<span class="number">4</span>ADC-B558-F9<span class="built_in">CADF7073A7</span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://blog.csdn.net/u014536527/article/details/45022747" target="_blank" rel="external">来源网址</a><br>但是Xcode 8 却不行了,甚至明确说支持Xcode8的插件也不正常工作.这是因为Xcode8要求<code>code sign</code></p>
<h2 id="解决方法-1">解决方法</h2><p>因为我一直很依赖<code>xvim</code>这个插件,所以一直关注等着更新.今天意外发现有个适配Xcode8的说明:</p>
<p>1.打开<code>Keychain Access</code>,在左边栏中选择<code>login</code>这个条目<br>2.选择<code>Create a Certificate</code><br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/20160923147461457298237.jpg?imageView2/0/format/jpg" alt="20160923147461457298237.jpg"><br>3.输入名字,然后选择<code>Code Signing</code>这个类型<br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/20160923147461461158577.jpg?imageView2/0/format/jpg" alt="20160923147461461158577.jpg"><br>4.退出Xode,然后终端中输入:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo codesign -f -s XcodeSigner /Applications/Xcode<span class="variable">.app</span></span><br></pre></td></tr></table></figure></p>
<p>具体Xcode路径看自己放哪.<br>5.然后可以依靠旧的方法去使用,或者去获取最新版本.</p>
<p><a href="https://github.com/XVimProject/XVim/blob/master/INSTALL_Xcode8.md" target="_blank" rel="external">来源网址</a></p>
<h2 id="切换Swift版本">切换Swift版本</h2><p>目前Xcode8中支持Swift3.0 ,但是不幸的是,很多三方库还不支持. 我们可以通过配置,切换为Swift的2.3版本.</p>
<h2 id="修改配置">修改配置</h2><p>配置如下图,设置为NO表示使用 Swift 3.0. YES表示使用Swift2.3<br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/20160923147461514664286.jpg?imageView2/0/format/jpg" alt="20160923147461514664286.jpg"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一份自己满意的ClangFormat配置]]></title>
      <url>http://yoursite.com/2016/08/18/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E4%B8%80%E4%BB%BD%E8%87%AA%E5%B7%B1%E6%BB%A1%E6%84%8F%E7%9A%84ClangFormat%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>对于一个团队来说,有共同的代码格式规范是非常重要的.但是,却不能保证每个细节,使用代码格式化工具可以极大的提高效率.下面是自己积累出来的一份配置,每一行都有注释,可以自己比对:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#基于那个配置文件</span></span><br><span class="line">BasedOnStyle: LLVM</span><br><span class="line"><span class="preprocessor">#指针的*的挨着哪边</span></span><br><span class="line">PointerAlignment: Right</span><br><span class="line"><span class="preprocessor">#缩进宽度</span></span><br><span class="line">IndentWidth: <span class="number">4</span></span><br><span class="line"><span class="preprocessor"># 连续的空行保留几行</span></span><br><span class="line">MaxEmptyLinesToKeep: <span class="number">1</span></span><br><span class="line"><span class="preprocessor"># 在 @property 后面添加空格, \@property (readonly) 而不是 \@property(readonly).</span></span><br><span class="line">ObjCSpaceAfterProperty: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># OC block后面的缩进</span></span><br><span class="line">ObjCBlockIndentWidth: <span class="number">4</span></span><br><span class="line"><span class="preprocessor"># 是否允许短方法单行</span></span><br><span class="line">AllowShortFunctionsOnASingleLine: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 是否允许短if单行 If true, if (a) return; 可以放到同一行</span></span><br><span class="line">AllowShortIfStatementsOnASingleLine: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#注释对齐</span></span><br><span class="line">AlignTrailingComments: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 换行的时候对齐操作符</span></span><br><span class="line"><span class="preprocessor">#AlignOperands: true</span></span><br><span class="line"><span class="preprocessor"># 中括号两边空格 [] </span></span><br><span class="line">SpacesInSquareBrackets: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 小括号两边添加空格</span></span><br><span class="line">SpacesInParentheses : <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#多行声明语句按照=对齐</span></span><br><span class="line">AlignConsecutiveDeclarations: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#连续的赋值语句以 = 为中心对齐</span></span><br><span class="line">AlignConsecutiveAssignments: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#等号两边的空格</span></span><br><span class="line">SpaceBeforeAssignmentOperators: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 容器类的空格 例如 OC的字典</span></span><br><span class="line">SpacesInContainerLiterals: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#缩进</span></span><br><span class="line">IndentWrappedFunctionNames: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#在block从空行开始</span></span><br><span class="line">KeepEmptyLinesAtTheStartOfBlocks: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#在构造函数初始化时按逗号断行，并以冒号对齐</span></span><br><span class="line">BreakConstructorInitializersBeforeComma: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#函数参数换行</span></span><br><span class="line">AllowAllParametersOfDeclarationOnNextLine: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#括号后添加空格</span></span><br><span class="line">SpaceAfterCStyleCast: <span class="literal">true</span></span><br><span class="line"><span class="preprocessor">#tab键盘的宽度</span></span><br><span class="line">TabWidth: <span class="number">4</span></span><br><span class="line">UseTab: Never</span><br></pre></td></tr></table></figure></p>
<h2 id="使用方法">使用方法</h2><ol>
<li>安装Clang-Format Xcode插件, <a href="https://github.com/travisjeffery/ClangFormat-Xcode" target="_blank" rel="external">地址</a></li>
<li>在用户根目录下创建 <code>.clang-format</code>文件,将上面配置拷贝进去</li>
<li>在Xocde中的选中以下菜单即可:<br>  <img src="http://7xv9rf.com1.z0.glb.clouddn.com/82417QQ20160818-1@2x.png" alt="82417QQ20160818-1@2x.png"></li>
<li>可以设置在保存文件的时候自动格式化,也可以自己配置<br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/67391QQ20160818-2@2x.png" alt="67391QQ20160818-2@2x.png"></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim实践Tips(六)]]></title>
      <url>http://yoursite.com/2016/08/03/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/Vim%E5%AE%9E%E8%B7%B5Tips-%E5%85%AD/</url>
      <content type="html"><![CDATA[<h2 id="Tip_27_遇见Vim的命令行">Tip 27 遇见Vim的命令行</h2><p>当我们按下<code>:</code>,Vim就切换到了底行模式.这个模式和shell的命令行有些类似.我们只要输入点命令,然后按下<code>&lt;CR&gt;</code>就能执行.使用<code>&lt;Esc&gt;</code>可以从底行模式切换到命令行模式.</p>
<p>由于一些历史原因,我们执行的命令叫做 <code>Ex Commands</code> .当我们按下<code>/</code>之后,或者使用<code>&lt;C-r&gt;=</code>访问表达式寄存器的时候,也都会进入底行模式.这章中提到的一些小技巧也都适用于不同的情况,但是在这个章节,我们先讨论<code>Ex commands</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  命令                     效果</span><br><span class="line">:[range]delete[x]          删除特定的行(放到寄存器x中)</span><br><span class="line">:[range]yank[x]            复制特定的行(放到寄存器x中)</span><br><span class="line">:[line]put[x]              把寄存器x中的内容放到特定的行后面</span><br><span class="line">:[range]<span class="keyword">copy</span>&#123;address&#125;      复制特定的行到通过地址指定的行的下面</span><br><span class="line">:[range]move&#123;address&#125;      移动特定的行到通过地址指定的行的下面</span><br><span class="line">:[range]join               连接指定的行</span><br><span class="line">:[range]normal &#123;commands&#125;  对特定的范围执行命令模式下的命令</span><br><span class="line">:[range]substitute/&#123;pattern&#125;</span><br><span class="line">/&#123;string&#125;/&#123;flags&#125;</span><br><span class="line">                           在特定的行里面,把符合条件的匹配使用字符串替换掉.</span><br><span class="line">:[range]global/&#123;pattern&#125;/[cmd] 在所有匹配到pattern的行中,执行Ex命令</span><br></pre></td></tr></table></figure>
<p>我们可以Ex命令读写文件(<code>:read</code>和<code>:write</code>),或者使用<code>:tabnew</code>命令创建Tab页,或者使用<code>:split</code>命令创建窗口.</p>
<h2 id="Tip_28_在一到多个连续行中执行命令">Tip 28 在一到多个连续行中执行命令</h2><p>许多Ex命令都可以接受一个{range},我们可以通过行号,标记,或者是一个Pattern来提供范围.<br>假设有下面一段代码:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;&lt;title&gt;Practical Vim&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;&lt;h1&gt;Practical Vim&lt;/h1&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>为了说明,我们使用<code>:print</code>命令,这个命令可以简单的通过这个命令将特定的行打印到Vim的底行之下.<br>这个命令没有什么特定的功能.但是可以用来做说明.当然,你也可以通过<code>:delete</code>,<code>:join</code>,<code>:substitude</code>,<code>:normal</code>这几个命令来测试.通过测试,你就可以知道怎么使用Ex命令了.</p>
<h3 id="使用行号作为地址">使用行号作为地址</h3><p>如果我们输入一个仅由数字组成的Ex命令.Vim就会把这个命令当做地址,然后将光标移动到那一行.所以,我们就能通过下面的这个命令跳转到文件顶部:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="number">1</span></span><br><span class="line">:print</span><br></pre></td></tr></table></figure></p>
<p>你也可以使用<code>:p</code>来打印,这个是<code>:print</code>的缩写形式.你也可以将两个命令合并到一起.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="number">3</span>p</span><br></pre></td></tr></table></figure></p>
<p>这个命令移动到第3行,然后打印该行的内容.我们只是通过<code>:p</code>命令来说明问题,下面你可以试试这个命令.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="number">3</span>d</span><br></pre></td></tr></table></figure></p>
<p>这个命令跳转到第3行,然后执行删除命令.它相当于在命令模式下执行:<code>3Gdd</code>.这个命令比命令行模式下的要快点.</p>
<h3 id="通过地址指定一个范围">通过地址指定一个范围</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="number">2</span>,<span class="number">5</span>p</span><br></pre></td></tr></table></figure>
<p>这个命令可以打印从第2行到第5行,并且最后光标停留在第5行.通常来说,范围可以表现为这个形式:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:&#123;start&#125;,&#123;end&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意,这个<code>start</code>和<code>end</code>都是地址,目前我们知道的地址是行号.在后面的我们将见到通过匹配和标记指定的地址.</p>
<p><code>.</code>可以用来表达为当前行,所以,我们可以通过下面的命令打印从当前行到文件末尾<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="number">2</span></span><br><span class="line">:.,$p</span><br></pre></td></tr></table></figure></p>
<p><code>%</code>这个符号也有特别的意义,它代表了当前文件中的所有行.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%p</span><br></pre></td></tr></table></figure></p>
<p>它相当于<code>:1,$p</code>这个命令.</p>
<h3 id="通过在可视化模式下的选择指定范围">通过在可视化模式下的选择指定范围</h3><p>首先通过命令<code>2G</code>跳转到第2行,然后<code>VG</code>可以选择从2行到文件结尾.此时,我们按下<code>:</code>.这时候,底行上出现了<code>:&#39;&lt;,&#39;&gt;</code>,看起来有点怪怪的,但是你可以简单的认为,它就代表了可视化模式的选区.然后,我们就能指定Ex命令.例如:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:'&lt;,'&gt;p</span><br></pre></td></tr></table></figure></p>
<h3 id="通过匹配指定范围">通过匹配指定范围</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:/&lt;html&gt;/,/&lt;\/html&gt;/p</span><br></pre></td></tr></table></figure>
<p>打印结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;&lt;title&gt;Practical Vim&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;&lt;h1&gt;Practical Vim&lt;/h1&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>看起来有点复杂,但是,它还是遵循了<code>:{start},{end}</code>的形式.这个<code>start</code>和刚刚的<code>/&lt;html&gt;/</code>相对应.而<code>end</code>和<code>/&lt;\/html&gt;/</code>相对应.</p>
<p>在这个例子中,我们可以通过<code>:2,5</code>指定范围,这个方式更简洁.而通过标签形式的方式,可以直接匹配标签,不论中间有多少行.</p>
<h3 id="通过偏移来指定地址">通过偏移来指定地址</h3><p>假设我们有需求:<code>打印所有的&lt;html&gt;标签内的内容,但是不打印包含&lt;html&gt;的行.</code><br>我们可以指定偏移:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:/&lt;html&gt;/+<span class="number">1</span>,/&lt;\/html&gt;/-<span class="number">1</span>p</span><br></pre></td></tr></table></figure></p>
<p>打印结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;&lt;title&gt;Practical Vim&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;h1&gt;Practical Vim&lt;/h1&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>
<p>这个语法的一般形式:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;address&#125;+n</span><br></pre></td></tr></table></figure></p>
<p>如果<code>n</code>省略,那么它默认是1.这个<code>address</code>可以是<code>行号</code>或者是<code>标记</code>或者是<code>模式匹配</code><br>那么我们可以实现,从当前行打印后面3行<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:.,.+<span class="number">3</span>p</span><br></pre></td></tr></table></figure></p>
<h3 id="讨论">讨论</h3><p>指定范围的语法非常灵活.我们可以混合使用<code>行号</code> <code>标记</code> <code>模式匹配</code>,也可以通过应用偏移来修改范围.<br>下面的表格可以作为一个参考:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">符号      代表的地址</span><br><span class="line">1         文件的第一行</span><br><span class="line">$         文件的最后一行</span><br><span class="line">.         光标所在行</span><br><span class="line">'m        标记m所在的行</span><br><span class="line">'&lt;        可视化选区的开始</span><br><span class="line">'&gt;        可视化选区的结尾</span><br><span class="line">%         文件所有行 ( :1,$ 的快捷方式)</span><br><span class="line">0         第0行</span><br></pre></td></tr></table></figure></p>
<p>第0行并不真实存在,但是在特定的情况下,这个地址还是很有用的.例如,在<code>:copy {address}</code>和<code>:move {address}</code>中,我们想复制或者移动从文件开头的范围.在后面的两个Tip中,我们将看到具体的例子.</p>
<p>当我们指定一个<code>[range]</code>,它总是表示一些连续的行.我们也能通过模式匹配应用Ex命令到一系列非连续的行,通过<code>:global</code>这个命令就能做到.</p>
<h2 id="Tip_29_通过t和m复制和移动行">Tip 29 通过t和m复制和移动行</h2><p><code>:copy</code>命令(快捷方式是<code>:t</code>)让我们可以复制1到多行,而<code>:move</code>命令可以移动1到多行.</p>
<p>为了说明,我们使用下面的代码:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Shopping list</span><br><span class="line">    Hardware Store</span><br><span class="line">        Buy new hammer</span><br><span class="line">    Beauty Parlor</span><br><span class="line">        Buy nail polish remover</span><br><span class="line">        Buy nails</span><br></pre></td></tr></table></figure></p>
<h3 id="通过:t命令复制行">通过:t命令复制行</h3><p>我们的购物清单还不完整.假设我们也需要在<code>Hardware Store</code>买<code>nails</code>.为了修正这个清单,我们重用文件的最后一行.我们可以简单的使用<code>:copy</code>命令完成</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Shopping list</span><br><span class="line">    Hardware Store</span><br><span class="line">        Buy nails</span><br><span class="line">        Buy new hammer</span><br><span class="line">    Beauty Parlor</span><br><span class="line">        Buy nail polish remover</span><br><span class="line">        Buy nails</span><br></pre></td></tr></table></figure>
<p>上述命令是通过<code>:160copy.</code>完成的(在我编写这个文档的时候,Buy nails 是第160行`)</p>
<p>copy命令的一般格式是:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[range]<span class="keyword">copy</span> &#123;address&#125;</span><br></pre></td></tr></table></figure></p>
<p>在我们的例子中,<code>[range]</code>是<code>160</code>行.<code>{address}</code>在这个例子中是<code>.</code>,代表了当前行.所以这个<code>:160copy.</code>的意义是:<code>复制160行,并且放置到当前行的下面</code>.</p>
<p>我们也可以简写<code>:copy</code>成<code>:co</code>,也可以更简洁的写成<code>:t</code>.为了辅助记忆,你可以理解<code>t</code>为:<code>copy To</code>.下面的表格中列举了一些<code>:t</code>的用法:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">命令             效果</span><br><span class="line">:6t.            复制第6行到当前行的下面</span><br><span class="line">:t6             复制当前行到第6行下面</span><br><span class="line">:t.             复制当前行(相当于命令模式下的yyp)</span><br><span class="line">:t$             复制当前行到文件结尾</span><br><span class="line">:'&lt;,'&gt;t0        复制可视化选区到文件开头</span><br></pre></td></tr></table></figure></p>
<p>注意: <code>:t.</code>复制当前行.作为选择,我们也可以通过命令模式下的<code>yyp</code>实现同样的效果.一个值得注意的区别就是<code>yyp</code>使用寄存器,而<code>:t.</code>不这样.有时候,为了避免覆盖默认寄存器的内容,我使用<code>:t.</code>复制当前行.</p>
<p>在这个例子中,我们使用<code>yyp</code>的变体复制我们想要的行,但是,它需要一些额外的移动.我们需要先跳转到到我们想复制的行<code>6G</code>,复制<code>yy</code>,回到我们开始的地方<code>&lt;C-o&gt;</code>,然后<code>p</code>粘贴.所以,在这种比较远的复制操作,<code>:t</code>这种命令更高效.</p>
<h3 id="通过:m命令移动行">通过:m命令移动行</h3><p>语法是:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:[range]move &#123;address&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以简写成<code>:m</code><br>如果已经选择好了分区.我们可以直接运行命令<code>:&#39;&lt;,&#39;&gt;m$</code>,作为选择,我们也可以使用<code>dGp</code>命令.这个命令可以分解为:<code>d</code>删除,同时复制到寄存器,<code>G</code>跳转到文件结尾,<code>p</code>粘贴内容.</p>
<p>重复上个Ex命令: <code>@:</code></p>
<h2 id="Tip_30_在一个范围上使用命令模式的命令">Tip 30 在一个范围上使用命令模式的命令</h2><p>在Tip 2 中,我们在每行的后面追加一个分号,当时我们使用的<code>.</code>命令做的重复.当时只有几行,那么做可以,但是如果有2000行需要追加呢? 显然,用<code>j.</code>的方式就不靠谱了.</p>
<p>使用<code>normal</code>命令可以对一个范围使用命令模式下的命令.</p>
<p>我们使用下面的代码来说明问题:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = <span class="number">1</span></span><br><span class="line">var bar = <span class="string">'a'</span></span><br><span class="line">var baz = <span class="string">'z'</span></span><br><span class="line">var foobar = foo + bar</span><br><span class="line">var foobarbaz = foo + bar + baz</span><br></pre></td></tr></table></figure></p>
<ol>
<li><code>A;&lt;Esc&gt;</code> 跳转到行结尾,输入<code>;</code>,退出插入模式</li>
<li><code>jVG</code> 选中除了第一行的的后面所有行</li>
<li><code>&#39;&lt;,&#39;&gt;normal.</code> normal执行命令模式,<code>.</code>重复</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = <span class="number">1</span>;</span><br><span class="line">var bar = <span class="string">'a'</span>;</span><br><span class="line">var baz = <span class="string">'z'</span>;</span><br><span class="line">var foobar = foo + bar;</span><br><span class="line">var foobarbaz = foo + bar + baz;</span><br></pre></td></tr></table></figure>
<p>使用了上面的步骤,不管是5行还是5000行,都能正常工作.<br>其实不仅仅是<code>.</code>这个命令,使用了<code>normal</code>这个标记之后,我们可以执行任何命令模式下命令.</p>
<p>在这个例子中,我们可以通过一个命令完成操作.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%normal A;</span><br></pre></td></tr></table></figure></p>
<p><code>%</code>这个命令表示整个文件范围的行.所以上面的命令的意思是:<code>在文件的每一行后面都追加一个;</code>,而且Vim会在完成之后,自动切换到命令模式</p>
<p>既然可以通过<code>:normal</code>这个命令使用所有的命令模式命令.那么下面这个命令也很同意理解.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%normal i<span class="comment">//</span></span><br></pre></td></tr></table></figure>
<p>在所有行的开始加入<code>//</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim实践Tips(五)]]></title>
      <url>http://yoursite.com/2016/08/03/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/Vim%E5%AE%9E%E8%B7%B5Tips-%E4%BA%94/</url>
      <content type="html"><![CDATA[<h2 id="Tip_20_体验可视化模式">Tip 20 体验可视化模式</h2><p>在可视化模式下,很多命令的作用和它们在命令模式时相同.我们仍旧可以使用<code>hjkl</code>来移动光标.使用<code>f{char}</code>跳转到当前行的某个字符.然后使用<code>;</code>重复跳转,或者使用<code>,</code>反向跳转.我们甚至可以使用查找命令(包括<code>n</code>和<code>N</code>)跳转到匹配的地方.在可视化模式下,移动光标,将改变选择的范围.</p>
<p>虽然大多数命令一样,但是也有一些细微的差别,例如<code>c</code>这个命令.在命令模式下.我们使用<code>c{motion}</code>删除内容并进入插入模式.而在可视化模式下,在选中了部分内容时,只需要一个<code>c</code>就能进入插入模式,删除的内容是高亮部分的内容.这时候,这个<code>c</code>的作用更直观了.</p>
<p>下面看一个例子:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">March is a month</span><br></pre></td></tr></table></figure>
<p>如果要把<code>March</code>改为<code>April</code>,假设我们已经把光标放在了<code>March</code>这个单词上的任意位置了.那么可以通过<code>viw</code>选择整个单词.这时候,我们不能直接输入<code>April</code>,因为<code>A</code>会触发Vim命令.然后只会输入剩下的<code>pril</code>.所以,我们使用<code>c</code>这个命令,删除当前选择并进入插入模式.然后输入<code>April</code>.</p>
<h3 id="遇见选择模式">遇见选择模式</h3><p>在一般的编辑器中,当我们选中想要删除的文字时候,只要输入点内容,就能覆盖原来的文本,但是可视化模式没有遵循这个惯例.而选择模式是这样的.</p>
<p>我们可以通过<code>&lt;C-g&gt;</code>切换可视化模式和选择模式.唯一可以看到的区别就是在屏幕的底部,可视化模式是<code>VISUAL</code>而选择模式是<code>SELECT</code>.当在选择模式下输入任意可打印的字符时候,将替换,并自动进入插入模式.当然,这个功能也能通过在可视化模式下,按<code>c</code>来实现.Vim做这个东西的作用,应该为了更符合用户的习惯.</p>
<h2 id="Tip21_定义可视化选区">Tip21 定义可视化选区</h2><p><strong>可视化模式有三个不同的子模式,他们用来处理不同的可视化模式.</strong></p>
<p>在字符可视化模式(character-wise Visual mode),我们可以以字符为单位选取内容.它可以是一个字符,也可以是多行.它适合于对独立的单词或者段落.<br>在行可视化模式(line-wise Visual mode),处理的单位是行<br>在块可视化模式(block-wise Visual mode),我们可以选择柱形区域</p>
<p>这里只是粗略一说,后面有更详细的内容.</p>
<h3 id="进入可视化模式">进入可视化模式</h3><p>使用<code>v</code>键,可以进入可视化模式.按<code>v</code>键,可以从命令模式,进入字符可视化模式.通过<code>V</code>(Shift-v),可以进入行可视化模式.通过<code>&lt;C-v&gt;</code>可以进入块可视化模式.<br>下面是简单的一个列举:</p>
<p>命令        作用<br>v           进入字符可视化模式<br>V           进入行可视化模式</p>
<p><c-v>       进入块可视化模式<br>gv          重新选择最后一次的选区</c-v></p>
<p><code>gv</code>是个很好用的快捷命令.无论是什么可视化模式,<code>gv</code>都能应对自如.唯一可能有点问题的是:你已经删除了最后一次选区的内容.</p>
<h3 id="在可视化模式中切换">在可视化模式中切换</h3><p>下面是命令参考表<br>命令          作用</p>
<p><esc>         切换到命令模式</esc></p>
<p><c-[>         切换到命令模式<br>v             在命令模式和字符可视化模式切换<br>V             在命令模式和行可视化模式切换</c-[></p>
<p><c-v>         在命令模式和字符块视化模式切换<br>o             把光标在选区的两端切换.</c-v></p>
<h3 id="切换选区的可变端">切换选区的可变端</h3><p>默认选择选区的时候,一端是固定的,另一端是可以通过各种移动命令进行移动的.可以通过<code>o</code>这个命令切换移动端.</p>
<p>补充小知识:</p>
<p><code>e</code>移动到下个单词的结尾.</p>
<h2 id="Tip_22_重复行可视化模式命令">Tip 22 重复行可视化模式命令</h2><p>当我们在可视化模式下执行一个命令之后,我们就会进入命令模式.在可视化模式下选中的文字将取消选中.那么如果我们想对刚刚选中的文字重新执行一个可视化模式的命令该怎么办?</p>
<p>假设我们有下面一段python:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def fib(n):</span><br><span class="line">  a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> a &lt; n:</span><br><span class="line">print a,</span><br><span class="line">a, b = b, a+b</span><br><span class="line">fib(<span class="number">42</span>)</span><br></pre></td></tr></table></figure>
<h3 id="准备工作">准备工作</h3><p>为了让<code>&lt;</code>和<code>&gt;</code>这两个命令正常工作,我们应该做下面的设置:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set shiftwidth=<span class="number">4</span> softtabstop=<span class="number">4</span> expandtab</span><br></pre></td></tr></table></figure></p>
<h3 id="缩进一次,然后重复">缩进一次,然后重复</h3><p>对于刚刚的python代码,缩进有问题,我们应该在可视化模式下选择.然后使用<code>&gt;</code>这个命令缩进.但是缩进要超过两次.而执行一次刚刚的命令之后,我们就会进入命令模式.</p>
<p>有个解决方案是通过<code>gv</code>命令,然后再次执行缩进命令.但是如果你对Vim已经有了感觉,那你就应该知道这个方式是不好的.</p>
<p>当我们需要重复,<code>.</code>这个命令是一个非常好的选择.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def fib(n):</span><br><span class="line">  a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> a &lt; n:</span><br><span class="line">    print a,</span><br><span class="line">    a, b = b, a+b</span><br><span class="line">fib(<span class="number">42</span>)</span><br></pre></td></tr></table></figure>
<p>上面是通过 <code>Vj</code>选中两行,然后<code>&gt;.</code>完成的</p>
<p>如果你喜欢计算,那么你可能更喜欢<code>2&gt;</code>这个命令.但是我更喜欢使用<code>.</code>这个命令.因为这个命令可以给我可视化的反馈.我也能享受到自己键盘的反馈的乐趣.之前我们也讨论过计数和重复的取舍.你可以重新看看.</p>
<h2 id="Tip_23_在可能的时候,在可视化模式下,使用操作符">Tip 23 在可能的时候,在可视化模式下,使用操作符</h2><p>可视化模式更直观,但是它有个缺点:<code>.</code>这个命令不能完全发挥作用.我们可以通过命令模式下的命令来搞定这个缺点.</p>
<p>假设我们有下面一段文字.我们想把下面链接设置为大写<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="#"&gt;one&lt;/a&gt;</span><br><span class="line">&lt;a href="#"&gt;two&lt;/a&gt;</span><br><span class="line">&lt;a href="#"&gt;three&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>
<p>我们可以通过<code>vit</code>命令选中标签内部的文字,它理解为:可视化选中标签之间的文字.<code>it</code>命令是一种特别的<code>{motion}</code>命令.我们将在<code>Tip 51</code>进行更深入讨论.</p>
<h3 id="使用可视化操作符号">使用可视化操作符号</h3><p>在可视化模式下,我们选择一段文字,然后对它进行操作.在这个案例下,我们可以使用<code>U</code>命令来让选中的文字变成大写.<br>完成了第一行之后,如果想对第二行,第三行进行操作.应该怎么办呢?<code>.</code>命令可以吗?</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="#"&gt;ONE&lt;/a&gt;   "vit</span><br><span class="line">&lt;a href="#"&gt;TWO&lt;/a&gt;   "j.</span><br><span class="line">&lt;a href="#"&gt;THRee&lt;/a&gt; "j.</span><br></pre></td></tr></table></figure>
<p>可以看到,<code>.</code>命令仅仅重复了三个字符.造成了最后一行的样子.这并不是我们想要的结果.</p>
<h3 id="使用命令模式下的操作符">使用命令模式下的操作符</h3><p><code>U</code>这个可视化模式的操作符对应了一个命令模式下的版本:<code>gU{motion}</code>,但是在语义上有很大不同.<br>在可视化模式命令<code>U</code>的案例中,我们做了两件事:</p>
<ol>
<li><code>vit</code>选中文本</li>
<li><code>U</code>操作文本变成大写<br>在命令模式的案例中,我们弄了一个命令,这个命令由:<code>gU</code>操作和<code>it</code>作为<code>{motion}</code>.</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="#"&gt;ONE&lt;/a&gt; "gUit</span><br><span class="line">&lt;a href="#"&gt;TWO&lt;/a&gt; "j.</span><br><span class="line">&lt;a href="#"&gt;THREE&lt;/a&gt; "j.</span><br></pre></td></tr></table></figure>
<p>确实,可视化模式有局限性.但是它也很有用处.因为并不是所有编辑工作都需要重复.所以可视化模式是非常适合单次的编辑.</p>
<h2 id="Tip_24_在块可视化模式下编辑表格化数据">Tip 24 在块可视化模式下编辑表格化数据</h2><p>所有编辑器都可以以行为单位编辑数据.在Vim中,块可视化模式,提供给我们以列为单位编辑数据.</p>
<p>假设有下面的文本</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chapter       Page</span><br><span class="line">Normal mode     <span class="number">15</span></span><br><span class="line">Insert mode     <span class="number">31</span></span><br><span class="line">Visual mode     <span class="number">44</span></span><br></pre></td></tr></table></figure>
<p>我们要加点东西,让上面的文字看起来更像表格.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Chapter     | Page</span><br><span class="line">==================</span><br><span class="line">Normal mode |   <span class="number">15</span></span><br><span class="line">Insert mode |   <span class="number">31</span></span><br><span class="line">Visual mode |   <span class="number">44</span></span><br></pre></td></tr></table></figure>
<p>上面的实现步骤是:</p>
<ol>
<li><code>&lt;C-v&gt;3j</code>进入块可视化模式,并向下选择3行</li>
<li><code>r|</code>将选中范围替换为 <code>|</code></li>
<li>同理,复制一行,然后替换为<code>=</code></li>
</ol>
<h2 id="Tip_25_改变多列文本">Tip 25 改变多列文本</h2><p>假设有下面一段css代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li.one   a&#123; background-image: url('/images/sprite.png'); &#125;</span><br><span class="line">li.two   a&#123; background-image: url('/images/sprite.png'); &#125;</span><br><span class="line">li.three a&#123; background-image: url('/images/sprite.png'); &#125;</span><br></pre></td></tr></table></figure></p>
<p>假设<code>sprite.png</code>  已经从<code>images</code>文件夹移动到了<code>components</code>文件夹.我们需要修改三行来改变目录.这时候,我们就能使用块可视化模式了.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li.one   a&#123; background-image: url('/components/sprite.png'); &#125;</span><br><span class="line">li.two   a&#123; background-image: url('/components/sprite.png'); &#125;</span><br><span class="line">li.three a&#123; background-image: url('/components/sprite.png'); &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>光标定位到images这个单词的开头.</li>
<li><code>&lt;C-v&gt;jje</code>选中三列的images</li>
<li><code>c</code>删除单词,并进入插入模式, 输入<code>components</code>,然后<code>&lt;Esc&gt;</code>.</li>
</ol>
<p>唯一一个可能造成疑惑的是,当第三步输入单词之后,只改变了第一行.但是,当按了<code>&lt;Esc&gt;</code>之后,三行都改变了.<br>确实Vim的这个功能有点不太人性化.但是,最终结果没有什么区别.习惯就好了</p>
<h2 id="Tip_26_在参差不齐的块选区后面追加内容">Tip 26 在参差不齐的块选区后面追加内容</h2><p>假设有下面一段js代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var foo = <span class="number">1</span></span><br><span class="line">var bar = <span class="string">'a'</span></span><br><span class="line">var foobar = foo + bar</span><br></pre></td></tr></table></figure></p>
<p>这三行不是一样长的,假设我们想为每一行的后面添加一个<code>,</code> 在<code>Tip2</code>我们通过<code>.</code>完成了这个操作.其实通过块可视化区域也能完成这个任务.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var foo = <span class="number">1</span>;</span><br><span class="line">var bar = <span class="string">'a'</span>;</span><br><span class="line">var foobar = foo + bar;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>&lt;C-v&gt;jj$</code>选中全部</li>
<li><code>A;</code>移动到结尾,进入插入模式,并输入</li>
<li><code>&lt;Esc&gt;</code>完成</li>
</ol>
<p>细心可以看出,这个操作和Tip 25差不多意思.<br>主要是通过<code>$</code>改变了矩形的结尾.</p>
<h3 id="Vim关于_i_和_a_的惯例">Vim关于 i 和 a 的惯例</h3><p>Vim有很多从命令模式切换到插入模式的按键.<code>i</code>和<code>a</code>都能完成这个操作.<code>i</code>在光标前进入插入模式,<code>a</code>在光标后进入插入模式.<code>I</code>和<code>A</code>功能类似,是在行开头和行结尾进入插入模式.</p>
<p>在块可视化模式中,<code>A</code>和<code>I</code>的功能和在命令模式下类似.那么<code>a</code>和<code>i</code>呢?</p>
<p>在可视化模式和操作符悬停模式下,<code>a</code>和<code>i</code>有不同的意义.这个在Tip 51会有更深入的讨论.现在记得,使用<code>A</code>和<code>I</code>替代</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim实践Tips(四)]]></title>
      <url>http://yoursite.com/2016/07/22/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/Vim%E5%AE%9E%E8%B7%B5Tips-%E5%9B%9B/</url>
      <content type="html"><![CDATA[<h2 id="Tip_13_在插入模式下做修改">Tip 13 在插入模式下做修改</h2><p>如果我们在插入模式下输入错误,没有必要先切换模式然后做修改.除了退格键,我们还有一些插入模式下的命令可以用.</p>
<p>凭借触感打字不仅仅是不看键盘.而是凭借感觉输入.当输入错误的时候,甚至他们不用看到屏幕上的错误就知道自己输入错误了.因为他们指头已经知道自己刚刚按错地方了.</p>
<p>当输入的错误在单词结尾的时候,退格键是有效的纠正方式,但是当错误出现在单词开头的时候呢?</p>
<p>出色的打字员推荐这样一个方式: 当出现错误的时候,删除整个单词,然后重新输入.如果你一分钟能输入<code>60</code>个单词,那么重新输入总会比你单个删除字符更快.当然,如果你打字慢,就可以当成一个练习打字速度的练习.多输入正确的单词,有利于你养成输入的感觉.</p>
<p>当然,你也可以切换到命令模式.把光标跳转到单词开头,修改错误,然后<code>A</code>跳转到句子结尾.这个行为肯定是呀看大于1秒了.重要的是,这个不会提高你对输入的感觉</p>
<p>在插入模式下,就像你预料到的,它删除光标前的字符.下面的快捷键也是挺好的:</p>
<ul>
<li><code>&lt;C-h&gt;</code> 删除前面的一个字符,等于退格键</li>
<li><code>&lt;C-w&gt;</code> 删除前面的一个单词</li>
<li><code>&lt;C-u&gt;</code> 删除到本行开始</li>
</ul>
<p>上面的命令不是插入模式特有,甚至不是Vim特有的,你也可以在Bash Shell中使用它们.</p>
<h2 id="Tip14_回到命令模式">Tip14 回到命令模式</h2><p>插入模式是特定用于文本输入的模式.命令模式才是才是我们花费时间最多的模式,它的名字是<code>normal mode</code>,这个名字说明了一切.所以,会在这两者之前切换就很重要了.</p>
<p>经典的返回命令模式的方式是按<code>&lt;Esc&gt;</code>键,但是对于大多数键盘,这个键有点远.所以,作为备选方案,你可以按<code>Ctrl+[</code>,这个组合件和<code>&lt;Esc&gt;</code>等价.</p>
<ul>
<li><code>&lt;Esc&gt;</code> 切换到命令模式</li>
<li><code>&lt;C-[&gt;</code> 切换到命令模</li>
<li><code>&lt;C-o&gt;</code> 在插入和命令模式下切换</li>
</ul>
<h3 id="遇见插入命令模式">遇见插入命令模式</h3><p>插入命令模式是命令模式的一个特别版本.我们可以出发一个单独命令,之后我们就会进入插入模式.在插入模式中,我们可以通过<code>&lt;C-o&gt;</code>切换到命令模式.</p>
<p>我们会通过<code>zz</code>命令将当前行滚动到屏幕中间.而我经常做的是在插入模式下<code>&lt;C-o&gt;zz</code>,这样会把当前行滚动到屏幕中间,并且可以继续输入.</p>
<h2 id="Tip_15_在不离开插入模式下前提下,从寄存器粘贴">Tip 15 在不离开插入模式下前提下,从寄存器粘贴</h2><p>Vim的复制粘贴命令多数情况下是在命令模式下执行的.但是,有时候我们想在插入模式进行.</p>
<h3 id="映射CapsLock键-">映射<code>CapsLock</code>键.</h3><p>对于Vim的使用者来说,<code>CapsLock</code>键简直就是个威胁.例如本来<code>j</code>是移动.可是当<code>CapsLock</code>之后,它成为了<code>J</code>是联合两行.很多Vimer都把<code>CapsLock</code>映射成了其他键位.例如<code>&lt;Esc&gt;</code>或者<code>Ctrl</code>.我推荐你对它进行映射.</p>
<p>下面一段文字<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Practical Vim, by Drew Neil</span><br><span class="line">Read Drew Neil<span class="string">'s</span></span><br></pre></td></tr></table></figure></p>
<p>我们想通过插入本书书名的方式完成第二行.本书的名字已经在第一行了.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Practical Vim, by Drew Neil  " yt,</span><br><span class="line">Read Drew Neil's Practical Vim            "按键顺序jA &lt;C-r&gt;0.&lt;ESc&gt;</span><br></pre></td></tr></table></figure>
<p><code>yt,</code>复制<code>,</code>之前的单词到寄存器中<br><code>&lt;C-r&gt;0</code> 粘贴寄存器中的内容到当前光标我再的位置.</p>
<p>通用的格式是<code>&lt;C-r&gt;{register}</code>这个<code>register</code>是我们想要插入的寄存器.</p>
<p><code>&lt;C-r&gt;{register}</code> 这个命令对于少数的字符来说,是比较好的.但是如果粘贴大量的文本,你就会感觉到了延迟.因为这个命令从寄存器中粘贴,相当于一个一个的字符进行输入.如果<code>textwidth</code>或者<code>autoindent</code>选项开启了.那么你可能会得到一些不想要的断行或者额外的缩进.</p>
<p><code>&lt;C-r&gt;&lt;C-p&gt;{register}</code>命令更智能一些.它真实的插入文字,并且能够修正缩进问题.所以,如果要从寄存器中粘贴多行文本.我推荐你使用这个命令.</p>
<h2 id="Tip16_在输入处进行计算">Tip16 在输入处进行计算</h2><p>表达式寄存器允许我们执行计算并插入到我们的文档中.</p>
<p>多数Vim的寄存器既可以包含字符组成的字符串,也可以包含一整行文字.我们通过删除或者复制命令设置寄存器的内容.</p>
<p>表达式寄存器有所不同.它可以评估一段Vim脚本代码,然后返回结果.所以,我们可以把它当做一个计算器.它的结果可以和其它的文本寄存器一样使用.</p>
<p>在插入模式下输入<code>&lt;C-r&gt;=</code>,这样,在底行下会有提示.然后就能直接输入计算表达式了.当计算完成.<code>&lt;CR&gt;</code>一下,表达式结果就能直接插入到文档中了.</p>
<p>假设有下面的文本</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> chairs, each costing $<span class="number">35</span>, totals $</span><br></pre></td></tr></table></figure>
<p>使用寄存器:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> chairs, each costing $<span class="number">35</span>, totals $<span class="number">210</span>   <span class="string">"A&lt;C-r&gt;6*35&lt;CR&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Tip17_通过字符编码插入字符">Tip17 通过字符编码插入字符</h2><p><strong>Vim可以通过字符编码插入任意字符,通过这个特性,我们可以输入键盘上找不到的字符</strong></p>
<p>在插入模式下,输入<code>&lt;C-v&gt;{code}</code>即可,code是字符的编码.Vim要求code是三位数.所以,如果我们要输入<code>A</code>这个字符,它的字符编码是<code>65</code>,那么我们需要输入<code>&lt;C-v&gt;065</code>.</p>
<p>但是如果我们想要插入大于三位的字符编码怎么办呢?我们可以告诉Vim,要使用十六进制输入<code>&lt;C-v&gt;u{1234}</code>.例如,我们要插入一个倒着的问号.(字符码是<code>00bf</code>) 那么我们输入<code>&lt;C-v&gt;u00bf</code></p>
<p>使用<code>ga</code>命令可以查看文档中字符的编码.命令模式下将光标停留在想要查看的字符上,然后<code>ga</code>,文档的底部将会显示它的信息,包括字符编码,十六进制和十进制表示.</p>
<p>另外一种场景,如果<code>&lt;C-v</code>命令后面跟了非数字键,那么它插入那个键的文字表示,例如我按下<code>&lt;C-v&gt;退格键</code>,那么输入的将是<code>&lt;BS&gt;</code></p>
<h2 id="Tip18_通过连字插入字符-">Tip18 通过连字插入字符.</h2><p><strong>通过字符编码插入字符虽好,但是字符编码难记.通过连字插入会简单一些</strong></p>
<p>在插入模式下,输入<code>&lt;C-k&gt;{char1}{char2}</code>即可</p>
<p>连字通常是有一定的意义的.例如常见的<code>1/2</code>,<code>1/3</code>,我们可以输入<code>&lt;C-k&gt;12</code>,<code>&lt;C-k&gt;13</code>得到.倒置的问号可以通过<code>&lt;C-k&gt;?I</code>得到.</p>
<p>更多的连字可以通过<code>:digraphs</code>查看.</p>
<h2 id="使用替换模式覆盖文字">使用替换模式覆盖文字</h2><p>有下面一段文字</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Typing in Insert mode extends the line. But in Replace mode</span><br><span class="line">the line length doesn't change.</span><br></pre></td></tr></table></figure>
<p>我们想把两句话合并成一句话.意味着:</p>
<ol>
<li>将<code>.</code>换成<code>,</code></li>
<li>把<code>B</code>改成<code>b</code><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Typing in Insert mode extends the line, but in Replace mode</span><br><span class="line">the line length doesn't change.</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>我们使用<code>f.</code>定位光标到<code>.</code>的位置.然后<code>R</code>进入替换模式.然后输入<code>, b</code>替换原来的字符.完成替换之后,我们可以按<code>&lt;Esc&gt;</code>返回命令模式.</p>
<h3 id="使用可视化替换模式">使用可视化替换模式</h3><p>一些字符会给替换模式带来麻烦,例如<code>&lt;Tab&gt;</code>产生的缩进.如果要替换,需要输入很多字符(根据你对tab的设置),这时候,使用<code>gR</code>命令是更好的选择.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim实践Tips(三)]]></title>
      <url>http://yoursite.com/2016/07/21/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/Vim%E5%AE%9E%E8%B7%B5Tips-%E4%B8%89/</url>
      <content type="html"><![CDATA[<h2 id="Tip_10_使用计数做一些简单的计算">Tip 10 使用计数做一些简单的计算</h2><p>大多数命令模式下的指令能够和计数搭配使用.我们可以利用这个特性做一些简单的运算.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> character is <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;C-a&gt;</code> 增加计数 (Ctrl+a)<br><code>&lt;C-x&gt;</code> 减少计数 (Ctrl+x)<br>他们可以可数字搭配使用,例如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> character is <span class="number">16</span> <span class="string">" 10&lt;C-a&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个<c-a> 如果是在数字字符上,那么就会给他增加数字.如果没有在数字上,那么它会在这行中查找数字,并且跳转到数字上.如果没有那么就不会做任何操作.</c-a></p>
<p>例如下面有一段 css 代码:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">.blog</span>, <span class="variable">.news</span> &#123; background-image: url(/sprite<span class="variable">.png</span>); &#125;</span><br><span class="line"><span class="variable">.blog</span> &#123; background-position: <span class="number">0</span>px <span class="number">0</span>px &#125;</span><br></pre></td></tr></table></figure></p>
<p>我们要复制最后一行,然后做一些改变:</p>
<ol>
<li>把单词 <code>blog</code> 换成 <code>news</code></li>
<li>把 <code>0px</code> 换成 <code>-180px</code></li>
</ol>
<p>实现1,可以使用 <code>yyp</code> 然后使用 <code>cw</code> 修改单词.<br>那么2怎么实现呢?</p>
<p>第一种方式是: <code>f0</code>, 然后 <code>i</code> 进入插入模式,输入<code>-18</code>,然后<code>&lt;Esc&gt;</code><br>但是我们的光标不在数字上,那么需要额外的跳转.而 <code>&lt;C-x&gt;</code> 可以自动给我们找到数字.<br>所以,直接 <code>180&lt;C-x&gt;</code> 更快</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">.blog</span> &#123; background-position: -<span class="number">180</span>px <span class="number">0</span>px &#125; <span class="string">"180&lt;C-x&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Tip_11_如果可以重复,就别计数">Tip 11 如果可以重复,就别计数</h2><p>我们可以通过提供个数字来减少完成特定任务所需要的按键.但是这不代表我们就该这么做.还是应该思考下到底该重复还是该计数.</p>
<p>假设我们有下面的文字:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Delete more than one word</span><br></pre></td></tr></table></figure>
<p><code>d2w</code>  和 <code>2dw</code> 都能完成任务.</p>
<ul>
<li><code>d2w</code> 是<code>d</code>, 然后加上<code>2w</code> 的 <code>motion</code> ,理解为: 删除两个单词</li>
<li><code>2dw</code>是2次执行 <code>dw</code> ,理解为: 删除一个单词,执行两次</li>
</ul>
<p>现在让我们想想一个替换方案: <code>dw.</code> 删除一个单词,然后重复之.</p>
<h3 id="讨论几种方式-">讨论几种方式.</h3><p>其实<code>d2w</code>和<code>2dw</code> 没有区别,如果执行之后,按 <code>u</code> ,都会恢复两个单词.如果按<code>dot</code>,将重复删除后两个单词.<br>如果我们要删除下一个单词(总共三个)那我们就需要先<code>u</code>(恢复两个单词),然后<code>d3w</code>.这还是比较麻烦的.<br><code>dw.</code> 按<code>u</code>,会恢复一个单词,如果删除下个单词,只需要重新按<code>dot</code>即可.<br>在这种情况下,重复的优势更明显.</p>
<p>如果我要删除6个单词呢? 我可以 <code>d6w</code> 或者<code>6dw</code>.或者 <code>dw.....</code> ,当然,前者有更少的按键.但是有个问题在这:我们需要数一下单词的数量,而且如果错误了,<code>u</code>会恢复<code>6</code>个单词.而<code>dw.....</code>如果出现错误,<code>u</code>一下,只是恢复一个单词.我们可以更好的控制这个过程.</p>
<p>记住我们的”咒语”: 操作,重复,撤销. </p>
<h3 id="必要时使用计数">必要时使用计数</h3><p>下面的文字,如果我要把 <code>a couple of</code> 换成 <code>some more.</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a couple of questions.</span><br><span class="line">I have some more questions. <span class="string">"按键依次是 c3wsome more</span></span><br></pre></td></tr></table></figure></p>
<p>在这个场景下,使用dot命令没有什么意义.即使重复了,最后还要按<code>i</code>进入插入模式.这样太笨拙了,所以我还是愿意使用计数.</p>
<p>计数还有个好处,就是能够有个条理清楚的恢复操作.比如我<code>d3w</code>,<code>u</code>就会恢复3个单词</p>
<h1 id="Tip_12_征服结合命令">Tip 12 征服结合命令</h1><p>Vim的强大源于操作符和移动命令的结合.</p>
<h3 id="操作符+移动=操作">操作符+移动=操作</h3><p><code>d{motion}</code> 可以使用<code>dl</code>删除一个字符,<code>daw</code>删除整个单词,<code>dap</code>删除整段.<br><code>c{motion}</code> 和 <code>y{motion}</code>和上面类似</p>
<p>操作符和移动的结合,可以认为是一种语法.第一条规则很简单:一个动作由一个操作符和一个移动组成.学习新的操作符就像学习Vim的词汇表.只要我们遵循简单的语法,随着词汇量增加,我们就能表达更多想法.</p>
<p>假设我们已经知道了通过 daw 删除一整个单词.然后,我们学到了 <code>gU</code>,这也是一个操作符.所以,我们就能通过gUaw把当前单词转换成大写.</p>
<p>再假设我们知道了<code>ap</code>(一整段motion},然后我们就能合成新的操作:<br><code>dap</code> 删除一整段 <code>gUap</code> 让一整段大写.</p>
<p><code>Vim</code>  的语法还有个规则:如果一个操作符被重复输入,那么<code>motion</code>就等于当前行.例如:<br>-<code>dd</code>   删除当前行<br>-<code>&gt;&gt;</code>  缩进当前行<br>-<code>gUgU</code> 或者 <code>gUU</code> 大写当前行 g是后面操作符的一个前缀</p>
<p>Vim的操作符命令</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">操作符        效果</span><br><span class="line">c             Change 改变</span><br><span class="line">d             Delete 删除</span><br><span class="line">y             Yank into <span class="keyword">register</span> 复制到寄存器</span><br><span class="line">g~            Swap <span class="keyword">case</span> 切换大小写</span><br><span class="line">gu            make lowercase 小写</span><br><span class="line">gU            make upppercase 大写</span><br><span class="line">&gt;             shift right 右移</span><br><span class="line">&lt;             shift left 左移</span><br><span class="line">=             autoindent 自动缩进</span><br><span class="line">!             Filter &#123;motion&#125; lines through an external program</span><br></pre></td></tr></table></figure>
<h3 id="拓展Vim整合的力量">拓展Vim整合的力量</h3><p>Vim标准的操作符相对来说比较少,但是我们可以定义新的.</p>
<h3 id="使用现有的操作符自定义移动">使用现有的操作符自定义移动</h3><p>Vim标准的移动命令已经很全面,但是我们还可以增加新的移动和文本对象.</p>
<h3 id="待决模式">待决模式</h3><p>除了明显的插入,命令和底行模式.Vim还有些容易被忽略的模式.待决模式( Operator-Pending mode )就是其中的一个.我们每天都大量使用它,但是每次都持续一小段时间.例如<code>dw</code>,这个模式仅仅持续了你按下<code>d</code>到按下<code>w</code>这中间的这个时间.</p>
<p>如果我们把Vim看做是一个有限状态机.那么待决模式就是仅接受移动命令的状态.当一个操作符被触发的时候,这个状态被激活,在输入移动命令之前,Vim不会做任何操作.当待决模式被激活后,我们可以通过<esc>就可以中断,返回命令模式.</esc></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim实践Tips(二)]]></title>
      <url>http://yoursite.com/2016/07/19/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/Vim%E5%AE%9E%E8%B7%B5Tips(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h2 id="Tip_5_手动查找和替换">Tip 5 手动查找和替换</h2><p>下面每一行中都有 <code>content</code> 这个单词</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...We're waiting for content before the site can go live...</span><br><span class="line"></span><br><span class="line">...If you are content with this, let's go ahead with it...</span><br><span class="line"></span><br><span class="line">...We'll launch as soon as we have the content...</span><br></pre></td></tr></table></figure>
<p>如果我们想把所有的 <code>content</code> 替换成 <code>copy</code>, 那么可以很简单的想到替换命令.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">:%s/content/<span class="keyword">copy</span>/g</span><br></pre></td></tr></table></figure>
<p> 但是有时候我们并不想全局替换掉.</p>
<h3 id="懒惰点:不做输入的查找">懒惰点:不做输入的查找</h3><p> 你也许已经猜到<code>.</code>是我最喜欢的单键<code>Vim</code>命令.第二喜欢的是 <code>*</code>,它可以搜索处于光标下面的单词.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...We're waiting for copy before the site can go live...</span><br><span class="line"></span><br><span class="line">...If you are copy with this, let's go ahead with it...</span><br><span class="line"></span><br><span class="line">...We'll launch as soon as we have the content...</span><br></pre></td></tr></table></figure>
<p> 首先将光标置于 <code>content</code> 上面,然后用<code>*</code>命令去查找它,这时候将发生两个事情:</p>
<ol>
<li><p>光标将跳转到下个匹配处(即下个 <code>content</code> 单词) </p>
</li>
<li><p>所有出现匹配项的地方将高亮显示 (如果没有,使用 <code>:set hls</code> .</p>
</li>
</ol>
<p>上面两件事情发生之后,我们就可以使用 <code>n</code> 命令跳转到下一个.这时候,使用 <code>*nn</code> 可以循环所有匹配,然后光标转到我们开始进行搜索的地方</p>
<h3 id="让更改变得可重复">让更改变得可重复</h3><p>当我们的光标置于 <code>content</code> 的开始位置的时候,我们准备去更改它.这包含两个步骤:</p>
<ol>
<li><p>删除单词 <code>content</code> </p>
</li>
<li><p>输入修改的内容. <code>cw</code> 删除到单词结尾命令,并且进入插入模式.</p>
</li>
</ol>
<p>然后我们输入 <code>copy</code> 这个单词. Vim 将记录我们的键盘点击,直到我们离开插入模式,所以, <code>cwcopy&lt;Esc&gt;</code> 将会被记录为一个单个命令.通过使用<code>.</code>就可以重复上面的操作.</p>
<h2 id="Tip6_Dot公式">Tip6 Dot公式</h2><p>在 Tip2中,我们试着将每个句子后面加<code>;</code> 最后,我们通过 <code>j.</code> 进行重复操作.</p>
<p>在 Tip3中,我们将每个<code>+</code>前后添加空格.  最后,我们通过 <code>;.</code> 进行重复操作</p>
<p>在 Tip5中,我们将 <code>content</code> 替换成 <code>copy</code>,最后,我们通过 <code>n.</code> 进行重复操作.</p>
<h3 id="理想的状态:_一个按键负责移动,一个按键负责执行操作-">理想的状态: 一个按键负责移动,一个按键负责执行操作.</h3><p> 在上面所有的操作中 . 重复最后的更改.这不是他们全部的共同点,我们都还用了一个键去移动光标.这已经是一个不能再好的情况了.我们在将来的编辑中,可以反复看到这个编辑模式.为了方便,我们把这个模式成为 Dot公式 (Dot Formula)</p>
<h2 id="Tip7_拿开你的笔刷">Tip7 拿开你的笔刷</h2><p><code>Normal Mode</code> (命令模式) 可以类比为一个画家,把笔刷离开画布.这时候,他可以休息,可以构思.同理,程序员也可以在 <code>Normal Mode</code> 中进行思考,组织自己的思路.当我们要改变的时候,也不用非得进入插入模式.在 <code>Normal Mode</code>中,我们可以格式化我们的代码,复制,或者移动他们.</p>
<h2 id="Tip8_强化你的撤销">Tip8 强化你的撤销</h2><p>在其他编辑器中,通过在输入一些东西之后进行撤销,可以撤销我们最后输入的单词或者字符.然后在 Vim 中,我们设置可以调整撤销命令的粒度.</p>
<p><code>u</code> 这个命令可以触发撤销命令.它可以撤销包括Normal,Visual还有 Command-Line 模式的更改.当然,也包括在插入模式下的文本输入或者删除.所以我们可以说: <code>i{ 插入一些更改}&lt; Esc&gt;</code>  构成了一个改变. 然后一次<code>u</code> 就可以撤销这个改变.</p>
<p>另外,插入模式中,如果使用了上下左右箭头,那么就相当于在 NormalMode下使用了 <code>hjkl</code>.区别就是我们不用离开插入模式,但是这些操作,会被记录到点公式 (Dot Fomula)中.</p>
<h2 id="Tip9_创建可重复的改变">Tip9 创建可重复的改变</h2><p>vim将重复操作进行了优化,为了利用这个特性.我们需要留心怎么创建可重复的改变</p>
<p>在 Vim 中,做一件事通常有很多方式.但是衡量”好”的方式的机制就是:更少的键盘敲击.</p>
<p>假设我们的光标在 <code>h</code> 这个字母上,我们想要删除单词 <code>nigh</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The end is nigh</span><br></pre></td></tr></table></figure>
<h3 id="1-_向后删除">1. 向后删除</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The end is nigh "开始</span><br><span class="line"></span><br><span class="line">The end is h "db  从光标位置删除单词的前面部分</span><br><span class="line"></span><br><span class="line">The end is  "x 删除当前光标的字符</span><br></pre></td></tr></table></figure>
<h3 id="2-_向前删除">2. 向前删除</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The end is nigh   "开始</span><br><span class="line"></span><br><span class="line">The end is nigh   "b  向后移动光标一个单词</span><br><span class="line"></span><br><span class="line">The end is        "dw 向前删除一个单词</span><br></pre></td></tr></table></figure>
<h3 id="3-_删除整个单词">3. 删除整个单词</h3><p>上面两个解决方案都牵涉到了一些准备工作,例如移动.其实,利用<code>aw</code> 命令可以更精准高效的完成我们的需求</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The end ais nigh   "开始</span><br><span class="line"></span><br><span class="line">The end is "daw</span><br></pre></td></tr></table></figure>
<h3 id="4-_哪一个是最可重复的">4. 哪一个是最可重复的</h3><p>上面我们使用了三种方式进行删除一个单词.每种方式中,我们都是按了三个键,那么那种方式是更好的呢?</p>
<p>记住, Vim 优化了重复.那么检验好坏的标准就是重复.下面使用dot 命令来检验三种方式,通过测试发现:</p>
<ul>
<li><p>第一种方式: <code>.</code> 等价于 <code>x</code> (<code>db</code> 是改变操作. <code>x</code> 也是改变操作)</p>
</li>
<li><p>第二种方式: <code>.</code> 等价于 <code>dw</code> (<code>b</code> 是纯移动, <code>dw</code> 是改变操作)</p>
</li>
<li><p>第三种方式: <code>.</code> 等价于 <code>daw</code> (<code>daw</code>是改变操作)</p>
</li>
</ul>
<p>看起来<code>2</code> <code>3</code> 都是挺有用的,但是有个细节 <code>2</code>删除一个单词,但是不会删除对应的空格,表象上来看就是不会移动光标到下个单词上,那么这时候, <code>.</code>这个命令就没什么意义. <code>3</code> 会把要删除的单词附带空格删除,同时光标停留在 <code>is</code> 的结尾.那么<code>.</code>这个操作就能继续删除一个单词. (我强烈建议自己动手试试看)</p>
<p>﻿</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim实践Tips(一)]]></title>
      <url>http://yoursite.com/2016/07/18/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/Vim%E5%AE%9E%E8%B7%B5Tips(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h1 id="Tip_1_dot_命令">Tip 1 dot 命令</h1><p>说明: . dot 重复上个命令的使用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">line one</span><br><span class="line"></span><br><span class="line">line two</span><br><span class="line"></span><br><span class="line">line three </span><br><span class="line"></span><br><span class="line">line four</span><br></pre></td></tr></table></figure>
<p><code>x</code> :删除当前光标下的字符</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> one " x . . .  x 删除, . 重复</span><br><span class="line"></span><br><span class="line">line two</span><br><span class="line"></span><br><span class="line">line three </span><br><span class="line"></span><br><span class="line">line four</span><br></pre></td></tr></table></figure>
<p>如图:<br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/1xdotdot.gif" alt="dot 命令的使用"></p>
<h2 id="几个小提示:">几个小提示:</h2><h3 id=":set_nu_显示行号_:set_nonu_关闭行号显示">:set nu 显示行号 :set nonu 关闭行号显示</h3><p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/2setnu.gif" alt="显示和关闭行号"></p>
<h3 id=":3,5_co_8_将9到12行的内容输出到8行">:3,5 co 8 将9到12行的内容输出到8行</h3><p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/003line_copy.gif" alt="输出范围到领一行"></p>
<h3 id=":3,5_de_删除3到5行的内容">:3,5 de 删除3到5行的内容</h3><p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/004delete.gif" alt="删除范围"></p>
<p><code>&gt;G</code> 增加从当前行到文件末尾所有行的缩进.同理,使用 . 可以重复增加缩进</p>
<p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/005_intent.gif" alt="重复缩进"></p>
<p>还可以利用 j. 做成下面的布局</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">line one</span><br><span class="line"></span><br><span class="line">	line two</span><br><span class="line"></span><br><span class="line">		line three </span><br><span class="line"></span><br><span class="line">			line four</span><br></pre></td></tr></table></figure>
<p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/007_jdot.gif" alt="梯形缩进"></p>
<h1 id="Tip_2_不要重复">Tip 2 不要重复</h1><p>例如,我们想要在下面所有的行后面加一个分号</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = 1</span><br><span class="line"></span><br><span class="line">var bar = 'bar'</span><br><span class="line"></span><br><span class="line">var foobar = foo + bar</span><br></pre></td></tr></table></figure>
<p>使用 <code>$</code> 移动到行末尾,<code>a</code>追加然后输入<code>;</code> ,然后按<code>&lt;Esc&gt;</code>返回命令模式.这算完成了第一行</p>
<p>如果对下面两行也应用这个,就应该: <code>j$.</code> </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = 1;</span><br><span class="line"></span><br><span class="line">var bar = 'bar'; "j$.</span><br><span class="line"></span><br><span class="line">var foobar = foo + bar; "j$.</span><br></pre></td></tr></table></figure>
<p>虽然这样也能完成,但是还是差点意思.还是有提升空间的.</p>
<h3 id="减少无关的移动">减少无关的移动</h3><p><code>a</code> 是在当前光标位置后面追加,并自动切换到插入模式</p>
<p><code>A</code> 是在当前行末进行追加,并自动切换到插入模式 相当于 <code>$a</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = 1;	" A;&lt;Esc&gt;</span><br><span class="line"></span><br><span class="line">var bar = 'bar'; " j.</span><br><span class="line"></span><br><span class="line">var foobar = foo + bar; " j.</span><br></pre></td></tr></table></figure>
<p><code>d</code> 删除，不能单独用，得跟后续操作符，比如 <code>dd</code> 是删除一整行，<code>d$</code> 是删除直到行的末尾</p>
<p><code>x</code> 删除当前光标下的单个字符</p>
<p><code>c</code> 跟 <code>d</code> 类次，但是删除完成后会进入插入模式</p>
<p><code>c</code> 和 <code>d</code> 都要加入<code>motion</code> <code>motion</code>类似是 <code>w</code> <code>b</code> 等这些</p>
<p><code>23,35 co 66</code> 复制</p>
<p><code>23,35 m 66</code> 剪切</p>
<p><code>23,35 de</code> 删除</p>
<p>几个一个顶俩的快捷键</p>
<p><code>C c$</code> 删除到行末尾,并进入插入模式</p>
<p><code>s cl</code> 替换当前字符: c加motion,l 一个字符</p>
<p><code>S ^C</code> 删除整个行 ^移动到行首,C删除整行</p>
<p><code>I ^i</code> 到行首进行插入</p>
<p><code>A $a</code> 到行尾进行插入</p>
<p><code>o A&lt;CR&gt;</code> 进入下一行,并进入插入模式 <cr>是回车的意思</cr></p>
<p><code>O ko</code> 进入上一行,然后插入</p>
<h2 id="Tip_3_退一步,进三步">Tip 3 退一步,进三步</h2><figure class="highlight"><figcaption><span>foo = "method("+argument1+","+argument2+")";```objc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#19978;&#38754;&#30340;&#20195;&#30721;&#30475;&#30528;&#19981;&#22826;&#33298;&#26381;,&#22240;&#20026;&#22312;&#25105;&#20204;&#21360;&#35937;&#20013;,&#21152;&#21495;&#20004;&#36793;&#24212;&#35813;&#26377;&#31354;&#26684;.&#37027;&#20040;&#25105;&#20204;&#26469;&#30475;&#24590;&#20040;&#20197;Vim&#30340;&#26041;&#24335;&#23436;&#25104;&#36825;&#20010;&#20219;&#21153;:&#10;&#10;`f+` &#26597;&#25214;&#26368;&#36817;&#30340;`+` , `s` &#26367;&#25442;`+` &#20026; `&#31354;&#26684;+&#31354;&#26684;`&#10;&#10;```var foo = &#34;method(&#34; + argument1+&#34;,&#34;+argument2+&#34;)&#34;;</span><br></pre></td></tr></table></figure>
<p>对于后面的,我们当然可以使用 <code>f+</code> 然后 <code>.</code> 重复替换,完成任务.</p>
<p>但是这里有个新的操作符 <code>;</code> 这个 <code>;</code> 可以重复执行最近的查找操作.<code>f+</code>就是一个查找操作.所以,对于后面的<code>+</code> ,我们可以通过 <code>;.</code> 依次完成替换.</p>
<h2 id="Tip4_操作,重复,撤销">Tip4 操作,重复,撤销</h2><p>通过以上的几个tip,我们学会了,先操作,然后另其重复执行,借此完成一些重复任务.</p>
<p>但是有时候,我们可能在反复的重复操作中,按多了.例如 tip2 中的 j.j.j. 很可能顺序按错了. 如果出现错误,那么我们就可以在出错的时候按 u 来撤销操作.又或者,Tip3中的;按多了(意味着移动的太过了)那么可以使用,来跳回去.</p>
<p>通过以上的描述,能看出来,不同的误操作,对应着不同的撤销方式.下面是个参考表</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">意图				操作				重复		撤销</span><br><span class="line"></span><br><span class="line">改变点东西			&#123;edit&#125;			.		u</span><br><span class="line"></span><br><span class="line">行内查找下个字符	f&#123;<span class="keyword">char</span>&#125;/t&#123;<span class="keyword">char</span>&#125;		;		,</span><br><span class="line"></span><br><span class="line">行内查找前一个字符	F&#123;<span class="keyword">char</span>&#125;/T&#123;<span class="keyword">char</span>&#125;		;		,</span><br><span class="line"></span><br><span class="line">在文档内查找下个匹配	/pattern&lt;CR&gt; 		n		N</span><br><span class="line"></span><br><span class="line">在文档内查找前个匹配	?pattern&lt;CR&gt;		n		N</span><br><span class="line"></span><br><span class="line">执行替换		:s/target/replacement	&amp;		u</span><br><span class="line"></span><br><span class="line">执行一系列改变		qx&#123;changes&#125;q		@x		  u</span><br></pre></td></tr></table></figure>
<p><code>f</code> 和 <code>t</code> 的区别是 <code>f</code> 停留光标在查找字符,<code>t</code>光标停留在查找字符之前</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[视频裁剪]]></title>
      <url>http://yoursite.com/2016/07/14/%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3/%E8%A7%86%E9%A2%91%E8%A3%81%E5%89%AA/</url>
      <content type="html"><![CDATA[<h3 id="AVAsset">AVAsset</h3><p>AVAsset是一个表现音视频媒体的抽象类.AVAsset对象给我们开发提供了媒体文件的访问接口.<br>这个 AVAsset 可以通过文件创建,也可以是来自用户相册目录的.如果获得了一个视频文件的 AVAsset,我们就可以从中获取静态图片,转换格式,或者是裁剪内容.</p>
<p>通过以下代码,获得特定位置的视频文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString * videoPath = @&#34;a video file path&#34;;&#10;AVAsset *anAsset = [[AVURLAsset alloc] initWithURL:[NSURL fileURLWithPath:videoPath] options:nil];&#10;```objc&#10;&#20854;&#20013; options &#26159;&#19968;&#20010;&#23383;&#20856;,&#36825;&#20010;&#23383;&#20856;&#21482;&#26377;&#19968;&#20010; key-value:&#10;`AVURLAssetPreferPreciseDurationAndTimingKey` value &#26159; `YES` &#25110;&#32773; `NO`nil &#21644; &#20256;&#36882; NO, &#20004;&#32773;&#31561;&#25928;.&#10;&#29305;&#21035;&#30340;,&#24403;&#36827;&#34892;&#35270;&#39057;&#21512;&#25104;&#25805;&#20316;&#30340;&#26102;&#20505;,&#38656;&#35201;&#35774;&#32622;&#36825;&#20010;&#23383;&#20856;,&#24182;&#23558; value &#35774;&#32622;&#20026; `YES`,&#22240;&#20026;&#22914;&#26524;&#31934;&#24230;&#19981;&#22815;,&#21487;&#33021;&#36896;&#25104;&#38899;&#35270;&#39057;&#19981;&#21516;&#27493;&#31561;&#38382;&#39064;.&#10;&#10;### AVAssetExportSession&#10;&#10;AVAssetExportSession &#26159;&#19968;&#20010;&#25511;&#21046; Asset &#24322;&#27493;&#23548;&#20986;&#30340;&#23545;&#35937;.&#21487;&#20197;&#23454;&#29616;&#35009;&#21098;&#35270;&#39057;,&#36716;&#25442;&#26684;&#24335;&#31561;&#38656;&#27714;. &#20195;&#30721;&#22914;&#19979;:</span><br></pre></td></tr></table></figure>
<p>  exportSession_ = [[AVAssetExportSession alloc]<br>                              initWithAsset:anAsset presetName:AVAssetExportPreset960x540]<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这个`presetName` 是系统提供的预设,有一些常用的视频分辨率和视频质量控制的选项.可以按住`command`自行查看.另外.如果预设的分辨率不能满足需求,我们还可以自定义任意分辨率,这个将在我以后的文章中进行说明.</span><br><span class="line"></span><br><span class="line">然后就是配置`<span class="built_in">AVAssetExportSession</span>`,下面分别配置了`导出路径`,`导出文件格式`,`截取范围`:</span><br></pre></td></tr></table></figure></p>
<p>exportSession<em>.outputURL = tempVideoURL;<br>exportSession</em>.outputFileType = AVFileTypeMPEG4;<br>exportSession_.timeRange = [self videoTimeRange:anAsset];<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要说明的是这个截取范围的实现:</span><br></pre></td></tr></table></figure></p>
<p>-(CMTimeRange)videoTimeRange:(AVAsset*)anAsset{<br>    CMTime start = CMTimeMakeWithSeconds(self.videoRange.startTime, anAsset.duration.timescale);<br>    CMTime duration = CMTimeMakeWithSeconds(self.videoRange.duration, anAsset.duration.timescale);<br>    CMTimeRange range = CMTimeRangeMake(start, duration);<br>    return range;<br>}<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`CMTime` 是一个结构体对象,常用的两个值是: `value` 和 `timescale`. 两者的关系可以表示为: `value/timescale=seconds`.</span><br><span class="line"></span><br><span class="line">在上面的方法中,我将来自滑块的值(秒为单位),转换成了`CMTime`然后构造了一个` CMTimeRange` 对象.</span><br><span class="line"></span><br><span class="line">最后进行导出:</span><br></pre></td></tr></table></figure></p>
<p> [exportSession<em> exportAsynchronouslyWithCompletionHandler:^{<br>                    switch (exportSession</em>.status) {<br>                    case AVAssetExportSessionStatusUnknown: {</p>
<pre><code>            <span class="keyword">break</span>;
        }
        <span class="keyword">case</span> <span class="string">AVAssetExportSessionStatusWaiting:</span> {

            <span class="keyword">break</span>;
        }
        <span class="keyword">case</span> <span class="string">AVAssetExportSessionStatusExporting:</span> {

            <span class="keyword">break</span>;
        }
        <span class="keyword">case</span> <span class="string">AVAssetExportSessionStatusCompleted:</span> {

            <span class="keyword">break</span>;
        }
        <span class="keyword">case</span> <span class="string">AVAssetExportSessionStatusFailed:</span> {

            <span class="keyword">break</span>;
        }
        <span class="keyword">case</span> <span class="string">AVAssetExportSessionStatusCancelled:</span> {

            <span class="keyword">break</span>;
        }
    }
}];
</code></pre><p>```objc</p>
<p>可以对各种状态进行判断.进而采取不同的操作.通常关心的是<code>Failed</code> 和<code>Completed</code> ,前者给用户提示,后者进行后续操作.</p>
<p>到此,就完成了一段视频的裁剪操作.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个React Native项目-一些注意点]]></title>
      <url>http://yoursite.com/2016/07/02/React%20Native/%E4%B8%80%E4%B8%AAReact%20Native%E9%A1%B9%E7%9B%AE-%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="对http网络请求的支持">对http网络请求的支持</h2><p>由于在iOS9开始,Apple强制了https的请求.但是如果服务器还不支持,那么应该在plist中添加以下字段:<br><img src="http://7xv9rf.com1.z0.glb.clouddn.com/29000QQ20160901-2.png" alt="29000QQ20160901-2.png"></p>
<p>这步要注意,ReactNative并没有聪明替你配置好这个<code>iOS的环境</code>,我是在各种网络请求都异常后,才发现的这个问题.</p>
<h2 id="提取文件">提取文件</h2><p>因为要同时支持iOS和Android, 那么我们就不应该将布局代码写到<code>index.android.js</code>或者<code>index.ios.js</code>中,当然也不应该写好一个,然后copy到另一个,无论怎么说,如果分散,我们将面临维护多份代码的窘境.所以好的方式是,将实现提取出来,在<code>index.android.js</code>和<code>index.ios.js</code>中,只保持对接口文件的引用.类似下面:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class G<span class="built_in">UIShopping</span> extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Main/&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Android的启动页面">Android的启动页面</h2><p>Android本身没有像iOS那么方便的配置启动页的方式,原生的方式是通过<code>Activity</code>来制造假象,同理,利用<code>ReactNative</code>还是要做这个处理.<br>代码如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class GUIShopping extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Navigator</span><br><span class="line">            initialRoute=&#123;&#123;name:'启动页',component:LaunchImage&#125;&#125;</span><br><span class="line">            configureScene=&#123;()=&gt;&#123; return Navigator.SceneConfigs.PushFromRight; &#125;&#125;</span><br><span class="line">            renderScene=&#123;(route,navigator)=&gt;&#123;</span><br><span class="line">                            let Component = route.component;</span><br><span class="line">                            return &lt;Component &#123;...route.passProps&#125; navigator=&#123;navigator&#125;/&gt;</span><br><span class="line">                        &#125;&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而LaunchImage就是一个普通的Component,里面有个定时器,在规定时间内切换到主页,看起来效果和iOS是一样的,主要代码如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class LaunchImage extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">                &lt;Image source = &#123;&#123;uri:'launchimage'&#125;&#125; style=&#123;styles.launchImage&#125;/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            //页面的切换</span><br><span class="line">            this.props.navigator.replace(&#123;</span><br><span class="line">                component:Main,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,2000);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ListView横向排版的实现">ListView横向排版的实现</h2><p>默认的<code>ListView</code>是和<code>iOS</code>的<code>TableView</code>类似的,也就是上下滑动,如果想要实现类似<code>CollectionView</code>的布局效果,那么需要做一些配置:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView</span><br><span class="line">              dataSource=&#123;this.state.dataSource&#125;</span><br><span class="line">              renderRow=&#123;this.renderRow&#125;</span><br><span class="line">              contentContainerStyle=&#123;styles.contentView&#125;</span><br><span class="line">              scrollEnabled=&#123;false&#125;</span><br><span class="line">          &gt;</span><br><span class="line"></span><br><span class="line">          &lt;/ListView&gt;</span><br></pre></td></tr></table></figure>
<p>contentView的实现如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contentView:&#123;</span><br><span class="line">       flexDirection:'row',</span><br><span class="line">       flexWrap:'wrap',</span><br><span class="line">       width:width,</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>
<p> 要点:</p>
<ol>
<li>要指定<code>ListView</code>的宽度</li>
<li><p>cell应该具备宽高(特别坑)</p>
<p>其中第二条没有发现有资料提及,但是自己编码的时候发现,只有设置好cell的宽度和高度,才能实现预想的效果.<br>最终效果如下:</p>
<p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/93550QQ20160901-3.png" alt="93550QQ20160901-3.png"></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个React Native项目-项目介绍]]></title>
      <url>http://yoursite.com/2016/07/01/React%20Native/%E4%B8%80%E4%B8%AAReact-Native%E9%A1%B9%E7%9B%AE-%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>从<code>ReactNative</code>诞生的那天开始,就对它非常关注.一方面是欢喜可以有个靠谱的方案来实现跨平台开发了,另一方面也是担心它虎头蛇尾.好在,到现在看来,它势头还是很猛的.</p>
<p>现在接触<code>ReactNative</code>也有一定时间了,知识比较零散,所以想借助一个练手项目来串一下知识,粗略的模仿了美团的客户端.</p>
<p>项目使用<code>ES6语法</code> ,最终效果如下:</p>
<p><img src="http://7xv9rf.com1.z0.glb.clouddn.com/32248shopping.gif" alt="32248shopping.gif"></p>
<h2 id="代码">代码</h2><p>代码已经开源到 <a href="https://github.com/guiqingblog/GUIShopping" target="_blank" rel="external">github</a></p>
<h2 id="说明">说明</h2><p>因为代码已经上传,所以就不在赘述,主要分开说说一些注意点.这些我将分文章阐述.</p>
<h2 id="一些资料">一些资料</h2><p><a href="http://reactnative.cn/" target="_blank" rel="external">Reat Native中文官网</a> 这上面关于环境配置和基础控件的使用都非常全面,是必不可少的参考资料.</p>
<p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">Flexbox</a> ReactNative中大量使用了Flexbox进行布局,所以这方面的知识必不可少</p>
<p><a href="http://www.oschina.net/news/61214/11-react-native-ui-components" target="_blank" rel="external">11款ReactNative开源组件</a> 研究别人的代码是一种非常好的提升方式</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RACObserve 和 rac_textSignal 的搭配使用]]></title>
      <url>http://yoursite.com/2016/06/18/ReactiveCocoa/RACObserve-%E5%92%8C-rac-textSignal-%E7%9A%84%E6%90%AD%E9%85%8D%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>项目中有个小需求,文本框与按钮绑定.当文本框内容符合规则的时候,按钮才会可用.把判定条件修改一下,代码如下:</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> RAC(<span class="keyword">self</span><span class="variable">.loginButton</span>,enabled)  = [<span class="keyword">self</span><span class="variable">.textFiled</span><span class="variable">.rac_textSignal</span>  map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *value) &#123;</span><br><span class="line">    <span class="keyword">return</span> @(value<span class="variable">.length</span>&gt;<span class="number">3</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>但是如果在发送请求之后,通过代码清除了文本框的内容,按钮并不会改变状态. </p>
<p> 想到了, 应该是这个 <code>rac_textSignal</code> 出现问题了.<br> 看一下它的实现:<br> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> - (RACSignal *)rac_textSignal &#123;</span><br><span class="line">	@weakify(<span class="keyword">self</span>);</span><br><span class="line">	<span class="keyword">return</span> [[[[[RACSignal</span><br><span class="line">		defer:^&#123;</span><br><span class="line">			@strongify(<span class="keyword">self</span>);</span><br><span class="line">			<span class="keyword">return</span> [RACSignal <span class="keyword">return</span>:<span class="keyword">self</span>];</span><br><span class="line">		&#125;]</span><br><span class="line">		concat:[<span class="keyword">self</span> rac_signalForControlEvents:<span class="built_in">UIControlEventAllEditingEvents</span>]]</span><br><span class="line">		map:^(<span class="built_in">UITextField</span> *x) &#123;</span><br><span class="line">			<span class="keyword">return</span> x<span class="variable">.text</span>;</span><br><span class="line">		&#125;]</span><br><span class="line">		takeUntil:<span class="keyword">self</span><span class="variable">.rac_willDeallocSignal</span>]</span><br><span class="line">		setNameWithFormat:<span class="string">@"%@ -rac_textSignal"</span>, <span class="keyword">self</span><span class="variable">.rac_description</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>几个关键词的解释:<br><code>defer</code> : 将代码的创建推迟到信号被订阅<br><code>concat</code>: 连接信号,第一个信号必须发送完成，第二个信号才会被激活<br><code>map</code> : 映射,将信号内容转换<br><code>takeUtil</code> :  signalA takeUntil:signalB 当signalB激活之后,停止signalA 的订阅</p>
<p>其实主要的是, 这个 <code>signal</code> 是监听的: <code>UIControlEventAllEditingEvents</code> . 那么也就是说对<code>setter</code> 方式不会触发信号 </p>
<p><code>RACObserve</code> 是一个常用的宏,我们都知道是监听属性值改变的.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#define RACObserve(TARGET, KEYPATH) \</span></span><br><span class="line">	(&#123; \</span><br><span class="line">		_Pragma(<span class="string">"clang diagnostic push"</span>) \</span><br><span class="line">		_Pragma(<span class="string">"clang diagnostic ignored \"-Wreceiver-is-weak\""</span>) \</span><br><span class="line">		__<span class="keyword">weak</span> <span class="keyword">id</span> target_ = (TARGET); \</span><br><span class="line">		[target_ rac_valuesForKeyPath:@keypath(TARGET, KEYPATH) observer:<span class="keyword">self</span>]; \</span><br><span class="line">		_Pragma(<span class="string">"clang diagnostic pop"</span>) \</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<p>主要代码是:<code>[target_ rac_valuesForKeyPath:@keypath(TARGET, KEYPATH) observer:self];</code><br>然后这个<code>rac_valuesForKeyPath</code>的实现如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (RACSignal *)rac_valuesForKeyPath:(<span class="built_in">NSString</span> *)keyPath observer:(__<span class="keyword">weak</span> <span class="built_in">NSObject</span> *)observer &#123;</span><br><span class="line">	<span class="keyword">return</span> [[[<span class="keyword">self</span></span><br><span class="line">		rac_valuesAndChangesForKeyPath:keyPath options:<span class="built_in">NSKeyValueObservingOptionInitial</span> observer:observer]</span><br><span class="line">		map:^(RACTuple *value) &#123;</span><br><span class="line">			<span class="comment">// -map: because it doesn't require the block trampoline that -reduceEach: uses</span></span><br><span class="line">			<span class="keyword">return</span> value[<span class="number">0</span>];</span><br><span class="line">		&#125;]</span><br><span class="line">		setNameWithFormat:<span class="string">@"RACObserve(%@, %@)"</span>, <span class="keyword">self</span><span class="variable">.rac_description</span>, keyPath];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rac_valuesAndChangesForKeyPath:keyPath options:<span class="built_in">NSKeyValueObservingOptionInitial</span> observer:observer]</span><br></pre></td></tr></table></figure>
<p>也就是这个是通过 <code>KVO</code> 实现的. 而 <code>KVO</code> 得实现是通过临时生成一个子类,并重写父类的 <code>setter</code> 方法.这个在官方文档中有说明:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Key-Value Observing Implementation Details</span><br><span class="line"></span><br><span class="line">Automatic key-value observing is implemented using a technique called isa-swizzling. </span><br><span class="line">The isa pointer, as the name suggests, points to the object's class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data. </span><br><span class="line">When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance. </span><br><span class="line">You should never rely on the isa pointer to determine class membership. Instead, you should use the class method to determine the class of an object instance.</span><br></pre></td></tr></table></figure>
<h3 id="最终实现">最终实现</h3><p>了解了两者的实现,就可以很容易实现代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RAC(<span class="keyword">self</span><span class="variable">.loginButton</span>,enabled) =[ [RACObserve(<span class="keyword">self</span><span class="variable">.textFiled</span>, text)  merge:<span class="keyword">self</span><span class="variable">.textFiled</span><span class="variable">.rac_textSignal</span> ] map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *value) &#123;</span><br><span class="line">     <span class="keyword">return</span> @(value<span class="variable">.length</span>&gt;<span class="number">3</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift3 新特性 ]]></title>
      <url>http://yoursite.com/2016/06/15/Swift/Swift3-%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>看了一下刚出的 Session 406,简单记录一下关于 Swift3.0相比2.2的改动. 能力有限,若有谬误,欢迎指正 .</p>
<h3 id="简化的_API">简化的 API</h3><ul>
<li>优化将方法名切分,将操作中的动词提取,作为方法名.将其余部分作为参数名.</li>
<li>在不引起歧义的情况下,去掉了重复性的名词.</li>
</ul>
<p>Swift 2.2</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var array:Array = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">array<span class="variable">.appendContentsOf</span>([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">array<span class="variable">.insert</span>(<span class="number">1</span>, atIndex: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">var url = <span class="built_in">NSURL</span>(string: <span class="string">"randomLoacation"</span>)!</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> url<span class="variable">.fileURL</span> &#123;&#125;</span><br><span class="line">var x = url<span class="variable">.URLByAppendingPathComponent</span>(<span class="string">"file.txt"</span>)</span><br></pre></td></tr></table></figure>
<p>Swift 3.0</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Swift.Array</span></span><br><span class="line">var array:Array = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">array<span class="variable">.append</span>(contentsOf: [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">array<span class="variable">.insert</span>(<span class="number">1</span>, at: <span class="number">0</span>) <span class="comment">//index没有什么特定信息,只是重复</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Foudation.NSURL</span></span><br><span class="line">var url = <span class="built_in">NSURL</span>(string: <span class="string">"randomLoacation"</span>)!</span><br><span class="line"><span class="keyword">if</span> url<span class="variable">.isFileURL</span> &#123;&#125; <span class="comment">//意思更明确</span></span><br><span class="line">var x = url<span class="variable">.appendingPathComponent</span>(<span class="string">"file.txt"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="一致的函数参数标签">一致的函数参数标签</h3><p>原来2.2中, 第一个参数标签可以省略.类似这样:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func myFunction(a: Int , b: Int , c: Int)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFunction(<span class="number">42</span>, b: <span class="number">57</span>, c: <span class="number">39</span>)</span><br></pre></td></tr></table></figure>
<p>在 3.0 中,上面的用法会报错. 需要显式写出标签,类似这样:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func myFunction(a: Int , b: Int , c: Int)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFunction(a: <span class="number">10</span>, b: <span class="number">10</span>, c: <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>当然,如果实在不想写,可以在声明的时候使用 <code>_</code> .</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func myFunction(_ a: Int , b: Int , c: Int)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFunction(<span class="number">10</span>, b: <span class="number">10</span>, c: <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<h3 id="移动_Where_语句到函数声明的结尾">移动 Where 语句到函数声明的结尾</h3><p>在 Swift2.2中,泛型约束语句<code>Where</code>需要放到泛型的<code>&lt;&gt;</code>中.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func anyCommon&lt;T: SequenceType, U: SequenceType</span><br><span class="line">    where T<span class="variable">.Generator</span><span class="variable">.Element</span> : Equatable,</span><br><span class="line">    T<span class="variable">.Generator</span><span class="variable">.Element</span> == U<span class="variable">.Generator</span><span class="variable">.Element</span>&gt;(lhs: T, rhs: U) -&gt; Bool&#123;</span><br><span class="line">    print(<span class="string">"here"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 Swift3.0中,将其提取到声明之后:<br>代码是参考的 Session 中的代码,但是本人用 Xcode8.0的 Playground 报错.但是主旨不会错,就是将<code>Where</code>语句提取出来.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func anyCommons&lt;T: Sequence, U: Sequence&gt;(lhs: T, rhs: U) -&gt; Bool</span><br><span class="line">    where T<span class="variable">.Element</span>: Equatable,T<span class="variable">.Element</span> == U<span class="variable">.Element</span></span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="string">"here"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="结果未使用警告的方法">结果未使用警告的方法</h3><p>对于一个没有使用的函数返回值(或者自定义的变量值),编译器都会给你一个警告.因为既然你认为有返回值, 而你却没有使用.这可能就是你忘记了.这种操作可能会造成你编码的 bug</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func plusOne(_ a : Int) -&gt;Int&#123;</span><br><span class="line">         print(a)</span><br><span class="line">         <span class="keyword">return</span> a+<span class="number">1</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     plusOne(<span class="number">3</span>) <span class="comment">//得到警告 Result of call to 'plusOne' is unused</span></span><br></pre></td></tr></table></figure>
<p>但是一些情况下.我们确实不需要用到这个返回值,而且仅仅是为了函数的一个副作用( side effect) 而去调用函数. 例如,上面代码中的<code>print(a)</code>.这就是我调用函数的目的.<br>为了消除警告,可以使用如下方式:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func plusOne(_ a : Int) -&gt;Int&#123;</span><br><span class="line">    print(a)</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_ =  plusOne(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>或者使用标记 <code>@discardableResult</code>:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@discardableResult</span><br><span class="line">func plusOne(_ a : Int) -&gt;Int&#123;</span><br><span class="line">    print(a)</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plusOne(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h3 id="索引集合">索引集合</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let collection = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line"></span><br><span class="line">var i = collection<span class="variable">.startIndex</span></span><br></pre></td></tr></table></figure>
<p>在 Swift 2.2 中</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swift <span class="number">2</span> : var next = i<span class="variable">.successor</span>()</span><br></pre></td></tr></table></figure>
<p>在 Swift 3.0 中</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var next = collection<span class="variable">.index</span>(after: <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h3 id="浮点型和数值型">浮点型和数值型</h3><ul>
<li>Float,Double,Float80 和 CGFloat统一使用新的浮点协议( Floating Point Protocol )</li>
<li>提供 IEEE-754 相关的属性和方法 (IEEE 754 标准是IEEE二进位浮点数算术标准（IEEE Standard for Floating-Point Arithmetic）的标准编号  ，等同于国际标准ISO/IEC/IEEE 60559[2])</li>
<li>允许在所有的浮点类型上使用算法泛型(水平有限,原文是:permits algrithms to be gerneric over all floating point types)</li>
</ul>
<p>用 PI 来举个例子:<br>Swift 2.2</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let v = <span class="number">2</span> * Float(M_PI)</span><br></pre></td></tr></table></figure>
<p>而在 Swift3.0中</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let v = <span class="number">2</span> * Float<span class="variable">.pi</span></span><br></pre></td></tr></table></figure>
<p>如果第一个操作数是浮点数,还可以这样写:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let anotherV = <span class="number">2.0</span> * <span class="variable">.pi</span> / <span class="number">180</span></span><br></pre></td></tr></table></figure>
<h3 id="隐式解包可选">隐式解包可选</h3><p>在 Swift2.2中<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func f(value: Int!)&#123;</span><br><span class="line">    let x = value + <span class="number">1</span> <span class="comment">// x 是 Int 类型 - 强制解包</span></span><br><span class="line">    let y = value     <span class="comment">// y 是 Int!</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 Swift 3.0 中<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func f(value: Int!)&#123;</span><br><span class="line">    let x = value + <span class="number">1</span> <span class="comment">// x 是 Int 类型 - 强制解包</span></span><br><span class="line">    let y = value     <span class="comment">// y 是 Int?</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>具体参考:<br><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md" target="_blank" rel="external">SE-0054</a></p>
<h3 id="一些细节的增强">一些细节的增强</h3><ul>
<li>当前文件访问级别,新增的权限控制关键字 <code>fileprivate</code> <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md" target="_blank" rel="external">SE-0025</a></li>
<li><code>case</code>中的标签可以使用多种模式 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md" target="_blank" rel="external">SE-0043</a></li>
<li>泛型别名 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0048-generic-typealias.md" target="_blank" rel="external">SE-0048</a></li>
<li>引用Objective-C 的 key-paths <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0062-objc-keypaths.md" target="_blank" rel="external">SE-0062</a></li>
<li>引用 Objective-C中属性的 getter 和 setter <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0064-property-selectors.md" target="_blank" rel="external">SE-0064</a></li>
<li>协议和协议拓展的别名 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0092-typealiases-in-protocols.md" target="_blank" rel="external">SE-0092</a><h3 id="移除的功能">移除的功能</h3></li>
</ul>
<ol>
<li>函数柯里化<a href="http://www.cocoachina.com/ios/20141110/10166.html" target="_blank" rel="external">Currying介绍</a></li>
<li>函数参数中的 <code>var</code> <a href="http://www.swiftcafe.io/2016/05/05/swift3-var/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">详细介绍</a></li>
<li>去掉 <code>++</code> 和 <code>--</code> 操作符</li>
<li>C 风格的for循环</li>
<li>通过元组的形式传递函数参数列表 .<a href="http://www.paulrobinson.net/function-parameters-are-tuples-in-swift/" target="_blank" rel="external">详细介绍</a></li>
</ol>
<p>对第5条做一个说明:<br>在 swift 2.2 中,我们可以:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let param = (<span class="number">20</span>,<span class="string">"kenny"</span>,<span class="string">"male"</span>)</span><br><span class="line"></span><br><span class="line">func personInfo(age: Int ,_ name: String ,_ gender: String)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">personInfo(param)</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以不省略标签</span></span><br><span class="line"></span><br><span class="line">let param = (age:<span class="number">20</span>, name:<span class="string">"kenny"</span>, gender:<span class="string">"male"</span>)</span><br><span class="line"></span><br><span class="line">func personInfo(age age: Int , name: String , gender: String)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">personInfo(param)</span><br></pre></td></tr></table></figure>
<p>这个语法在 Swift3.0中被去掉了.原因是这么传递,可能会和有一个元组类型参数的函数混淆.</p>
<p>参考 : WWDC 2016 Session 402 What’s new in Swift</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在 Swift 中使用DEBUG标记]]></title>
      <url>http://yoursite.com/2016/06/14/Swift/%E5%9C%A8-Swift-%E4%B8%AD%E4%BD%BF%E7%94%A8DEBUG%E6%A0%87%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>在 OC 中,我们经常会使用 <code>DEBUG</code> 标记来区分开发版本和发行版本,例如,控制调试信息的打印.</p>
<p>但是在使用 Swift 之后,我们发现<code>DEBUG</code> 不能正常工作.原因是 Swift 中没有<code>DEBUG</code>这个标记.例如下面的代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func G<span class="built_in">UILog</span>&lt;T&gt;(_ message: T, fileName: String = <span class="preprocessor">#function, methodName: String = #function, lineNumber: Int = #line) &#123;</span></span><br><span class="line">    <span class="preprocessor">#if DEBUG</span></span><br><span class="line">    print(<span class="string">"\(methodName)[\(lineNumber)]:\(message)"</span>)</span><br><span class="line">    <span class="preprocessor">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然并不会报错,但是始终不会有打印.</p>
<h3 id="解决方案">解决方案</h3><p>在 <code>Build Settings</code> 中搜索 <code>other swift flags</code><br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/%E5%9C%A8-Swift-%E4%B8%AD%E4%BD%BF%E7%94%A8DEBUG%E6%A0%87%E8%AE%B014658688864325.jpg" alt=""><br>点击图中红色框内部(注意不是直接点击<code>+</code>),会出现一个这样的对话框.(可能已经有其他标记,如果你使用了 <code>cocoapods</code> 的话,不过不用在意),点击左下角的+ ,或者双击任意空白行,输入<code>-DDEBUG</code>.<br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/%E5%9C%A8-Swift-%E4%B8%AD%E4%BD%BF%E7%94%A8DEBUG%E6%A0%87%E8%AE%B014658689870706.jpg" alt=""><br>点击其它任意区域.结果如图<br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/%E5%9C%A8-Swift-%E4%B8%AD%E4%BD%BF%E7%94%A8DEBUG%E6%A0%87%E8%AE%B014658693876738.jpg" alt=""></p>
<p>现在,<code>DEBUG</code>就能正常工作了!<br>可以通过调整模式来进行测试:<br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/%E5%9C%A8-Swift-%E4%B8%AD%E4%BD%BF%E7%94%A8DEBUG%E6%A0%87%E8%AE%B014658692067377.jpg" alt=""></p>
<p>把图中的地方改成<code>Release</code>,即可进行测试.</p>
<h3 id="Tips">Tips</h3><p>这个编译标记可以随便定义,并不是只能是<code>DEBUG</code>,只要标记能够对应,即可正常工作.编译器只是会看,在<code>Debug</code>模式下,有哪些标记.(或者在 <code>Release</code> 模式下有哪些标记.)例如:<br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/%E5%9C%A8-Swift-%E4%B8%AD%E4%BD%BF%E7%94%A8DEBUG%E6%A0%87%E8%AE%B014658693876738.jpg" alt=""><br>代码:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func G<span class="built_in">UILog</span>&lt;T&gt;(_ message: T, fileName: String = <span class="preprocessor">#function, methodName: String = #function, lineNumber: Int = #line) &#123;</span></span><br><span class="line">    <span class="preprocessor">#if DEFAULT</span></span><br><span class="line">    print(<span class="string">"\(methodName)[\(lineNumber)]:\(message)"</span>)</span><br><span class="line">    <span class="preprocessor">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从 variable with a setter must also have a getter 引发的思考]]></title>
      <url>http://yoursite.com/2016/05/13/Swift/%E4%BB%8E-variable-with-a-setter-must-also-have-a-getter-%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>今天一哥们在群里问:”为什么我不能只重写 setter ,还要多写个 getter ?”<br>我一听也是懵了,后来在 playgroud 里面写,果然得到了一个错误:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    </span><br><span class="line">    var labelText:String</span><br><span class="line">        &#123;</span><br><span class="line">        set(newValue)&#123;</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.labelText</span> = newValue</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Variable With a setter must also have a getter</code></p>
<p>后来,查找 stackflow, 找到了答案:</p>
<p>一旦你给一个属性添加了 <code>getter</code> 或者 <code>setter</code> ,这个属性将变成 <code>计算属性</code>.</p>
<p>后来,我在<code>The Swift Programming Language 2.2</code> 的 Properties 一章中,找到这样一段描述:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“In addition to stored properties, classes, structures, and enumerations can define computed properties, which <span class="keyword">do</span> not actually store a value. Instead, they provide a getter and an optional setter to retrieve and set other properties and values indirectly.”</span><br></pre></td></tr></table></figure>
<p>除了存储属性之外,类,结构体和枚举还可以定义计算属性,计算属性 <strong>不存储值</strong> ,它们提供一个 <code>getter</code> 和一个 <strong>可选的</strong> <code>setter</code>,借此来读取和<strong>间接地</strong>设置<strong>其他属性和值</strong>.</p>
<p>我在文档中没有找到更多的说明,下面来说说我自己的思考:</p>
<ol>
<li><p>计算属性不存储值,那么也就是说,只能我显式地告诉程序,这个值是怎么来的.所以,需要有一个 <code>getter</code> ,它是必须的,否则这个属性就不是计算属性.而是存储属性.</p>
</li>
<li><p><code>setter</code>是可选的,可以不写 (不写 <code>setter</code> 不写 <code>getter</code>,那么这个属性还是存储属性).但是一旦写了<code>setter</code>(这个属性变成了计算属性),那么<code>getter</code>也是必须的</p>
</li>
</ol>
<h3 id="willSet_和_didSet">willSet 和 didSet</h3><p>刚刚说明了关于计算属性的一些特点,但是问题来了,我们经常有拦截<code>setter</code>来做一些自定义处理的需求. 在 OC 中,这个很简单,重写 <code>setter</code>方法就好了,但是, Swift 中, 添加<code>setter</code>会让属性变味.</p>
<p>Swift 的设计者肯定也是考虑到了这一点,所以提供了 <code>willSet</code> 和 <code>didSet</code>这两个属性观察方法.用法如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    </span><br><span class="line">    var labelText:String = <span class="string">"great"</span></span><br><span class="line">        &#123;</span><br><span class="line">        willSet&#123;</span><br><span class="line">            print(<span class="string">"labeltext will change!"</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        didSet&#123;</span><br><span class="line">            print(<span class="string">"labeltext did change!"</span>)</span><br><span class="line"><span class="comment">//            labelText = "defalut"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">labeltext will change!</span><br><span class="line">labeltext did change!</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>这样,我们可以过滤值,可以自己处理一些事情,也不会误把存储属性转换成计算属性.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手把手教你创建自己的Cocoapods库]]></title>
      <url>http://yoursite.com/2016/05/12/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Cocoapods%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>如果您能看这篇文章,相信您已经了解并喜欢上了 Cocoapods, 下面我们一步一步的创建一个属于自己的 Cocoapods 库.</p>
<h2 id="创建">创建</h2><p>通过下面命令,可以使用一个创建向导简历 Cocoapods 库<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create G<span class="built_in">UICodeSnippet</span></span><br></pre></td></tr></table></figure></p>
<p>然后终端会进行引导,依次选择即可. 回车键确认默认选择.</p>
<p>问题依次是:</p>
<ol>
<li><p>语言 </p>
</li>
<li><p>创建demo工程( 极力推荐创建)</p>
</li>
<li><p>选择测试框架 (可选择默认,如果非常确定没有需要,可以选择None)</p>
</li>
<li><p>View-based Testing  (官方推荐使用 <code>FBSnapShotTestCase</code>)</p>
</li>
<li><p>OC类前缀 (如果语言选择非OC,不会有这项)</p>
</li>
</ol>
<p>打开工程,会发现有一个 GUICodeSnippet 和一个 Pods, 在<br><code>Pods-&gt;Development Pods-&gt;GUICodeSnippet-&gt;Pod-&gt;Classes</code>中,有一个<code>ReplaceMe.m</code></p>
<p>你需要将这个文件替换成自己的代码文件.</p>
<h2 id="源码验证">源码验证</h2><p>进入 Example 目录 , 执行<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></p>
<p>然后 Xcode 打开 xcworkspace 文件 ,去跑一下项目,如果没有错误,证明添加的代码没有问题,可以继续进行</p>
<h2 id="准备工作">准备工作</h2><h3 id="配置_podspec_文件">配置 podspec 文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Be sure to run `pod lib lint GUICodeSnippet.podspec' to ensure this is a</span><br><span class="line"># valid spec before submitting.</span><br><span class="line">#</span><br><span class="line"># Any lines starting with a # are optional, but their use is encouraged</span><br><span class="line"># To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name             = "GUICodeSnippet"</span><br><span class="line">  s.version          = "0.1.8"</span><br><span class="line">  s.summary          = "code segment of kennyGui"</span><br><span class="line"></span><br><span class="line"># This description is used to generate tags and improve search results.</span><br><span class="line">#   * Think: What does it do? Why did you write it? What is the focus?</span><br><span class="line">#   * Try to keep it short, snappy and to the point.</span><br><span class="line">#   * Write the description between the DESC delimiters below.</span><br><span class="line">#   * Finally, don't worry about the indent, CocoaPods strips it!  </span><br><span class="line">  s.description      = &lt;&lt;-DESC</span><br><span class="line">                      code segment of kenny ,and in most situation ,is for private use only</span><br><span class="line">                       DESC</span><br><span class="line"></span><br><span class="line">  s.homepage         = "https://git.oschina.net/kennygui/GUICodeSnippet"</span><br><span class="line">  # s.screenshots     = "www.example.com/screenshots_1", "www.example.com/screenshots_2"</span><br><span class="line">  s.license          = 'MIT'</span><br><span class="line">  s.author           = &#123; "katsurake" =&gt; "katsurake@foxmail.com" &#125;</span><br><span class="line">  s.source           = &#123; :git =&gt; "https://git.oschina.net/kennygui/GUICodeSnippet.git", :tag =&gt; s.version.to_s &#125;</span><br><span class="line">  # s.social_media_url = 'https://twitter.com/&lt;TWITTER_USERNAME&gt;'</span><br><span class="line"></span><br><span class="line">  s.platform     = :ios, '7.0'</span><br><span class="line">  s.requires_arc = true</span><br><span class="line"></span><br><span class="line">  s.source_files = 'Pod/Classes/*.h'</span><br><span class="line">  s.resource_bundles = &#123;</span><br><span class="line">    'GUICodeSnippet' =&gt; ['Pod/Assets/*.png']</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  s.public_header_files = 'Pod/Classes/*.h'</span><br><span class="line">  s.frameworks = 'UIKit', 'MapKit'</span><br><span class="line">  s.dependency 'AFNetworking', '~&gt; 2.3'</span><br><span class="line">  s.dependency 'CocoaLumberjack', '~&gt; 2.2.0'</span><br><span class="line">  s.dependency 'MBProgressHUD', '~&gt; 0.9.2'</span><br><span class="line">  s.dependency 'Masonry', '~&gt; 0.6.4'</span><br><span class="line">  s.dependency 'ReactiveCocoa', '~&gt; 2.5'</span><br><span class="line">  s.dependency 'YapDatabase', '~&gt; 2.8.3'</span><br><span class="line">  s.dependency 'DTCoreText', '~&gt; 1.6.17'</span><br><span class="line">  s.dependency 'MJExtension', '~&gt; 3.0.10'</span><br><span class="line">  end</span><br></pre></td></tr></table></figure>
<p>创建完毕之后,随手使用<br><code>pod lib lint</code><br>命令验证是否编写正确,如果没有正确,根据提示修改即可.</p>
<p>几个好用的命令:</p>
 <figure class="highlight"><figcaption><span>完整打印详情,可以帮助我们调试,用法 ` pod lib lint --verbose`</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> &#10; &#10; ```--allow-warnings``` &#24573;&#30053;&#35686;&#21578;,&#30001;&#20110;&#19968;&#20123;&#19977;&#26041;&#20195;&#30721;&#26377;&#35686;&#21578;,&#25152;&#20197;&#36896;&#25104;&#22987;&#32456;&#26080;&#27861;&#36890;&#36807;,&#21487;&#20197;&#29992;&#36825;&#20010;&#26041;&#27861;&#24573;&#30053;&#35686;&#21578;,&#29992;&#27861;&#21516;&#19978;&#10; &#10;&#10;&#10;### &#21019;&#24314;&#20195;&#30721;&#20179;&#24211;&#10; &#22312;github &#25110;&#32773;&#20854;&#20182;&#25176;&#31649;&#24179;&#21488;&#24314;&#31435;&#19968;&#20010;&#31354;&#39033;&#30446;,&#26368;&#22909;&#39033;&#30446;&#21517;&#31216;&#21644;&#26412;&#22320;&#30340;&#19968;&#33268;&#10;&#10;```objc&#10;&#10;git add .&#10;git commit -m &#8220;Initial Commit&#34;&#10;git remote add origin https://github.com/kennyGui/GUICodeSnippet.git &#10;git push -u origin master</span><br></pre></td></tr></table></figure>
<p>其实我更喜欢的方式是, Clone 空项目,然后替换代码的 .git 文件夹,这样更暴力,具体怎么选择,看个人喜好.</p>
<h3 id="打_tag">打 tag</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git tag -a <span class="number">0.1</span><span class="number">.0</span> -m <span class="string">"初始版本"</span></span><br><span class="line"></span><br><span class="line">通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：</span><br><span class="line">git push origin <span class="number">0.1</span><span class="number">.2</span> <span class="preprocessor"># 将v0.1.2标签提交到git服务器</span></span><br><span class="line">或者</span><br><span class="line">git push origin –tags <span class="preprocessor"># 将本地所有标签一次性提交到git服务器</span></span><br><span class="line">验证标签成功</span><br><span class="line">git tag <span class="preprocessor">#查看标签</span></span><br></pre></td></tr></table></figure>
<h2 id="推送描述文件">推送描述文件</h2><p>使用这个命令推送自己的库的信息到官方的 Master 库</p>
<figure class="highlight"><figcaption><span>trunk push GUICodeSnippet.podspec ```objc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#20294;&#26159;&#22914;&#26524;&#20320;&#26159;&#31532;&#19968;&#27425;&#20351;&#29992;&#30340;&#35805;,&#38656;&#35201;&#27880;&#20876; Session&#10;&#20351;&#29992;&#22914;&#19979;&#21629;&#20196;&#27880;&#20876;&#33258;&#24049;&#30340;&#37038;&#31665;(&#27880;&#24847;&#26367;&#25442;&#25104;&#33258;&#24049;&#30340;&#37038;&#31665;)</span><br></pre></td></tr></table></figure>
<p>pod trunk register orta@cocoapods.org ‘Orta Therox’ —description=’macbook air’<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">稍后, 邮箱会收到邮件, 点击链接即可</span><br><span class="line"></span><br><span class="line">``` pod trunk push BlinkingLabel<span class="variable">.podspec</span></span><br></pre></td></tr></table></figure></p>
<p>由于网络原因(你懂得),可能会推送失败,多尝试几次即可.</p>
<h2 id="验证">验证</h2><p>可以让同事或者朋友使用<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search G<span class="built_in">UICodeSnippet</span></span><br></pre></td></tr></table></figure></p>
<p>这个命令进行测试,但是,如果是第一次,应该是找不到的.<br>需要使用<br><code>pod setup</code>更新一下本地的 Maser 库信息</p>
<h2 id="结语">结语</h2><p>好了,现在,你就可以将自己的代码共享给小伙伴使用啦.</p>
<p>现在 pod 里面的 Class 都是放在一个文件夹下的,没有办法实现子文件夹,(即使工程里面有多个文件夹,但是弄好 cocoapods 之后,也是都放到一个文件夹下面了)</p>
<p>这需要我们的 spec 里面配置 subspec ,这个知识点会在下一篇文章中说</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[升级 Chisel 遇到的问题和解决记录]]></title>
      <url>http://yoursite.com/2016/05/12/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E5%8D%87%E7%BA%A7-Chisel-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>升级了 Xcode7.3后，发现 Chisel 突然不好使了，于是再度打开<a href="https://github.com/facebook/chisel" target="_blank" rel="external">主页</a>，想升级一下应该能解决问题. </p>
<p>安装官方说明，需要首先升级 homebrew ，其实知道 ，这一步不是必须的。但是为了后面不出现问题,还是顺手一并升级吧!</p>
<p>然后,开始了问题之旅:</p>
<p>使用 <code>brew update</code>,结果得到了以下提示:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">warning: unable to unlink CONTRIBUTING.md: Permission denied</span><br><span class="line">warning: unable to unlink SUPPORTERS.md: Permission denied</span><br><span class="line">fatal: cannot create directory at '.github': Permission denied</span><br></pre></td></tr></table></figure>
<p>不难看出,是权限问题,修改权限</p>
<p><code>sudo chmod -R 777 /usr/local</code></p>
<p>相关知识：<br>可以不必修改为 777 的, 关于权限的更多,感兴趣的可以自行 google<br>r表示读权限，4 , w表示写权限，2 , x表示执行权限， 1</p>
<p>可是修改之后,仍然不好用.<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/core_ext/kernel_require.rb:55:in `require': cannot load such file -- mach (LoadError)</span><br></pre></td></tr></table></figure></p>
<p>一不做,二不休,干脆尝试重新安装 homebrew</p>
<p>在终端输入<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code><br>然后得到了下面的提示</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kenny@kenny:~|⇒  /usr/bin/ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br><span class="line">-e:<span class="number">77</span>: warning: Insecure world writable dir /usr/local/bin <span class="keyword">in</span> PATH, mode <span class="number">040777</span></span><br><span class="line">It appears Homebrew is already installed. If your intent is to reinstall you</span><br><span class="line">should <span class="keyword">do</span> the following before running <span class="keyword">this</span> installer again:</span><br><span class="line">    ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"</span></span><br><span class="line">The current contents of /usr/local are bin Cellar CODEOFCONDUCT<span class="variable">.md</span> CONTRIBUTING<span class="variable">.md</span> etc include lib Library LICE<span class="built_in">NSE</span><span class="variable">.txt</span> opt README<span class="variable">.md</span> sbin share SUPPORTERS<span class="variable">.md</span> var <span class="variable">.git</span> <span class="variable">.gitignore</span></span><br></pre></td></tr></table></figure>
<p>提示的是 git 的错误<br>尝试 cd 到<code>/usr/local</code>目录下，<br><code>git status</code><br>果然有一堆修改内容,这些应该是之前各种操作没有成功完成,导致修改没有被妥善处理<br>然后：<br><code>git reset --hard</code></p>
<p><code>kenny@kenny:/usr/local|master⇒  git status
On branch master
nothing to commit, working directory clean</code></p>
<p>可能还需要执行：<br><code>git clean -df</code></p>
<p>第一个是放弃已经 stage 的文件的更改<br>第二个是对没有 stage 的文件进行放弃</p>
<p>执行安装<br><figure class="highlight"><figcaption><span>brew install chisel</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: chisel-1.2.0 already installed&#10;To install this version, first `brew unlink chisel`&#10;```objc&#10;&#10;&#21368;&#36733;&#26087;&#29256;&#10;```kenny@kenny:/usr/local|master&#8658;  brew unlink chisel&#10;Unlinking /usr/local/Cellar/chisel/1.2.0... 0 symlinks removed</span><br></pre></td></tr></table></figure></p>
<p>重新安装<br><code>kenny@kenny:/usr/local|master⇒  brew install chisel
==&gt; Downloading https://github.com/facebook/chisel/archive/1.4.0.tar.gz
==&gt; Downloading from https://codeload.github.com/facebook/chisel/tar.gz/1.4.0</code>objc</p>
<p>可以看到,现在升级到了1.4了.</p>
<p>到 Xcode 中测试,发现也欢乐的好用了 !</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS正则表达式类 NSRegularExpression 详解]]></title>
      <url>http://yoursite.com/2015/11/18/iOS%20Tips/iOS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>因目前手头的项目与不成熟的硬件工作,可能出现两个Json拼接到一起的情况,需要使用到正则表达式进行拆分.</p>
<h2 id="现状">现状</h2><p>提到 iOS中的正则表达式 ,大家容易想到的有三种方式:</p>
<h3 id="RangeOfString:_option:">RangeOfString: option:</h3><p>这种是最简单粗暴的方式,使用方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *testString = <span class="string">@"&#123;this is regex&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSRange</span> range = [testString rangeOfString:<span class="string">@"[a-z]"</span> options:<span class="built_in">NSRegularExpressionSearch</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (range<span class="variable">.location</span> != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [testString substringWithRange:range]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>这种方式,简单并且容易理解. 但是对于我的案例, 我可能会有多个结果. 所以这个方式,不适合</p>
<h3 id="NSPredicate">NSPredicate</h3><p>谓词匹配<br>Cocoa框架中的NSPredicate用于查询，原理和用法都类似于SQL中的where，作用相当于数据库的过滤取。关于谓词的更全面的知识, 在<a href="http://blog.csdn.net/ztp800201/article/details/8116081" target="_blank" rel="external">这里</a></p>
<p>在这里只讨论其作为正则表达式的用法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *emailString = <span class="string">@"guiqing1990@163.com"</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;"</span>;</span><br><span class="line">    <span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, regex];</span><br><span class="line">    <span class="built_in">BOOL</span> isValid = [predicate evaluateWithObject:emailString];</span><br></pre></td></tr></table></figure>
<p>点击进入 <code>NSPredicate</code> 的头文件,可以看出,  <code>NSPredicate</code> 绝大多数情况是用来做匹配验证的. 可以说,在作为正则表达式使用的情况下,  <code>NSPredicate</code> 的功能是比 <code>RangeOfString: option:</code> 弱的.</p>
<h3 id="NSRegularExpression">NSRegularExpression</h3><p>这是iOS自带的正则表达式类, 功能强大,几乎可以满足任何iOS开发中的正则需求.</p>
<h4 id="初始化方法">初始化方法</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ (nullable <span class="built_in">NSRegularExpression</span> *)regularExpressionWithPattern:(<span class="built_in">NSString</span> *)pattern options:(<span class="built_in">NSRegularExpressionOptions</span>)options error:(<span class="built_in">NSError</span> **)error;</span><br><span class="line">- (nullable instancetype)initWithPattern:(<span class="built_in">NSString</span> *)pattern options:(<span class="built_in">NSRegularExpressionOptions</span>)options error:(<span class="built_in">NSError</span> **)error</span><br></pre></td></tr></table></figure>
<p>实例初始化方法和对应的类方法 . 需要说明的是 <code>options</code>参数</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSRegularExpressionOptions</span>) &#123;</span><br><span class="line">   <span class="built_in">NSRegularExpressionCaseInsensitive</span>             = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,     <span class="comment">/* 大小写敏感 */</span></span><br><span class="line">   <span class="built_in">NSRegularExpressionAllowCommentsAndWhitespace</span>  = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,     <span class="comment">/* 忽略空格或者 # -  */</span></span><br><span class="line">   <span class="built_in">NSRegularExpressionIgnoreMetacharacters</span>        = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,     <span class="comment">/* 把整个看成一个文本串 */</span></span><br><span class="line">   <span class="built_in">NSRegularExpressionDotMatchesLineSeparators</span>    = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,     <span class="comment">/* 允许 . 匹配所有字符,包括行分隔符 */</span></span><br><span class="line">   <span class="built_in">NSRegularExpressionAnchorsMatchLines</span>           = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,     <span class="comment">/* 允许^和$ 匹配行的开始和结束 */</span></span><br><span class="line">   <span class="built_in">NSRegularExpressionUseUnixLineSeparators</span>       = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,     <span class="comment">/*  </span><br><span class="line">   仅仅把 \n 当做行分隔符(否则,所有标准的行分隔符都算作行分隔符),查找范围为整个的话,无效</span><br><span class="line">   */</span></span><br><span class="line">   <span class="built_in">NSRegularExpressionUseUnicodeWordBoundaries</span>    = <span class="number">1</span> &lt;&lt; <span class="number">6</span>      <span class="comment">/* </span><br><span class="line">   使用TR#29作为单词边界(否则,传统的正则表达式的单词边界作为单词边界) 查找范围为整个的话,无效</span><br><span class="line">    */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="匹配方法">匹配方法</h4><ol>
<li>返回所有匹配结果的集合(适合,从一段字符串中提取我们想要匹配的所有数据)</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)matchesInString:(<span class="built_in">NSString</span> *)string options:(<span class="built_in">NSMatchingOptions</span>)options range:(<span class="built_in">NSRange</span>)range;</span><br></pre></td></tr></table></figure>
<ol>
<li>返回正确匹配的个数(通过等于0,来验证邮箱,电话什么的,代替NSPredicate)</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">NSUInteger</span>)numberOfMatchesInString:(<span class="built_in">NSString</span> *)string options:(<span class="built_in">NSMatchingOptions</span>)options range:(<span class="built_in">NSRange</span>)range;</span><br></pre></td></tr></table></figure>
<ol>
<li>返回第一个匹配的结果。注意，匹配的结果保存在  NSTextCheckingResult 类型中</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">NSTextCheckingResult</span> *)firstMatchInString:(<span class="built_in">NSString</span> *)string options:(<span class="built_in">NSMatchingOptions</span>)options range:(<span class="built_in">NSRange</span>)range;</span><br></pre></td></tr></table></figure>
<ol>
<li>返回第一个正确匹配结果字符串的NSRange</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSRange</span>)rangeOfFirstMatchInString:(<span class="built_in">NSString</span> *)string options:(<span class="built_in">NSMatchingOptions</span>)options range:(<span class="built_in">NSRange</span>)range;</span><br></pre></td></tr></table></figure>
<ol>
<li>block方法</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)enumerateMatchesInString:(<span class="built_in">NSString</span> *)string options:(<span class="built_in">NSMatchingOptions</span>)options range:(<span class="built_in">NSRange</span>)range usingBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSTextCheckingResult</span> *result, <span class="built_in">NSMatchingFlags</span> flags, <span class="built_in">BOOL</span> *stop))block;</span><br></pre></td></tr></table></figure>
<h4 id="在block中用到的枚举">在block中用到的枚举</h4><p>下面的两个枚举用在block,其他地方,写0即可</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">   *  enum &#123;</span><br><span class="line">   NSMatchingReportProgress		 = 1 &lt;&lt; 0,</span><br><span class="line">   NSMatchingReportCompletion	   = 1 &lt;&lt; 1,</span><br><span class="line">   NSMatchingAnchored			   = 1 &lt;&lt; 2,</span><br><span class="line">   NSMatchingWithTransparentBounds  = 1 &lt;&lt; 3,</span><br><span class="line">   NSMatchingWithoutAnchoringBounds = 1 &lt;&lt; 4</span><br><span class="line">   &#125;;</span><br><span class="line">   typedef NSUInteger NSMatchingOptions;</span><br><span class="line">   */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 此枚举值只在最后一个block方法中用到</span><br><span class="line">   *  enum &#123;</span><br><span class="line">   NSMatchingProgress			   = 1 &lt;&lt; 0,</span><br><span class="line">   NSMatchingCompleted			  = 1 &lt;&lt; 1,</span><br><span class="line">   NSMatchingHitEnd				 = 1 &lt;&lt; 2,</span><br><span class="line">   NSMatchingRequiredEnd			= 1 &lt;&lt; 3,</span><br><span class="line">   NSMatchingInternalError		  = 1 &lt;&lt; 4</span><br><span class="line">   &#125;;</span><br><span class="line">   typedef NSUInteger NSMatchingFlags;</span><br><span class="line">   */</span></span><br></pre></td></tr></table></figure>
<p>最后,附上我项目中的例子:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> * rawString = <span class="string">@"&#123;\"msg_id\":1793&#125;&#123;\"rval\":0,\"msg_id\":257,\"param\":9&#125;"</span>;</span><br><span class="line"> <span class="built_in">NSError</span> * error;</span><br><span class="line"> <span class="built_in">NSRegularExpression</span> * regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:<span class="string">@"\\&#123;.[^&#123;&#125;]*msg_id.[^&#123;&#125;]*\\&#125;"</span> options:<span class="number">0</span> error:&amp;error];</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">NSArray</span>* array = [regex matchesInString:rawString options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [rawString length])];</span><br><span class="line"></span><br><span class="line"> <span class="built_in">NSMutableArray</span> * resultArray = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line"> </span><br><span class="line"> [array enumerateObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">     <span class="built_in">NSTextCheckingResult</span> * result = (<span class="built_in">NSTextCheckingResult</span>*)obj;</span><br><span class="line">     <span class="built_in">NSString</span>* string = [rawString substringWithRange:result<span class="variable">.range</span>];</span><br><span class="line">     [resultArray addObject:string];</span><br><span class="line"> &#125;];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> [resultArray <span class="keyword">copy</span>];</span><br></pre></td></tr></table></figure>
<h3 id="注意点">注意点</h3><p><strong>最好在网页或者其他正则工具中,写好正则表达式,然后加入到代码中.可以省去反复调试的麻烦.</strong></p>
<p><strong>另外,记得要给特殊字符添加转义字符,否则会和正则本身的符号混淆,导致匹配不出结果</strong></p>
<h3 id="结语">结语</h3><p>学好正则表达式语法是非常值得的, 因为它在任何语言下都能发挥强大的作用 !</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[方法封装的基本步骤]]></title>
      <url>http://yoursite.com/2015/10/20/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E6%96%B9%E6%B3%95%E5%B0%81%E8%A3%85%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>今天一同学问我封装时候的基本依据. 然后要详细一点 . 所以写了这篇文章.</p>
<a id="more"></a>
<h2 id="封装的场景">封装的场景</h2><ul>
<li>最舒服的方式应该是基于需求的封装 , 比如知道自己想怎么用了, 然后写出用法 , 编写方法的实现.</li>
<li>可能是为了日后的拓展而进行的封装</li>
</ul>
<p>对于第二种方式, 个人是不太建议的. 我们不应该去臆测将来的需求. 如果真的需要了, 通过重构去实现即可.</p>
<p>但是还是借着今天的机会, 说说我封装的时候的思考方式吧. </p>
<ol>
<li>阅读方法, 明白方法的目的 ,例如以下的代码,一个关键帧动画.</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">CAKeyframeAnimation</span> *)createAnimation:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="built_in">CAKeyframeAnimation</span> *animation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</span><br><span class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> height = -<span class="number">100</span> + arc4random() % <span class="number">40</span> - <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> xOffset = frame<span class="variable">.origin</span><span class="variable">.x</span>;</span><br><span class="line">    <span class="keyword">int</span> yOffset = frame<span class="variable">.origin</span><span class="variable">.y</span>;</span><br><span class="line">    <span class="keyword">int</span> waveWidth = <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">CGPoint</span> p1 = <span class="built_in">CGPointMake</span>(xOffset, height * <span class="number">0</span> + yOffset);</span><br><span class="line">    <span class="built_in">CGPoint</span> p2 = <span class="built_in">CGPointMake</span>(xOffset, height * <span class="number">1</span> + yOffset);</span><br><span class="line">    <span class="built_in">CGPoint</span> p3 = <span class="built_in">CGPointMake</span>(xOffset, height * <span class="number">2</span> + yOffset);</span><br><span class="line">    <span class="built_in">CGPoint</span> p4 = <span class="built_in">CGPointMake</span>(xOffset, height * <span class="number">2</span> + yOffset);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGPathMoveToPoint</span>(path, <span class="literal">NULL</span>, p1<span class="variable">.x</span>,p1<span class="variable">.y</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (arc4random() % <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p1<span class="variable">.x</span> - arc4random() % waveWidth, p1<span class="variable">.y</span> + height / <span class="number">2.0</span>, p2<span class="variable">.x</span>, p2<span class="variable">.y</span>);</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p2<span class="variable">.x</span> + arc4random() % waveWidth, p2<span class="variable">.y</span> + height / <span class="number">2.0</span>, p3<span class="variable">.x</span>, p3<span class="variable">.y</span>);</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p3<span class="variable">.x</span> - arc4random() % waveWidth, p3<span class="variable">.y</span> + height / <span class="number">2.0</span>, p4<span class="variable">.x</span>, p4<span class="variable">.y</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p1<span class="variable">.x</span> + arc4random() % waveWidth, p1<span class="variable">.y</span> + height / <span class="number">2.0</span>, p2<span class="variable">.x</span>, p2<span class="variable">.y</span>);</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p2<span class="variable">.x</span> - arc4random() % waveWidth, p2<span class="variable">.y</span> + height / <span class="number">2.0</span>, p3<span class="variable">.x</span>, p3<span class="variable">.y</span>);</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p3<span class="variable">.x</span> + arc4random() % waveWidth, p3<span class="variable">.y</span> + height / <span class="number">2.0</span>, p4<span class="variable">.x</span>, p4<span class="variable">.y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    animation<span class="variable">.path</span> = path;</span><br><span class="line">    animation<span class="variable">.calculationMode</span> = k<span class="built_in">CAAnimationCubicPaced</span>;</span><br><span class="line">    <span class="built_in">CGPathRelease</span>(path);</span><br><span class="line">    <span class="keyword">return</span> animation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>提取可能的变量 ,方法要灵活性, 那么就需要把需要变化的参数开放给方法使用者(以下简称开发者). 通常,方法中的局部变量都可以作为方法的参数.或者根据实际需要,添加其他参数.</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> waveWidth = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>
<p>特别的, 能根据参数计算的局部变量,不应该作为参数,否则就冗余了.比如下面的两个</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> xOffset = frame<span class="variable">.origin</span><span class="variable">.x</span>;</span><br><span class="line"><span class="keyword">int</span> yOffset = frame<span class="variable">.origin</span><span class="variable">.y</span>;</span><br></pre></td></tr></table></figure>
<p>包含复杂计算过程的变量,也应该把计算过程封装到方法中.只暴露出索引,比如下面,我们将 -100抽出来,供使用者自定义,当然,可以根据需要把 40 和20 暴露</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> height = -<span class="number">100</span> + arc4random() % <span class="number">40</span> - <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p>所以,应该添加两个额外的参数(加上原来的frame,一共三个参数)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">waveWidth</span><br><span class="line">heightFactor</span><br><span class="line">frame</span><br></pre></td></tr></table></figure>
<h3 id="方法的安排">方法的安排</h3><ol>
<li><p>类方法 or 实例方法</p>
<ul>
<li>看返回值的类型(CAKeyframeAnimation *)是否和容器(NSObject)有依赖关系(比如依赖属性) ,如果没有, 直接使用类方法,因为可以省去实例化类的步骤.</li>
<li>如果有关系,可以采取先实例,然后封装到类方法的方式.</li>
</ul>
</li>
</ol>
<ol>
<li>方法安排<ul>
<li>首先应该提供一个全参数方法,保证开发者能够更改所有值. 例如本例中,可以根据到现在的原则设计出一个这个方法:</li>
</ul>
</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">CAKeyframeAnimation</span>*)createAnimationWithFrame:(<span class="built_in">CGRect</span>)frame waveWidth:(<span class="keyword">int</span>)waveWidth heightFactor:(<span class="keyword">int</span>)heightFactor</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CAKeyframeAnimation</span>* animation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</span><br><span class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> height = -heightFactor + arc4random() % <span class="number">40</span> - <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> xOffset = frame<span class="variable">.origin</span><span class="variable">.x</span>;</span><br><span class="line">    <span class="keyword">int</span> yOffset = frame<span class="variable">.origin</span><span class="variable">.y</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGPoint</span> p1 = <span class="built_in">CGPointMake</span>(xOffset, height * <span class="number">0</span> + yOffset);</span><br><span class="line">    <span class="built_in">CGPoint</span> p2 = <span class="built_in">CGPointMake</span>(xOffset, height * <span class="number">1</span> + yOffset);</span><br><span class="line">    <span class="built_in">CGPoint</span> p3 = <span class="built_in">CGPointMake</span>(xOffset, height * <span class="number">2</span> + yOffset);</span><br><span class="line">    <span class="built_in">CGPoint</span> p4 = <span class="built_in">CGPointMake</span>(xOffset, height * <span class="number">2</span> + yOffset);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGPathMoveToPoint</span>(path, <span class="literal">NULL</span>, p1<span class="variable">.x</span>, p1<span class="variable">.y</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arc4random() % <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p1<span class="variable">.x</span> - arc4random() % waveWidth, p1<span class="variable">.y</span> + height / <span class="number">2.0</span>, p2<span class="variable">.x</span>, p2<span class="variable">.y</span>);</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p2<span class="variable">.x</span> + arc4random() % waveWidth, p2<span class="variable">.y</span> + height / <span class="number">2.0</span>, p3<span class="variable">.x</span>, p3<span class="variable">.y</span>);</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p3<span class="variable">.x</span> - arc4random() % waveWidth, p3<span class="variable">.y</span> + height / <span class="number">2.0</span>, p4<span class="variable">.x</span>, p4<span class="variable">.y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p1<span class="variable">.x</span> + arc4random() % waveWidth, p1<span class="variable">.y</span> + height / <span class="number">2.0</span>, p2<span class="variable">.x</span>, p2<span class="variable">.y</span>);</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p2<span class="variable">.x</span> - arc4random() % waveWidth, p2<span class="variable">.y</span> + height / <span class="number">2.0</span>, p3<span class="variable">.x</span>, p3<span class="variable">.y</span>);</span><br><span class="line">        <span class="built_in">CGPathAddQuadCurveToPoint</span>(path, <span class="literal">NULL</span>, p3<span class="variable">.x</span> + arc4random() % waveWidth, p3<span class="variable">.y</span> + height / <span class="number">2.0</span>, p4<span class="variable">.x</span>, p4<span class="variable">.y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    animation<span class="variable">.path</span> = path;</span><br><span class="line">    animation<span class="variable">.calculationMode</span> = k<span class="built_in">CAAnimationCubicPaced</span>;</span><br><span class="line">    <span class="built_in">CGPathRelease</span>(path);</span><br><span class="line">    <span class="keyword">return</span> animation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>便捷调用<br> 并不是所有开发者都想一次次的写所有参数,所以应该提供便捷的调用方法.</li>
</ol>
<pre><code class="objc">+(<span class="built_in">CAKeyframeAnimation</span>*)curveAnimationWithFrame:(<span class="built_in">CGRect</span>)frame{

  <span class="keyword">return</span>  [G<span class="built_in">UIFrameAnimation</span> createAnimationWithFrame:frame waveWidth:<span class="number">50</span> heightFactor:<span class="number">100</span>];
}
</code></pre>
<h2 id="结语">结语</h2><p>这只是封装, 远远不够一份可读性高代码的要求. 应该继续进行重构. 但是不在现在讨论的范畴 .所以暂不讨论了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ReactiveCocoa代替Target-Action]]></title>
      <url>http://yoursite.com/2015/10/08/ReactiveCocoa/ReactiveCocoa%E4%BB%A3%E6%9B%BFTarget-Action/</url>
      <content type="html"><![CDATA[<p>从入职新公司到现在, 都在给”友商”的硬件填坑 .什么RTSP,H264… 我和安卓小伙伴都快忘记自己是应用开发的了… 好在最近回过神来了. 继续可爱的 <code>ReactiveCocoa</code></p>
<h2 id="context">context</h2><p>我们传统的使用 <code>UIButton</code>的方式,都是 <code>Target-Action</code>的方式. 但是有几个问题:</p>
<ol>
<li><p>局部变量共享 </p>
<a id="more"></a>
<p> 有个变量,我们需要在Action中使用,由于在 <code>Target-Action</code>的机制中,<code>Action</code>的参数撑死只能是<code>sender</code>, 所以,导致共享的方式,只能靠通过定义Property来实现 .这就需要程序员打断现有的思路,去定义Property . 对于一份有良好代码组织的代码(对不同种类的方法进行了种类划分的)就需要反复跳转去实现方法 .</p>
</li>
<li><p>代码阅读</p>
<p> 如第一条中所说, 编写代码的时候,尚且需要跳来跳去, 对新同事去接手代码,阅读成本更加高.</p>
</li>
</ol>
<h2 id="解决方案_without_ReactiveCocoa">解决方案 without ReactiveCocoa</h2><ol>
<li><p>局部变量共享<br> 可以采用<code>Runtime</code>的方法,给NSObject添加一个属性,让Button带着内容进去Action</p>
</li>
<li><p>给Button添加自依赖,参考 <a href="http://guiqingblog.com/2015/08/19/iOS%20Tips/利用Runtime实现自依赖按钮/" target="_blank" rel="external">我之前的博客</a></p>
</li>
</ol>
<p>开发者都声称 <code>Runtime</code>是黑魔法 . 所以 … </p>
<h2 id="ReactiveCocoa的解决">ReactiveCocoa的解决</h2><h3 id="RACSignal_方式">RACSignal 方式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="keyword">self</span><span class="variable">.button</span></span><br><span class="line">   rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"button clicked"</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>以上是利用UI事件创建信号</p>
<h3 id="RACCommand方式">RACCommand方式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RACCommand* aCommand =</span><br><span class="line">       [[RACCommand alloc] initWithSignalBlock:^RACSignal*(<span class="keyword">id</span> input) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> [RACSignal</span><br><span class="line">               createSignal:^RACDisposable*(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">                   <span class="built_in">NSLog</span>(<span class="string">@"----"</span>);</span><br><span class="line">                   [subscriber sendCompleted];</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">               &#125;];</span><br><span class="line">       &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">self</span><span class="variable">.testButton</span><span class="variable">.rac_command</span> = aCommand;</span><br></pre></td></tr></table></figure>
<p>根据官方文档来说, <code>RACCommand</code> 是对事件响应更官方的做法 ,而且,还可以通过 <code>execute</code> 手动执行.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[aCommand execute:<span class="literal">nil</span>]</span><br></pre></td></tr></table></figure>
<p><code>RACSignal</code> 的方式是简单易读.</p>
<p>两种方式可以根据实际需要选择 .</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Classy官方文档翻译:Properties]]></title>
      <url>http://yoursite.com/2015/09/20/UI%E7%9B%B8%E5%85%B3/Classy%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91-Properties/</url>
      <content type="html"><![CDATA[<h2 id="支持的属性">支持的属性</h2><p><code>Classy</code> 支持所有 <code>UIAppearance</code> 的属性和方法,还支持一些<code>UIAppearence</code>没有提到的属性. 因为<code>Classy</code>的属性名和<code>OC</code>中的是一致的,所以,其实你不用关心哪个属性对应哪个.</p>
<p>比如下面 <code>UIPageControl</code>的属性:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,retain) <span class="built_in">UIColor</span> *pageIndicatorTintColor;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,retain) <span class="built_in">UIColor</span> *currentPageIndicatorTintColor;</span><br></pre></td></tr></table></figure>
<p>在 <code>Classy</code>中的应用是这样子的:<br><a id="more"></a></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIPageControl</span> &#123;</span><br><span class="line">  pageIndicatorTintColor black</span><br><span class="line">  currentPageIndicatorTintColor purple</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>你也可以用折线,两者是完全一样的:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIPageControl</span> &#123;</span><br><span class="line">  page-indicator-tint-color black</span><br><span class="line">  current-page-indicator-tint-color purple</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="参数">参数</h3><p>有时候, 你需要给<code>UIApearence</code> 传递参数来完成属性的设置. 比如下面的 <code>UIToolBar</code> :</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setBackgroundImage:(<span class="built_in">UIImage</span> *)backgroundImage </span><br><span class="line">        forToolbarPosition:(<span class="built_in">UIBarPosition</span>)topOrBottom</span><br><span class="line">                barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setShadowImage:(<span class="built_in">UIImage</span> *)shadowImage</span><br><span class="line">    forToolbarPosition:(<span class="built_in">UIBarPosition</span>)topOrBottom;</span><br></pre></td></tr></table></figure>
<p>对应到 <code>Classy</code> 中,格式是:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;propertyName&gt; [&lt;argumentName&gt; : &lt;argumentValue&gt;, ... ]</span><br></pre></td></tr></table></figure>
<ul>
<li>参数的顺序无所谓</li>
<li>删除 前缀 <code>for</code> ,比如  <code>forToolbarPosition</code> 变成 <code>toolbarPosition</code></li>
</ul>
<p>例如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIToolBar</span></span><br><span class="line"><span class="built_in">UIToolBar</span> &#123;</span><br><span class="line">  background-image[barMetrics:landscape-phone, toolbarPosition:top] test_image_4</span><br><span class="line">  shadow-image[barMetrics:landscape-phone, toolbarPosition:bottom] test_image_3</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>如果你省略了枚举,那么将使用枚举的默认值:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIToolBar</span> &#123;</span><br><span class="line">  background-image[toolbarPosition:top] test_image_4</span><br><span class="line">  shadow-image[barMetrics:landscape-phone] test_image_3</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="变量">变量</h3><p>避免重复的做法总是好的. <code>Classy</code>允许定义变量来避免重复 .你可以在整个样式表中使用定义的变量.</p>
<p>变量的规则:</p>
<ul>
<li>字母(大小写均可) 或者 <code>$</code> 开头</li>
<li>数字 字母 <code>_ -</code> 组成</li>
</ul>
<p>前缀 <code>$</code> 是帮助区分变量的, 你可以用或者不用, 比如</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$brand-color = <span class="preprocessor">#e1e1e1</span></span><br><span class="line">insets = <span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="built_in">UIButton</span> &#123;</span><br><span class="line">  background-color $brand-color</span><br><span class="line">  contentEdgeInsets insets</span><br><span class="line">  background-image[state:selected] bg_button insets</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="等式">等式</h3><p>变量和样式属性的值可以包含简单的数学表达式,例如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$corner-radius = <span class="number">2</span> + <span class="number">2</span>$insets = <span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">10</span><span class="built_in">UIButton</span> &#123;</span><br><span class="line">  layer @&#123;</span><br><span class="line">    border-width <span class="number">10</span> - <span class="number">5</span></span><br><span class="line">    corner-radius $corner-radius + <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  contentEdgeInsets $insets * <span class="number">2</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="嵌套">嵌套</h2><p>Classy允许使用嵌套的方式表达对象属性的嵌套关系,例如:<br>“view.layer.borderWidth” 或者 “navigationBar.titleTextAttributes.font”</p>
<p>为了避免选择器和嵌套属性的歧义, 我们需要在嵌套的属性名的后面添加 <code>@</code> 符号.</p>
<p>例如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UINavigationBar</span> &#123;</span><br><span class="line">  title-text-attributes: @&#123;</span><br><span class="line">    font: HelveticaNeue <span class="number">21</span></span><br><span class="line">    foreground-color: magenta</span><br><span class="line">    background-color: red</span><br><span class="line">    ligature: <span class="number">6</span></span><br><span class="line">    kern: <span class="number">0.6</span></span><br><span class="line">    strikethrough-style: single</span><br><span class="line">    underline-style: <span class="keyword">double</span></span><br><span class="line">    stroke-color: blue</span><br><span class="line">    paragraph-style: @&#123;</span><br><span class="line">      line-spacing: <span class="number">20</span></span><br><span class="line">      paragraph-spacing: <span class="number">15</span></span><br><span class="line">      line-<span class="keyword">break</span>-mode:truncatingTail</span><br><span class="line">      alignment:center</span><br><span class="line">    &#125;</span><br><span class="line">    shadow: @&#123;</span><br><span class="line">      shadow-offset: <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">      shadow-blur-radius: <span class="number">10</span></span><br><span class="line">      shadow-color: purple</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>关于 <code>TextAttributes</code>的特别示例</li>
</ul>
<p>如果一个属性是字典,并且这个属性有 “TextAttributes”后缀. 那么这个属性将被认为是<br><code>CASTextAttributes</code></p>
<p><code>{</code> 和 <code>}</code> 是可选的. 例如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span></span><br><span class="line">  background-color <span class="preprocessor">#A2A2A2</span></span><br><span class="line">  layer @</span><br><span class="line">    border-width   <span class="number">2</span></span><br><span class="line">    border-color   <span class="preprocessor">#A1A1A1</span></span><br><span class="line">    corner-radius  <span class="number">8</span></span><br><span class="line">    shadow-color   black</span><br><span class="line">    shadow-offset  <span class="number">9</span>,<span class="number">3</span></span><br><span class="line">    shadow-opacity <span class="number">0.6</span></span><br><span class="line">    shadow-radius  <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h3 id="基本值类型对照表">基本值类型对照表</h3><p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/Classy-PropertiesQQ20150920-2@2x.png"></p>
<p>逗号分隔符</p>
<p>逗号分隔符也是可选的,也就是说: <code>12,13</code>和<code>12 13</code>是一个效果的.</p>
<h3 id="对象值转换表">对象值转换表</h3><p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/Classy-PropertiesQQ20150920-3@2x.png"></p>
<h3 id="枚举值">枚举值</h3><p>使用下面的方式匹配枚举值,比如下面的 <code>UIControlStateNormal</code>,删除枚举名称 <code>UIControlState</code>,换成小写开头,最后变成了 <code>normal</code><br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/Classy-PropertiesQQ20150920-4@2x.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ReactiveCocoa 使用速查]]></title>
      <url>http://yoursite.com/2015/09/05/ReactiveCocoa/ReactiveCocoa-%E4%BD%BF%E7%94%A8%E9%80%9F%E6%9F%A5-1/</url>
      <content type="html"><![CDATA[<h2 id="Context">Context</h2><p>反复接触 <code>ReactiveCocoa</code> ,这次真的准备把它应用到实际开发中了.为了以后使用方便,这里列出一些常用关键字的使用方法,以备查询.</p>
<h2 id="常用方法">常用方法</h2><h3 id="简单订阅_subscribeNext">简单订阅 subscribeNext</h3><p>使用场景:<br>“ 如果你改变了,让我知道 “</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="过滤条件_filter">过滤条件 filter</h3><p>使用场景:</p>
<p>“ 如果你改变了,并且满足x条件, 那么再让我知道 “</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span></span><br><span class="line"></span><br><span class="line">    filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">      <span class="built_in">NSString</span>* text = value;</span><br><span class="line">      <span class="keyword">return</span> text<span class="variable">.length</span> &gt; <span class="number">4</span>;</span><br><span class="line">    &#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>还有拆分的写法,因为 block层级太深 ,可读性不好:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RACSignal* usernameSourceSignal = <span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span>;</span><br><span class="line"></span><br><span class="line">RACSignal* filteredUsernameSignal =</span><br><span class="line">    [usernameSourceSignal filter:^<span class="built_in">BOOL</span>(<span class="keyword">id</span> value) &#123;</span><br><span class="line">      <span class="built_in">NSString</span>* text = value;</span><br><span class="line">      <span class="keyword">return</span> text<span class="variable">.length</span> &gt; <span class="number">3</span>;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">[filteredUsernameSignal subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="类型转换_map">类型转换 map</h3><p>使用场景:</p>
<p>当需要从输入信号中提取不同的信息时(比如这里, 从打印下个字符,到打印长度)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span></span><br><span class="line">    map:^<span class="keyword">id</span>(<span class="built_in">NSString</span>* value) &#123;</span><br><span class="line">   <span class="keyword">return</span> @(value<span class="variable">.length</span>);</span><br><span class="line"> &#125;] filter:^<span class="built_in">BOOL</span>(<span class="built_in">NSNumber</span>* value) &#123;</span><br><span class="line">   <span class="keyword">return</span> [value integerValue] &gt; <span class="number">4</span>;</span><br><span class="line"> &#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure>
<ul>
<li>注意: 可 map 的只能是对象</li>
</ul>
<h3 id="RAC_宏">RAC 宏</h3><p>使用场景:  RAC(A,b)<br>利用信号改变 A 的 b 属性值</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证信号</span></span><br><span class="line">RACSignal *validUsernameSignal =</span><br><span class="line"> [<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span></span><br><span class="line"> map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *text) &#123;</span><br><span class="line"> <span class="keyword">return</span> @([<span class="keyword">self</span> isValidUsername:text]);</span><br><span class="line"> &#125;]; </span><br><span class="line"></span><br><span class="line">RAC(<span class="keyword">self</span><span class="variable">.usernameTextField</span>, backgroundColor) =</span><br><span class="line">  [validUsernameSignal</span><br><span class="line">    map:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *passwordValid)&#123;</span><br><span class="line">     <span class="keyword">return</span>[passwordValid boolValue] ? [<span class="built_in">UIColor</span> clearColor]:[<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
<h3 id="聚合信号_combineLatest">聚合信号 combineLatest</h3><p>使用场景:<br>多个信号条件同时满足, 才能产生有效信号(比如登陆的时候,用户名有效并且密码有效的时候,登陆按钮才应该有效)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *signUpActiveSignal =</span><br><span class="line">  [</span><br><span class="line">  RACSignal combineLatest:@[validUsernameSignal, validPasswordSignal]</span><br><span class="line">                    reduce:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *usernameValid, <span class="built_in">NSNumber</span> *passwordValid)&#123;</span><br><span class="line">                      <span class="keyword">return</span> @([usernameValid boolValue]&amp;&amp;[passwordValid boolValue]);</span><br><span class="line">                    &#125;</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure>
<ul>
<li>使用combineLatest:reduce:方法把validUsernameSignal和validPasswordSignal产生的最新的值聚合在一起，并生成一个新的信号。每次这两个源信号的任何一个产生新值时，reduce block都会执行，block的返回值会发给下一个信号。</li>
</ul>
<h3 id="事件信号">事件信号</h3><p>使用场景:<br>拿到UIKit控件的事件响应信号</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="keyword">self</span><span class="variable">.signInButton</span></span><br><span class="line">   rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"button clicked"</span>);</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
<h3 id="封装方法">封装方法</h3><p>使用场景:</p>
<p>想把一个异步的API 封装成信号</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (RACSignal *)signInSignal &#123;</span><br><span class="line"><span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber)&#123;</span><br><span class="line">   [<span class="keyword">self</span><span class="variable">.signInService</span> </span><br><span class="line">     signInWithUsername:<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.text</span></span><br><span class="line">               password:<span class="keyword">self</span><span class="variable">.passwordTextField</span><span class="variable">.text</span></span><br><span class="line">               complete:^(<span class="built_in">BOOL</span> success)&#123;</span><br><span class="line">                    [subscriber sendNext:@(success)];</span><br><span class="line">                    [subscriber sendCompleted];</span><br><span class="line">     &#125;];</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拿到信号中的信号_flattenMap">拿到信号中的信号 flattenMap</h3><p>使用场景:</p>
<p>当需要从包含信号b的信号a中拿取信号b</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="keyword">self</span><span class="variable">.signInButton</span></span><br><span class="line">   rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>]</span><br><span class="line">   flattenMap:^<span class="keyword">id</span>(<span class="keyword">id</span> x)&#123;</span><br><span class="line">     <span class="keyword">return</span>[<span class="keyword">self</span> signInSignal];</span><br><span class="line">   &#125;]</span><br><span class="line">   subscribeNext:^(<span class="keyword">id</span> x)&#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"Sign in result: %@"</span>, x);</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
<h3 id="添加附加操作（Adding_side-effects）">添加附加操作（Adding side-effects）</h3><p>使用场景:<br>需要进行一些准备工作的时候</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[[[[<span class="keyword">self</span><span class="variable">.signInButton</span></span><br><span class="line">   rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>]</span><br><span class="line">   doNext:^(<span class="keyword">id</span> x)&#123;</span><br><span class="line">     <span class="keyword">self</span><span class="variable">.signInButton</span><span class="variable">.enabled</span> =<span class="literal">NO</span>;</span><br><span class="line">     <span class="keyword">self</span><span class="variable">.signInFailureText</span><span class="variable">.hidden</span> =<span class="literal">YES</span>;</span><br><span class="line">   &#125;]</span><br><span class="line">   flattenMap:^<span class="keyword">id</span>(<span class="keyword">id</span> x)&#123;</span><br><span class="line">     <span class="keyword">return</span>[<span class="keyword">self</span> signInSignal];</span><br><span class="line">   &#125;]</span><br><span class="line">   subscribeNext:^(<span class="built_in">NSNumber</span>*signedIn)&#123;</span><br><span class="line">     <span class="keyword">self</span><span class="variable">.signInButton</span><span class="variable">.enabled</span> =<span class="literal">YES</span>;</span><br><span class="line">     <span class="built_in">BOOL</span> success =[signedIn boolValue];</span><br><span class="line">     <span class="keyword">self</span><span class="variable">.signInFailureText</span><span class="variable">.hidden</span> = success;</span><br><span class="line">     <span class="keyword">if</span>(success)&#123;</span><br><span class="line">       [<span class="keyword">self</span> performSegueWithIdentifier:<span class="string">@"signInSuccess"</span> sender:<span class="keyword">self</span>];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
<h3 id="移除订阅_dispose">移除订阅 dispose</h3><p>使用场景:</p>
<p>当需要手动释放一个信号(当没有订阅,信号就不复存在),但是使用场景很少,仅供了解</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *backgroundColorSignal =</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.searchText</span><span class="variable">.rac_textSignal</span> </span><br><span class="line">        map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *text) &#123; </span><br><span class="line">            <span class="keyword">return</span> [<span class="keyword">self</span> isValidSearchText:text] ? </span><br><span class="line">                [<span class="built_in">UIColor</span> whiteColor] : [<span class="built_in">UIColor</span> yellowColor]; </span><br><span class="line">    &#125;]; </span><br><span class="line">    </span><br><span class="line">RACDisposable *subscription = </span><br><span class="line">    [backgroundColorSignal </span><br><span class="line">        subscribeNext:^(<span class="built_in">UIColor</span> *color) &#123;</span><br><span class="line">            <span class="keyword">self</span><span class="variable">.searchText</span><span class="variable">.backgroundColor</span> = color; </span><br><span class="line">    &#125;]; </span><br><span class="line">    </span><br><span class="line"><span class="comment">// at some point in the future ... </span></span><br><span class="line">[subscription dispose];﻿​</span><br></pre></td></tr></table></figure>
<h3 id="防止循环引用">防止循环引用</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@weakify(<span class="keyword">self</span>) </span><br><span class="line">[[<span class="keyword">self</span><span class="variable">.searchText</span><span class="variable">.rac_textSignal</span> </span><br><span class="line">    map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *text) &#123; </span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> isValidSearchText:text] ? </span><br><span class="line">            [<span class="built_in">UIColor</span> whiteColor] : [<span class="built_in">UIColor</span> yellowColor]; </span><br><span class="line">    &#125;] </span><br><span class="line">    subscribeNext:^(<span class="built_in">UIColor</span> *color) &#123; </span><br><span class="line">        @strongify(<span class="keyword">self</span>) </span><br><span class="line">        <span class="keyword">self</span><span class="variable">.searchText</span><span class="variable">.backgroundColor</span> = color; </span><br><span class="line">    &#125;];﻿​</span><br></pre></td></tr></table></figure>
<h3 id="next_error_completed">next error completed</h3><p>在signal的生命周期中，它可能不发送事件，发送一个或多个next事<br>件，在这之后还能发送一个completed事件或一个error事件。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="keyword">self</span> requestAccessToTwitterSignal] </span><br><span class="line">    subscribeNext:^(<span class="keyword">id</span> x) &#123; </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Access granted"</span>); </span><br><span class="line">    &#125; error:^(<span class="built_in">NSError</span> *error) &#123; </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"An error occurred: %@"</span>, error); </span><br><span class="line">    &#125;];﻿​</span><br></pre></td></tr></table></figure>
<h3 id="信号链接_then">信号链接 then</h3><p>使用场景:<br>当后面的信号需要依赖前面的信号时</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="keyword">self</span> requestAccessToTwitterSignal] </span><br><span class="line">    then:^RACSignal *&#123; </span><br><span class="line">        @strongify(<span class="keyword">self</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.searchText</span><span class="variable">.rac_textSignal</span>; </span><br><span class="line">    &#125;] </span><br><span class="line">    subscribeNext:^(<span class="keyword">id</span> x) &#123; </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x); </span><br><span class="line">    &#125; error:^(<span class="built_in">NSError</span> *error) &#123; </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"An error occurred: %@"</span>, error); </span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<ul>
<li><p>then方法会等待completed事件的发送，然后再订阅由then block返回的signal。这样就高效地把控制权从一个signal传递给下一个。</p>
</li>
<li><p>then方法会跳过error事件，因此最终的subscribeNext:error:  block还是会收到获取访问权限那一步发送的error事件。</p>
</li>
</ul>
<h3 id="异步信号">异步信号</h3><p>使用场景:<br>后台加载资源</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-(RACSignal *)signalForLoadingImage:(<span class="built_in">NSString</span> *)imageUrl &#123; </span><br><span class="line"></span><br><span class="line">    RACScheduler *scheduler = [RACScheduler </span><br><span class="line">        schedulerWithPriority:RACSchedulerPriorityBackground]; </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> [[RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span> subscriber) &#123; </span><br><span class="line">    </span><br><span class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:[<span class="built_in">NSURL</span> URLWithString:imageUrl]]; </span><br><span class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data]; </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        [subscriber sendNext:image]; </span><br><span class="line">        [subscriber sendCompleted]; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>; </span><br><span class="line">    &#125;] subscribeOn:scheduler]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>subscribeOn：来确保signal在指定的scheduler上执行。</li>
</ul>
<h3 id="在主线程上更新UI">在主线程上更新UI</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cell<span class="variable">.twitterAvatarView</span><span class="variable">.image</span> = <span class="literal">nil</span>; </span><br><span class="line"> </span><br><span class="line">[[[<span class="keyword">self</span> signalForLoadingImage:tweet<span class="variable">.profileImageUrl</span>] </span><br><span class="line">    deliverOn:[RACScheduler mainThreadScheduler]] </span><br><span class="line">    subscribeNext:^(<span class="built_in">UIImage</span> *image) &#123; </span><br><span class="line">        cell<span class="variable">.twitterAvatarView</span><span class="variable">.image</span> = image; </span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<p>针对cell的重用问题, 有种更优化的方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[[[<span class="keyword">self</span> signalForLoadingImage:tweet<span class="variable">.profileImageUrl</span>] </span><br><span class="line">    takeUntil:cell<span class="variable">.rac_prepareForReuseSignal</span>] </span><br><span class="line">    deliverOn:[RACScheduler mainThreadScheduler]] </span><br><span class="line">    subscribeNext:^(<span class="built_in">UIImage</span> *image) &#123; </span><br><span class="line">        cell<span class="variable">.twitterAvatarView</span><span class="variable">.image</span> = image; </span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<h3 id="延时响应_throttle">延时响应 throttle</h3><p>使用场景:   </p>
<p>当用户输入完毕, 自定进行搜索的时候,不应该用户每次改变输入,都马上搜索,应该当用户停止输入 x 秒之后,再进行搜索</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@weakify(<span class="keyword">self</span>);</span><br><span class="line">[[<span class="keyword">self</span><span class="variable">.passwordTextField</span><span class="variable">.rac_textSignal</span> throttle:<span class="number">2</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">  @strongify(<span class="keyword">self</span>);</span><br><span class="line">  <span class="keyword">self</span><span class="variable">.hintLabel</span><span class="variable">.text</span> = (<span class="built_in">NSString</span>*)x;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>参考网址:<br><a href="http://www.raywenderlich.com/62699/reactivecocoa-tutorial-pt1" target="_blank" rel="external">http://www.raywenderlich.com/62699/reactivecocoa-tutorial-pt1</a><br><a href="http://benbeng.leanote.com/post/ReactiveCocoaTutorial-part1" target="_blank" rel="external">http://benbeng.leanote.com/post/ReactiveCocoaTutorial-part1</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单实现控制器过渡动画]]></title>
      <url>http://yoursite.com/2015/08/29/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%8E%A7%E5%88%B6%E5%99%A8%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>自己实现控制器动画的方法,还是比较常见的. 这个是    <code>UINavigationController</code>的 <code>Push</code> 和 <code>Dismiss</code> 动画.<br><a id="more"></a></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  GUIViewController.m</span></span><br><span class="line"><span class="comment">//  GUIControllerTransitionDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenny on 8/29/15.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015 Kenny. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIHeader.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUISubViewController.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUIViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">weak</span>)<span class="built_in">UIButton</span> * pushButton;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUIViewController</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -life cycle</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = G<span class="built_in">UIRandomColor</span>;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> configPushButton];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -  delegate</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -event response</span></span><br><span class="line">-(<span class="keyword">void</span>)pushNewController:(<span class="built_in">UIButton</span>*)button&#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UISubViewController</span> * subVC = [G<span class="built_in">UISubViewController</span> new];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:subVC animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark -private methods</span></span><br><span class="line">-(<span class="keyword">void</span>)configPushButton&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIButton</span> * pushButton = [<span class="built_in">UIButton</span> new];</span><br><span class="line">    [pushButton setTitle:<span class="string">@"push new controller button"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [pushButton setBackgroundColor:G<span class="built_in">UIRandomColor</span>];</span><br><span class="line">    [pushButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pushNewController:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:pushButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.pushButton</span> = pushButton;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -getters and setters</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - layout method</span></span><br><span class="line">-(<span class="keyword">void</span>)viewWillLayoutSubviews&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillLayoutSubviews];</span><br><span class="line">    </span><br><span class="line">    WSE(ws);</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.pushButton</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(G<span class="built_in">UIScreenWidth</span>, <span class="number">30</span>));</span><br><span class="line">        make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">        make<span class="variable">.bottom</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>)<span class="variable">.with</span><span class="variable">.offset</span>(-<span class="number">100</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然后在 AppDelegate中,为控制器包装一个导航控制器</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">   </span><br><span class="line">    G<span class="built_in">UIViewController</span> * vc = [G<span class="built_in">UIViewController</span> new];</span><br><span class="line">    <span class="built_in">UINavigationController</span> * nav = [[<span class="built_in">UINavigationController</span> alloc]initWithRootViewController:vc];</span><br><span class="line">    [application<span class="variable">.delegate</span> window]<span class="variable">.rootViewController</span> = nav;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上纯碎是简单的布局代码,和主题无关.</p>
<p>接下来进入正题:</p>
<p>在Apple的设计中, 实现自定义的切换动画,依赖的是协议中的方法,而不是具体的对象的具体方法,所以我们需要创建一个类</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUINavigationControllerDelegate</span> : <span class="title">NSObject</span>&lt;<span class="title">UINavigationControllerDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>.m 文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"GUINavigationControllerDelegate.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUINavigationControllerDelegate</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"></span><br><span class="line">    当控制器切换的时候被调用,返回一个没有交互性的动画对象</span><br><span class="line"> *</span><br><span class="line"> *  @param navigationController 导航控制器</span><br><span class="line"> *  @param operation            操作</span><br><span class="line"> *  @param fromVC               当前控制器</span><br><span class="line"> *  @param toVC                 目标控制器</span><br><span class="line"> *</span><br><span class="line"> *  @return 动画对象</span><br><span class="line"> */</span></span><br><span class="line">-(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController animationControllerForOperation:(<span class="built_in">UINavigationControllerOperation</span>)operation fromViewController:(<span class="built_in">UIViewController</span> *)fromVC toViewController:(<span class="built_in">UIViewController</span> *)toVC&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>描述的非常明确了, 那么现在我们需要一个动画对象,这个对象需要遵守<code>UIViewControllerAnimatedTransitioning</code>协议</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  GUIAnimator.h</span></span><br><span class="line"><span class="comment">//  GUIControllerTransitionDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenny on 8/29/15.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015 Kenny. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUIAnimator</span> : <span class="title">NSObject</span> &lt;<span class="title">UIViewControllerAnimatedTransitioning</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>具体的实现</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  GUIAnimator.m</span></span><br><span class="line"><span class="comment">//  GUIControllerTransitionDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenny on 8/29/15.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015 Kenny. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIAnimator.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUIAnimator</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  动画执行时间</span><br><span class="line"> *</span><br><span class="line"> *  @param transitionContext 过渡动画上下文环境</span><br><span class="line"> *</span><br><span class="line"> *  @return 动画时长</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  具体动画行为</span><br><span class="line"> *</span><br><span class="line"> *  @param transitionContext 过渡动画上下文环境</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将要切换到的控制器</span></span><br><span class="line">    <span class="built_in">UIViewController</span>* toViewController = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];</span><br><span class="line">    <span class="comment">//当前的控制器</span></span><br><span class="line">    <span class="built_in">UIViewController</span>* fromViewController = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextFromViewControllerKey</span>];</span><br><span class="line">    <span class="comment">//container view充当一个虚拟的superView的角色</span></span><br><span class="line">    [[transitionContext containerView] addSubview:toViewController<span class="variable">.view</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置初始状态</span></span><br><span class="line">    toViewController<span class="variable">.view</span><span class="variable">.alpha</span> = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:[<span class="keyword">self</span> transitionDuration:transitionContext] animations:^&#123;</span><br><span class="line">        fromViewController<span class="variable">.view</span><span class="variable">.transform</span> = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">0.1</span>, <span class="number">0.1</span>);</span><br><span class="line">        toViewController<span class="variable">.view</span><span class="variable">.alpha</span> = <span class="number">1</span>;</span><br><span class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">        </span><br><span class="line">         fromViewController<span class="variable">.view</span><span class="variable">.transform</span> = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通知系统,过渡已经完成</span></span><br><span class="line">        [transitionContext completeTransition:![transitionContext transitionWasCancelled]];</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>注释已经写的非常清楚,在此不再赘述.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于代码控制屏幕方向]]></title>
      <url>http://yoursite.com/2015/08/26/iOS%20Tips/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E6%8E%A7%E5%88%B6%E5%B1%8F%E5%B9%95%E6%96%B9%E5%90%91/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>今天同学提了一个需求,希望在 <code>NavigationController</code>管理的控制器中,实现 <code>Push</code>出的控制器是横屏,然后前一个控制器是竖屏的.</p>
<p>听到这么说, 很简单的想到使用代码控制器屏幕方向,(当然,需要首先在项目的 plist中允许屏幕的多个方向)<br><a id="more"></a></p>
<h2 id="尝试">尝试</h2><p>经过查找相关资料, 锁定了三个方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">BOOL</span>)shouldAutorotate&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSUInteger</span>)supportedInterfaceOrientations&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortrait</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">UIInterfaceOrientation</span>)preferredInterfaceOrientationForPresentation&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationPortrait</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>第一个方法: 允许自动旋转 ,返回 NO </p>
</li>
<li><p>第二个方法: 当前屏幕支持的方向,默认是 <code>UIInterfaceOrientationMaskAll</code> ,即支持所有在Xcode工程中标注的方向.在这返回竖屏,意为让其竖屏显示</p>
</li>
<li><p>第三个方法: 当控制器推出方法是<code>Present</code>的时候,优先选择的方向,注意,这个只是优先选择的方向, 当显示完毕,用户继续旋转手机的时候,还是会自动根据用户手机方向进行变化的.</p>
</li>
</ul>
<h2 id="坑">坑</h2><p>方法准备完毕, 但是当用在同学的需求上时候,发现根本不起作用 .前一个控制器的状态,会影响后面的控制器. </p>
<p>后来查找相关资料, 虽然原因没找到, 但是大家都是遇到了这个问题.</p>
<p>个人猜想是,NavigationController是全局的容器,控制器本身并不能影响它的行为.</p>
<h2 id="验证">验证</h2><p>继承系统的<code>NavgationController</code> ,添加以下方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">BOOL</span>)shouldAutorotate&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSUInteger</span>)supportedInterfaceOrientations&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortrait</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>旋屏屏幕, 发现在 Xcode中设置的屏幕方向没用了,现在只能是竖屏.</p>
<h2 id="妥协">妥协</h2><p>鉴于上面遇到的坑, 所以更改推出控制器的方式为 Present ,即让控制器脱离<code>NavigationController</code>的管理 ,就像咱播放视频的时候, 视频自动横屏, 但是不是在Navigation的管理下.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谁让APP工程师产生了泡沫？]]></title>
      <url>http://yoursite.com/2015/08/22/%E6%82%9F/%E8%B0%81%E8%AE%A9APP%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%BA%A7%E7%94%9F%E4%BA%86%E6%B3%A1%E6%B2%AB%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>这两年移动互联网比较火，移动APP的开发人员也是比较紧缺。</p>
<p>　　面试了一个做APP的，能力很一般，态度也比较傲慢。最后感觉肯定不会用这个人了，但是出于验证自己想法的目的，还是很诚恳地以一个决定录取他的态度，和他交谈。</p>
<p>　　“刚才我问了你一些问题，可能比较偏，或者不是你所擅长的。我也是本着为公司负责的态度，问一些我们经常用到的问题。这一点请见谅。”，我说。</p>
<p>　　他说：“没事的，问的确实有点偏。实际工作中，根本用不到，用到了现查就行，网上好多例子，复制粘贴都能搞定！”。<br> <a id="more"></a><br>　　我说，我们企业招一个人，你入职一个企业，是一个相互选择的事情。我问完你了，你对我们公司有什么想了解的。</p>
<p>　　他有点发楞，停顿了一会。我提示他，公司的业务发展，个人的提升空间，你的职业规划？</p>
<p>　　他说，噢，咱们公司是做什么的？</p>
<p>　　我回答道，我们主业务是做基于社区的O2O平台的，现在业务有几块，深度垂直做上门推拿服务，打通商家上下游做云商供应链，最终将打造一个庞大的社区服务生态体系。</p>
<p>　　他似乎没有听懂，依然发楞。</p>
<p>　　“还有什么想问的吗？”我问。</p>
<p>　　他似乎早想问，一直不好意思问，但是又不想在这浪费时间了，问道：“公司都有什么福利，年终奖是多少，加班费怎么算……”。</p>
<p>　　我都一一回答了。</p>
<p>　　沉默了一会。</p>
<p>　　我问道：“你能接受的最低待遇是多少？”</p>
<p>　　他说，就是简历上写的那些。</p>
<p>　　我死死地盯着他：“如果我给你降一千你愿意吗？”</p>
<p>　　他摇了摇头。</p>
<p>　　“降五百呢？”</p>
<p>　　他回答说：“我已经面试了四五家公司了，他们都要我，我也答应了。现在就是再面试几家，看看哪家更高。所以，我没必要……”，他向我耸肩，然后不说了。</p>
<p>　　我说，你要的这个数，在我们公司不算高，好多人都拿的比这个多呢。你去过的那几家公司，多少人？</p>
<p>　　他说，也得有，差不多，估计一百多人吧。</p>
<p>　　我问，做APP的多少人？</p>
<p>　　他回答，一两个，有的没有，我去了是第一个。</p>
<p>　　谁面试的你，我问。</p>
<p>　　有的是经理，有的是老板，都很希望我能快点入职。</p>
<p>　　我说，好的，我们会把你面试的情况和你做的作品评估一下，然后再联系你。</p>
<p>　　他走了。</p>
<p>　　这不是个例。</p>
<p>　　大多数年轻人都差不多这样。</p>
<p>　　他们没房没车没压力，以单纯的收入高低作为亲友间的炫耀和比较的资本。</p>
<p>　　让我陷入沉思的是，为什么一个近乎只能称得上操作和修理工的人，却顶着一个工程师的名号，可以到处要高价，而且还真有公司愿意给。享受能力所不匹配的东西，这显然是一种病态，结果必定可悲。谁赋予了他们这样的优厚际遇？或者，谁成心想害他们？</p>
<p>　　答案是这个飞速发展时代和无可奈何的企业。</p>
<p>　　移动互联网，这五个字可谓炙手可热。互联网+，又让这热度增上三分。好多公司都想搭上这艘船，捞一桶金，弄不巧还会成就一番霸业。</p>
<p>　　怎么搞？好多人都觉得移动互联网就是个APP。想踏入移动互联网，首先要搞一个APP出来，拿出去好说话嘛！这种想法就像是，我研发个POS机有一家银行了能做金融了一样。你的POS机之所以能刷卡转移资金，是因为后面还有一个银行体系支撑，来了钱给谁，扣的钱从哪里出，是有一套服务做支撑的。这套服务，相比一个POS机而言，大象和蚂蚁的关系。还不明白的话，去五金店买一个淋浴头，在太阳下试试会不会喷水，那个淋浴头就是业务中的APP。</p>
<p>　　好多小企业老板很明白政治和经济局势，但是不明白技术，他们觉得第一步先需要APP，其他的根据需求再说。于是，他们老板甚至亲自面试，随便聊聊天，要多少给多少就招进来了，先有人开个头再说呗。最后，发现不是这么一回事，有了淋浴头了还需要水管才能喷水，自己建供水系统太大，在小区建使用人群太少，连接卫生间的水管，跟自己又没啥关系。命长公司的干上半年，招的人也不专业，凑合随便弄一个出来，员工感觉老板瞎弄没有成就感，老板也感觉看错了人不出成绩。于是，一拍两散。</p>
<p>　　出来的这人再换工作，感觉自己没有被完全发挥出来，现在工作经验也涨了，薪水肯定也得涨。于是，又找到一个公司，老板一看，这人以前待遇都那么高，那老板肯定不傻，做了那么久了也有成果，我这又急需要人，再涨一段吧。这个公司干半年，和上一个公司一样循环，直到一个顶点。</p>
<p>　　这就造成了，个人技术没有实质提高，待遇却虚高。公司支出增加了，回报却没有增加。</p>
<p>　　这就是泡沫啊，在慢慢膨胀的泡沫。这泡沫在小企业中很明显，在中型以上企业中不明显。第一，因为中型企业都有专业的人才，这些人能判断和规划整个业务体系，不至于盲目。第二，也正是由于规范和专业，所以吸引了很多更看良性成长环境的有志之士。</p>
<p>　　泡沫，毕竟是泡沫，终有爆破的那一天。这个时间不会很长，3到5年。随着新技术慢慢变旧（当Android和IOS变成和C语言一样老），随着大批量的人才涌入和一些公司退出（十万开发者面对一千岗位），随着很多老板慢慢发现原理和真相（APP真的只是个终端）。我们再来设定一下，曾经那些在小公司频繁蹦来跳去的人，和那些在成熟部门茁壮成长的人，他们命运是不是会发生颠覆性的改变。</p>
<p>　　互联网行业不同于传统行业，不存在第二。最终的局面是巨头垄断和精细化小企业填补的局面。</p>
<p>　　其实公司和人历程都一样，都会遇到千奇百怪的事情，但是殊途同归平淡是真，最终都要踏实笃行。你一步一步地走，你眼看别人起高楼，你眼看别人宴宾客，你也眼看别人楼倒塌。</p>
<p>　　你也可以心想自己建起一座壁垒，固若金汤，经久不衰，称为经典。<br>　　<br>　　文章来源 <a href="http://www.cnblogs.com/yinrq/p/4745784.html" target="_blank" rel="external">http://www.cnblogs.com/yinrq/p/4745784.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[利用Runtime实现自依赖按钮]]></title>
      <url>http://yoursite.com/2015/08/19/iOS%20Tips/%E5%88%A9%E7%94%A8Runtime%E5%AE%9E%E7%8E%B0%E8%87%AA%E4%BE%9D%E8%B5%96%E6%8C%89%E9%92%AE/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>我在开发中遇到一个问题, 就是传统的<code>Target-Action</code>没法满足我的要求. 因为当按钮触发的瞬间, 控制器可能已经被销毁了. <code>Target</code>没有了. 暂且不说这个设计的优劣, 单纯从技术方面,剖析一下是否可以实现一个按钮 ,这个按钮不依赖外部 <code>Target</code> ,而是依赖自己.</p>
<h2 id="几个想法">几个想法</h2><p>首先想到的是继承<code>UIButton</code>,然后给<code>Button</code>增加一个<code>block</code>属性 ,然后内部执行<code>block</code>代码.</p>
<p>但是这样要求我项目中所有使用UIButton的地方都需要修改 ,成本太高,遂放弃.</p>
<p>然后想到通过给<code>UIButton</code>添加<code>Category</code>的方式,完成需求. 之前曾经做个一个分类,就是让<code>NSObject</code>携带一个字典,字典内部可以带上用户自定义的一些参数.解决了一些<code>seletor</code>不能传递任意参数的问题. 所以,这次给<code>Button</code>分类增加个属性,也没有什么问题:</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^ActionCodeBlock)();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIButton</span>(<span class="title">Block</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>) handleControlEvent:(<span class="built_in">UIControlEvents</span>)controlEvent withBlock:(ActionCodeBlock)action;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>定义了一个没有返回值的<code>block</code>作为参数, 然后暴露一个方法供外部调用.</p>
<p>然后 .m 文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> identifier = <span class="string">'g'</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)handleControlEvent:(<span class="built_in">UIControlEvents</span>)event withBlock:(ActionCodeBlock)codeBlock &#123;</span><br><span class="line">    </span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;identifier, codeBlock, OBJC_ASSO<span class="built_in">CIATION_COPY_NONATOMIC</span>);</span><br><span class="line">    [<span class="keyword">self</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(callActionCodeBlock:) forControlEvents:event];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用<code>Runtime</code>动态给对象(self)添加一个<code>codeBlock</code>,使用的内存管理机制(关联策略)是<code>OBJC_ASSOCIATION_COPY_NONATOMIC</code>.</p>
<p>关于关联策略,有以下几种:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OBJC_ASSO<span class="built_in">CIATION_ASSIGN</span>	 <span class="keyword">@property</span> (<span class="keyword">assign</span>) or <span class="keyword">@property</span> (unsafe_unretained)	弱引用关联对象</span><br><span class="line"></span><br><span class="line">OBJC_ASSO<span class="built_in">CIATION_RETAIN_NONATOMIC</span>	<span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>)	强引用关联对象，且为非原子操作</span><br><span class="line"></span><br><span class="line">OBJC_ASSO<span class="built_in">CIATION_COPY_NONATOMIC</span>	<span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>)	复制关联对象，且为非原子操作</span><br><span class="line"></span><br><span class="line">OBJC_ASSO<span class="built_in">CIATION_RETAIN</span>	<span class="keyword">@property</span> (<span class="keyword">strong</span>, atomic)	强引用关联对象，且为原子操作</span><br><span class="line"></span><br><span class="line">OBJC_ASSO<span class="built_in">CIATION_COPY</span>	<span class="keyword">@property</span> (<span class="keyword">copy</span>, atomic)	复制关联对象，且为原子操作</span><br></pre></td></tr></table></figure>
<p>有开发经验的人都明白其中的意思,在此不再赘述. </p>
<p>然后, 给自己添加了一个<code>Target-Action</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(callActionCodeBlock:) forControlEvents:event];</span><br></pre></td></tr></table></figure>
<p>最后,实现 <code>selector</code>,代码如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)callActionCodeBlock:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    ActionCodeBlock codeBlock = (ActionCodeBlock)objc_getAssociatedObject(<span class="keyword">self</span>, &amp;identifier);</span><br><span class="line">    <span class="keyword">if</span> (codeBlock) &#123;</span><br><span class="line">        codeBlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>objc_getAssociatedObject</code> 拿到self中的 identifier为<code>g</code> 的对象(block),然后如果block存在,则执行.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[更换电脑引发的MODULE_NOT_FOUND]]></title>
      <url>http://yoursite.com/2015/08/18/%E4%B8%BB%E9%A1%B5%E7%BB%B4%E6%8A%A4%E8%AE%B0%E5%BD%95/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%BC%95%E5%8F%91%E7%9A%84MODULE-NOT-FOUND/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>今天把原来放在公司电脑上的博客拷贝回来 , 但是使用<code>hexo n</code>命令的时候,提示如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KennydeMacBook-Pro:guiqingblog.github.io kenny$ hexo n "利用Runtime实现自依赖按钮"</span><br><span class="line">[Error: Module did not self-register.]</span><br><span class="line">&#123; [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;</span><br><span class="line">&#123; [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;</span><br><span class="line">INFO  Created: ~/Portable/guiqingblog.github.io/source/_posts/利用Runtime实现自依赖按钮.md</span><br></pre></td></tr></table></figure>
<p>打开 <code>_post</code> 目录,发现文件是创建了 .但是无缘故报错, 总觉的心理不舒服. 其实, 上次遇到过这个问题 ,经过很长时间的搜索, 终于在一个台湾同胞的博客上找到了方案,但是时间太久了,没找到 . 更可气的是 ,对这样的问题, 自己居然没有在 wiznote 或者博客上记录 !</p>
<p>无奈,只能重新搜索, 但是这次好运多了, 第一条就是相关内容, 是简书上一个书友写的,<a href="http://www.jianshu.com/p/98e993305653" target="_blank" rel="external">这里是原文</a>,而且他也注明了来源,我进去一看,和之前的一样…</p>
<h2 id="反思">反思</h2><p>本身这个问题这次没有浪费时间,一分钟就解决了 . 但是反应出一个问题: 自己懒惰的问题 . 如果没有简书作者, 那自己岂不是又要花费半个小时,一个小时去找这个资料 ? 这样的时间成本谁来负责 ? 所以以后要求自己 ,觉得好的东西就要立刻记下来 ,决不能偷懒 !</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swift的编译标记]]></title>
      <url>http://yoursite.com/2015/08/18/Swift/Swift%E7%9A%84%E7%BC%96%E8%AF%91%E6%A0%87%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="Context">Context</h2><p>在OC 中, 我经常使用 <code>#Param</code>来给控制器划分代码结构 , 比如 ,一个控制器,我经常分为如下的结构:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#pragma mark -life cycle</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - <span class="title">&lt;#name#&gt;</span> delegate</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -event response</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -private methods</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -getters and setters</span></span><br></pre></td></tr></table></figure>
<p>这样的好处是, 每个控制器的结构都是规范的. 如图, 方法都分类了(对于我这样的Vim控 ,还能实现在标签之间的跳转)<br><a id="more"></a></p>
<p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/template-refactoringQQ20150806-7@2x.png" alt="代码结构"></p>
<p>在协作开发中 , 阅读代码的成本大大降低.</p>
<h2 id="Swift_的编译标记">Swift 的编译标记</h2><p>在Swift 中也有类似的方式, 我们可以使用 <code>// MARK:</code> 这样的标记,并且在后面写上描述, 这样Xcode 将在导航栏的中用标签的形式区分出这些标记.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class ViewController: <span class="built_in">UIViewController</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// MARK: life cycle</span></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        <span class="keyword">super</span><span class="variable">.viewDidLoad</span>()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// MARK: Warning</span></span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        <span class="keyword">super</span><span class="variable">.didReceiveMemoryWarning</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样,在Swift中得表现如图:</p>
<p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/Swift的编译标记QQ20150818-1@2x.png" alt=""></p>
<p>我们还能在 <code>:</code>的后面加一个 ‘-‘,这样导航中会再多一条横线,隔开各个部分</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class ViewController: <span class="built_in">UIViewController</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// MARK:- life cycle</span></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        <span class="keyword">super</span><span class="variable">.viewDidLoad</span>()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// MARK:- Warning</span></span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        <span class="keyword">super</span><span class="variable">.didReceiveMemoryWarning</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如图:</p>
<p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/Swift的编译标记QQ20150818-2@2x.png" alt=""></p>
<p>还有 todo 和 fixme ,我们可以用来表示要坐得事情 和需要改正的地方.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> this is to do</span></span><br><span class="line">    func todo()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> you need fix me</span></span><br><span class="line">    func fixMe()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>效果如图:<br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/Swift的编译标记QQ20150818-3@2x.png" alt=""></p>
<p>可以看到, 与 MARK 相比 , TODO 和 FIXME 的本身也被显示出来了, 能更好地表明用意.</p>
<h2 id="一个Warning">一个Warning</h2><p>在OC 中,我们用的更多的是 #Warning ,来提示自己这里需要更改或者有问题需要修改, 但是 Swift中暂时没有类似的关键字. 算是比较遗憾的.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[由一个正则引出的 NSPredicate]]></title>
      <url>http://yoursite.com/2015/08/13/iOS%20Tips/%E7%94%B1%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%88%99%E5%BC%95%E5%87%BA%E7%9A%84NSPredicate/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>今天需要用到一个正则,正则本身很简单,就是功能是限制<code>UITextField</code>只能输入数字,仅仅限制键盘类型是不够的.</p>
<p>正则 <code>^[0-9]*$</code> ,说到这里了,顺便记录一下,匹配中文的正则表达式是: <code>[\u4e00-\u9fa5]</code></p>
<p>根据自己以前的知识,iOS有专门的正则表达式类. 一般的步骤是这样的:<br><a id="more"></a><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *searchText = <span class="string">@"source Strings "</span>;    </span><br><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">NSRegularExpression</span> *regex = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:<span class="string">@"(?:[^,])*\\."</span> options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:&amp;error];</span><br><span class="line"><span class="built_in">NSTextCheckingResult</span> *result = [regex firstMatchInString:searchText options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [searchText length])];</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@\n"</span>, [searchText substringWithRange:result<span class="variable">.range</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是这样就为了验证是不是数字,我感觉太笨重了,后来经过查询,发现了一种好用的实现:<a href="http://my.oschina.net/pljhonglu/blog/199197" target="_blank" rel="external">来源网址</a></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> ＊email ＝ @“nijino_saki@<span class="number">163.</span>com”； </span><br><span class="line"><span class="built_in">NSString</span> *regex = <span class="string">@"^[0-9]*$"</span>; </span><br><span class="line"><span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, regex]; </span><br><span class="line"><span class="built_in">BOOL</span> isValid = [predicate evaluateWithObject:email];</span><br></pre></td></tr></table></figure>
<p>整段代码只涉及一个 <code>NSPredicate</code>对象,条理清楚. </p>
<p>顺带的,又发现了<code>NSString</code>自己也有一个直接使用正则的功能.对于单纯的验证是否匹配来说,这个应该是最简单的方式了.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *searchText = <span class="string">@"// Do any additional setup after loading the view, typically from a nib."</span>; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">NSRange</span> range = [searchText rangeOfString:<span class="string">@"(?:[^,])*\\."</span> options:<span class="built_in">NSRegularExpressionSearch</span>]; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (range<span class="variable">.location</span> != <span class="built_in">NSNotFound</span>) &#123; </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [searchText substringWithRange:range]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="发现新知识的快乐">发现新知识的快乐</h2><p>在使用 <code>NSPredicate</code>的实现方式中, 出现了利用格式化字符串来匹配的内容.自己对这块不了解( 虽然有在 MagicalRecord中使用过 NSPredicate ,但是只是用来判断相等),于是想把相关内容搞明白. 最后找到了<a href="http://blog.csdn.net/ztp800201/article/details/8116081" target="_blank" rel="external">这篇文章</a></p>
<h3 id="基本用法">基本用法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:(<span class="built_in">NSString</span> *), ...];</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(1)比较运算符&gt;,&lt;,==,&gt;=,&lt;=,!=</span><br><span class="line">可用于数值及字符串</span><br><span class="line">例：@"number &gt; 100"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(2)范围运算符：IN、BETWEEN</span><br><span class="line">例：@"number BETWEEN &#123;1,5&#125;"</span><br><span class="line">      @"address IN &#123;'shanghai','beijing'&#125;"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(3)字符串本身:SELF </span><br><span class="line">例：@“SELF == ‘APPLE’"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(4)字符串相关：BEGINSWITH、ENDSWITH、CONTAINS</span><br><span class="line">例：@"name CONTAIN[cd] 'ang'"   //包含某个字符串</span><br><span class="line">       @"name BEGINSWITH[c] 'sh'"     //以某个字符串开头</span><br><span class="line">       @"name ENDSWITH[d] 'ang'"      //以某个字符串结束</span><br><span class="line">        注:[c]不区分大小写[d]不区分发音符号即没有重音符号[cd]既不区分大小写，也不区分发音符号。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(5)通配符：LIKE</span><br><span class="line">例：@"name LIKE[cd] '*er*'"    //*代表通配符,Like也接受[cd].</span><br><span class="line">       @"name LIKE[cd] '???er*'"</span><br><span class="line"></span><br><span class="line">(6)正则表达式：MATCHES</span><br><span class="line">例：NSString *regex = @"^A.+e$";   //以A开头，e结尾</span><br><span class="line">      @"name MATCHES %@",regex</span><br></pre></td></tr></table></figure>
<p>果真是一个强大而灵活的对象…</p>
<h2 id="附录:常用正则表达式">附录:常用正则表达式</h2><p>来源网址<a href="http://www.cnblogs.com/mobiledevelopment/archive/2011/09/05/2167910.html" target="_blank" rel="external"></a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">常用的第三方正则库:</span><br><span class="line">http://regexkit.sourceforge.net/RegexKitLite/index.html</span><br><span class="line"></span><br><span class="line">匹配中文字符的正则表达式： [\u4e00-\u9fa5]</span><br><span class="line">评注：匹配中文还真是个头疼的事，有了这个表达式就好办了</span><br><span class="line"></span><br><span class="line">匹配双字节字符(包括汉字在内)：[^\x00-\xff]</span><br><span class="line">评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</span><br><span class="line"></span><br><span class="line">匹配空白行的正则表达式：\n\s*\r</span><br><span class="line">评注：可以用来删除空白行</span><br><span class="line"></span><br><span class="line">匹配HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</span><br><span class="line">评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</span><br><span class="line"></span><br><span class="line">匹配首尾空白字符的正则表达式：^\s*|\s*$</span><br><span class="line">评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</span><br><span class="line"></span><br><span class="line">匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</span><br><span class="line">评注：表单验证时很实用</span><br><span class="line"></span><br><span class="line">匹配网址URL的正则表达式：[a-zA-z]+://[^\s]*</span><br><span class="line">评注：网上流传的版本功能很有限，上面这个基本可以满足需求</span><br><span class="line"></span><br><span class="line">匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br><span class="line">评注：表单验证时很实用</span><br><span class="line"></span><br><span class="line">匹配国内电话号码：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span><br><span class="line">评注：匹配形式如 0511-4405222 或 021-87888822</span><br><span class="line"></span><br><span class="line">匹配腾讯QQ号：[1-9][0-9]&#123;4,&#125;</span><br><span class="line">评注：腾讯QQ号从10000开始</span><br><span class="line"></span><br><span class="line">匹配中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)</span><br><span class="line">评注：中国邮政编码为6位数字</span><br><span class="line"></span><br><span class="line">匹配身份证：\d&#123;15&#125;|\d&#123;18&#125;</span><br><span class="line">评注：中国的身份证为15位或18位</span><br><span class="line"></span><br><span class="line">匹配ip地址：\d+\.\d+\.\d+\.\d+</span><br><span class="line">评注：提取ip地址时有用</span><br><span class="line"></span><br><span class="line">匹配特定数字：</span><br><span class="line">^[1-9]\d*$　 　 //匹配正整数</span><br><span class="line">^-[1-9]\d*$ 　 //匹配负整数</span><br><span class="line">^-?[1-9]\d*$　　 //匹配整数</span><br><span class="line">^[1-9]\d*|0$　 //匹配非负整数（正整数 + 0）</span><br><span class="line">^-[1-9]\d*|0$　　 //匹配非正整数（负整数 + 0）</span><br><span class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$　　 //匹配正浮点数</span><br><span class="line">^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$　 //匹配负浮点数</span><br><span class="line">^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$　 //匹配浮点数</span><br><span class="line">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）</span><br><span class="line">^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）</span><br><span class="line">评注：处理大量数据时有用，具体应用时注意修正</span><br><span class="line"></span><br><span class="line">匹配特定字符串：</span><br><span class="line">^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串</span><br><span class="line">^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串</span><br><span class="line">^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串</span><br><span class="line">^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串</span><br><span class="line">^\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自用提高效率的三方框架]]></title>
      <url>http://yoursite.com/2015/08/13/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E8%87%AA%E7%94%A8%E6%8F%90%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h3 id="CXPhotoBrowser">CXPhotoBrowser</h3><p><a href="https://github.com/ChrisXu1221/CXPhotoBrowser" target="_blank" rel="external">项目地址</a></p>
<p>功能比较完善的图片浏览器，使用方式符合大众使用习惯。作者说是收到<code>MWPhotoBrowser</code>的启发</p>
<p>功能点：</p>
<ul>
<li>自定义的导航条</li>
<li>自定义工具条</li>
<li>网络下载图片能力，占位图片</li>
</ul>
<p>但是已经好久没有更新了，但是个人在使用中过程中没有发现什么问题</p>
<h3 id="MWPhotoBrowser">MWPhotoBrowser</h3><p><a href="https://github.com/mwaterfall/MWPhotoBrowser" target="_blank" rel="external">项目地址</a></p>
<p>一个简单易用的图片、视频浏览器。可定义网格、标题和 选择范围</p>
<h2 id="MagicalRecord">MagicalRecord</h2><p><a href="https://github.com/magicalpanda/MagicalRecord" target="_blank" rel="external">项目地址</a></p>
<p>对 ‘CoreData’ 的封装，非常简单易用，避免了CoreData繁琐的使用方式</p>
<h2 id="CocoaLumberjack">CocoaLumberjack</h2><p><a href="https://github.com/CocoaLumberjack/CocoaLumberjack" target="_blank" rel="external">项目地址</a></p>
<p>配合Xcode color插件，让控制台打印带色彩，根据不同的级别，配置不同的色彩。</p>
<h2 id="DateTools">DateTools</h2><p><a href="https://github.com/MatthewYork/DateTools" target="_blank" rel="external">项目地址</a></p>
<p>简化日期操作的分类</p>
<h2 id="Masonry">Masonry</h2><p><a href="https://github.com/desandro/masonry" target="_blank" rel="external">项目地址</a></p>
<p>不多说,手码一族必备布局库</p>
<h2 id="MBProgressHUD">MBProgressHUD</h2><p><a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="external">项目地址</a></p>
<p>提示用户框</p>
<h2 id="MJRefresh">MJRefresh</h2><p><a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="external">项目地址</a></p>
<p>一句话给<code>ScrollView</code>及其子类(UITableview UICollectionView 等)添加上拉下拉刷新功能</p>
<h2 id="SDWebImage">SDWebImage</h2><p><a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">项目地址</a></p>
<p>加载网络图片,本地图片缓存神器</p>
<h2 id="VPImageCropper">VPImageCropper</h2><p><a href="https://github.com/windshg/VPImageCropper" target="_blank" rel="external">项目地址</a></p>
<p>图片裁剪框架</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我项目中Layout模块的解析]]></title>
      <url>http://yoursite.com/2015/08/12/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E6%88%91%E9%A1%B9%E7%9B%AE%E4%B8%ADLayout%E6%A8%A1%E5%9D%97%E7%9A%84%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>从上次确定使用抽象工厂模式, 到最终项目实现,采用了建造者模式. 因为如果使用抽象工厂模式,将每个模块的layout抽象, 会导致产品体系非常复杂, 难以使用和维护.</p>
<a id="more"></a>
<h2 id="结构图">结构图</h2><p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/我项目中Layout模块的解析LayoutHierarchy.jpg" alt=""></p>
<h3 id="说明">说明</h3><p> <code>GUILayout</code> 是一个由各个模块布局模型组合而成的复杂对象 .</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUILayout</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UIGeneralLayoutModel</span> *generalLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UILoginLayoutModel</span> *loginLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UIDiaryLayoutModel</span> *diaryLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UIPregnantManagerLayoutModel</span> * pregnantLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UIInfoProviewLayoutModel</span> *infoPreviewLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UIPediaLayoutModel</span> *peidaLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UIAntenatalCareLayoutModel</span> *anteCareLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UIExpertListLayoutModel</span> * expertLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><code>GUIDiaryLayoutModel</code> 日记模块的参数模型,内部包含了图标大小,间距等尺寸信息.其余的<code>XXXLayoutModel</code>均类似<code>GUIDiaryLayoutModel</code> ,只是内部参数根据实际UI控件有差异.其参数参考UI给出的UI文档.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUIDiaryLayoutModel</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> topViewHeight;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> weekLabelTopMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> weekLabelLeftMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> weekLabelRightMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> weekLabelBottomMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> weekLabelNumberFontSize;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> weekLabelTextFontSize;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> bottomBarHeight;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> addButtonLeftMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> addButtonWH;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> topButtonWH;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> topButtonLeftRightMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> timeLabelFontSize;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> timeLabelRightMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> cellIconLeftMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> cellIconRightMargin;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> cellCellDetailFontSize;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> cellCellHeight;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> cellWeekTextFontSize;</span><br><span class="line"><span class="keyword">@property</span> ( <span class="keyword">assign</span> , <span class="keyword">nonatomic</span> )<span class="built_in">CGFloat</span> cellWeekTextRightMargin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><code>LayoutBuilder</code> 建造者父类,拥有一个 <code>GUILayout</code> 对象,并规定了建造不同模块参数的方法. </p>
<p>.h文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUILayout.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LayoutBuilder</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UILayout</span> * layout;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)buildLayout;</span><br><span class="line">-(LayoutBuilder*)configLoginLayout;</span><br><span class="line">-(LayoutBuilder*)configDiaryLayout;</span><br><span class="line">-(LayoutBuilder*)configPregnantMangerLayout;</span><br><span class="line">-(LayoutBuilder*)configPediaLayout;</span><br><span class="line">-(LayoutBuilder*)configAnteCareLayout;</span><br><span class="line">-(LayoutBuilder*)configExpertListLayout;</span><br><span class="line">-(LayoutBuilder*)configInfoPreviewLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>.m 文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"LayoutBuilder.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LayoutBuilder</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LayoutBuilder</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)buildLayout</span><br><span class="line">&#123;</span><br><span class="line">    G<span class="built_in">UILayout</span> * layout = [G<span class="built_in">UILayout</span> new];</span><br><span class="line">    _layout = layout;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configLoginLayout&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configDiaryLayout&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configPregnantMangerLayout&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configPediaLayout&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line">-(LayoutBuilder*)configAnteCareLayout&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line">-(LayoutBuilder*)configExpertListLayout&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line">-(LayoutBuilder*)configInfoPreviewLayout&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>IP4LayoutBuilder</code> , <code>IP5LayoutBuilder</code> ,<code>IP6LayoutBuilder</code> 这些类分别重写父类的建造方法,给不同的<code>XXXLayoutModel</code>赋不同值.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"IP6LayoutBuilder.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">IP6LayoutBuilder</span></span></span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configLoginLayout&#123;</span><br><span class="line">   </span><br><span class="line">    G<span class="built_in">UILoginLayoutModel</span> * model = [G<span class="built_in">UILoginLayoutModel</span> new];</span><br><span class="line">    model<span class="variable">.iconSize</span> = <span class="built_in">CGSizeMake</span>(<span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">    model<span class="variable">.leftViewInsets</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.welcomePageButtonWidth</span> = <span class="number">172</span>;</span><br><span class="line">    model<span class="variable">.welcomepageButtonTitleFontSize</span> = <span class="number">17</span>;</span><br><span class="line">    model<span class="variable">.welcomePageLeftMargin</span> = <span class="number">10</span>;</span><br><span class="line">    model<span class="variable">.welcomePageBottomMargin</span> = <span class="number">6</span>;</span><br><span class="line">    model<span class="variable">.welcomePageMiddleMargin</span> = <span class="number">10</span>;</span><br><span class="line">    model<span class="variable">.toSignUpFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.noAccoutStringColor</span> = G<span class="built_in">UIColorFromRGB</span>(<span class="number">0xffbebe</span>);</span><br><span class="line">    model<span class="variable">.loginButtonWidth</span> = <span class="number">295</span>;</span><br><span class="line">    model<span class="variable">.tableTopMargin</span> = <span class="number">20</span>;</span><br><span class="line">    model<span class="variable">.submitButtonWidth</span> = <span class="number">172</span>;</span><br><span class="line">    model<span class="variable">.submitTitleHeight</span> = <span class="number">17</span>;</span><br><span class="line">    model<span class="variable">.signupLeftIconLeftRightMargin</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.signupLeftIconTopBottomMargin</span> = <span class="number">17</span>;</span><br><span class="line">    model<span class="variable">.textFieldTextLeftMargin</span>  =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.layout</span><span class="variable">.loginLayout</span> = model;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configPregnantMangerLayout&#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UIPregnantManagerLayoutModel</span> * model = [G<span class="built_in">UIPregnantManagerLayoutModel</span> new];</span><br><span class="line">    </span><br><span class="line">    model<span class="variable">.topViewHeight</span> = <span class="number">242</span>;</span><br><span class="line">    model<span class="variable">.userIconTopMargin</span> = <span class="number">25</span>;</span><br><span class="line">    model<span class="variable">.userIconWidth</span> = <span class="number">71</span>;</span><br><span class="line">    model<span class="variable">.userIconHeight</span> = <span class="number">71</span>;</span><br><span class="line">    model<span class="variable">.usernameTopMargin</span> = <span class="number">8</span>;</span><br><span class="line">    model<span class="variable">.usernameFontSize</span> = <span class="number">17</span>;</span><br><span class="line">    model<span class="variable">.pregnantDateTopMargin</span> = <span class="number">35</span>;</span><br><span class="line">    model<span class="variable">.pregnantDateRightMargin</span> = <span class="number">35</span>;</span><br><span class="line">    model<span class="variable">.toBirthLabelFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.toBirthLabelLeftMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.toBirthLabelDescFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.toBirthLabelNumberFontSize</span> = <span class="number">17</span>;</span><br><span class="line">    model<span class="variable">.editButtonTopMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.editButtonRightMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.editButtonBottomMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.editButtonHeight</span> = <span class="number">30</span>;</span><br><span class="line">    model<span class="variable">.editButtonWidth</span>  = <span class="number">30</span>;</span><br><span class="line">    model<span class="variable">.userIconBorderWidth</span> = <span class="number">2</span>;</span><br><span class="line">    model<span class="variable">.pregnantDateLeftMargin</span> = <span class="number">40</span>;</span><br><span class="line">    model<span class="variable">.pregnantDateFontSize</span> = <span class="number">34</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.layout</span><span class="variable">.pregnantLayout</span> = model;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configDiaryLayout&#123;</span><br><span class="line">   </span><br><span class="line">    G<span class="built_in">UIDiaryLayoutModel</span> * model = [G<span class="built_in">UIDiaryLayoutModel</span> new];</span><br><span class="line">    model<span class="variable">.topViewHeight</span> = <span class="number">181</span>;</span><br><span class="line">    model<span class="variable">.weekLabelTopMargin</span> = <span class="number">38</span>;</span><br><span class="line">    model<span class="variable">.weekLabelLeftMargin</span> = <span class="number">55</span>;</span><br><span class="line">    model<span class="variable">.weekLabelRightMargin</span> =<span class="number">55</span>;</span><br><span class="line">    model<span class="variable">.weekLabelBottomMargin</span> =<span class="number">42</span>;</span><br><span class="line">    model<span class="variable">.weekLabelNumberFontSize</span> =<span class="number">52</span>;</span><br><span class="line">    model<span class="variable">.weekLabelTextFontSize</span> =<span class="number">26</span>;</span><br><span class="line">    model<span class="variable">.bottomBarHeight</span> =<span class="number">44</span>;</span><br><span class="line">    model<span class="variable">.addButtonLeftMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.timeLabelFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.timeLabelRightMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.cellIconLeftMargin</span> = <span class="number">11</span>;</span><br><span class="line">    model<span class="variable">.cellIconRightMargin</span> = <span class="number">17</span>;</span><br><span class="line">    model<span class="variable">.cellCellDetailFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.cellCellHeight</span> = <span class="number">55</span>;</span><br><span class="line">    model<span class="variable">.cellWeekTextFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.cellWeekTextRightMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.addButtonWH</span> = <span class="number">30</span>;</span><br><span class="line">    model<span class="variable">.topButtonWH</span> = <span class="number">30</span>;</span><br><span class="line">    model<span class="variable">.topButtonLeftRightMargin</span> = <span class="number">60</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.layout</span><span class="variable">.diaryLayout</span> = model;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configPediaLayout&#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UIPediaLayoutModel</span> *model = [G<span class="built_in">UIPediaLayoutModel</span> new];</span><br><span class="line">    model<span class="variable">.iconTopMargin</span> = <span class="number">25</span>;</span><br><span class="line">    model<span class="variable">.iconBorderWidth</span> = <span class="number">3</span>;</span><br><span class="line">    model<span class="variable">.iconViewWH</span> = <span class="number">100</span>;</span><br><span class="line">    model<span class="variable">.weekLabelNormalFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.weekLabelNumberFontSize</span> = <span class="number">28</span>;</span><br><span class="line">    model<span class="variable">.fruitIconWH</span> = <span class="number">26</span>;</span><br><span class="line">    model<span class="variable">.iconDescFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.babyLengthNormalFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.babyLengthValueFontSize</span> = <span class="number">17</span>;</span><br><span class="line">    model<span class="variable">.babyLengthBottomMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.controllButtonWidth</span> = <span class="number">40</span>;</span><br><span class="line">    model<span class="variable">.controllBUttonHeight</span> = <span class="number">46</span>;</span><br><span class="line">    model<span class="variable">.timeLineWidth</span> = <span class="number">30</span>;</span><br><span class="line">    model<span class="variable">.cellContentViewLeftRightMargin</span> = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.layout</span><span class="variable">.peidaLayout</span> = model;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line">-(LayoutBuilder*)configAnteCareLayout&#123;</span><br><span class="line">    G<span class="built_in">UIAntenatalCareLayoutModel</span> * model = [G<span class="built_in">UIAntenatalCareLayoutModel</span> new];</span><br><span class="line">    </span><br><span class="line">    model<span class="variable">.contollTopMargin</span>= <span class="number">10</span>;</span><br><span class="line">    model<span class="variable">.controllleftMargin</span>=<span class="number">80</span>;</span><br><span class="line">    model<span class="variable">.controlButtonSize</span>= <span class="number">20</span>;</span><br><span class="line">    model<span class="variable">.weekIconTopMargin</span>= <span class="number">25</span>;</span><br><span class="line">    model<span class="variable">.weekIconBottomMargin</span>= <span class="number">25</span>;</span><br><span class="line">    model<span class="variable">.weekIconTitleFontSize</span>=<span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.weekIconWeekFontSize</span>=<span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.cellLeftMargin</span>=<span class="number">10</span>;</span><br><span class="line">    model<span class="variable">.redDotRightMargin</span>=<span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.cellHeight</span>=<span class="number">44</span>;</span><br><span class="line">    model<span class="variable">.tagViewMiddleMargin</span>= <span class="number">10</span>;</span><br><span class="line">    model<span class="variable">.tagViewHeight</span>=<span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.tagViewFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    model<span class="variable">.tagViewTopMargin</span>= <span class="number">44</span>;</span><br><span class="line">    model<span class="variable">.cellLineLeftMargin</span>= <span class="number">10</span>;</span><br><span class="line">    model<span class="variable">.cellLineRightMargin</span>= <span class="number">10</span>;</span><br><span class="line">    model<span class="variable">.cellNoteBottomMargin</span>= <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.cellNoteFontSize</span>= <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.cellNoteLeftMargin</span> = <span class="number">42</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.layout</span><span class="variable">.anteCareLayout</span> = model;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configExpertListLayout&#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UIExpertListLayoutModel</span> * model = [G<span class="built_in">UIExpertListLayoutModel</span> new];</span><br><span class="line">    model<span class="variable">.iconWH</span> = <span class="number">50</span>;</span><br><span class="line">    model<span class="variable">.iconLeftMargin</span> = <span class="number">14</span>;</span><br><span class="line">    model<span class="variable">.iconRightMargin</span> = <span class="number">14</span>;</span><br><span class="line">    model<span class="variable">.titleFontSize</span> = <span class="number">17</span>;</span><br><span class="line">    model<span class="variable">.detailTextTopMargin</span> = <span class="number">10</span>;</span><br><span class="line">    model<span class="variable">.cellHeight</span> = <span class="number">60</span>;</span><br><span class="line">    model<span class="variable">.detailFontSize</span> = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.layout</span><span class="variable">.expertLayout</span> = model;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(LayoutBuilder*)configInfoPreviewLayout&#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UIInfoProviewLayoutModel</span> * model = [G<span class="built_in">UIInfoProviewLayoutModel</span> new];</span><br><span class="line">    model<span class="variable">.tableTopMargin</span> = <span class="number">20</span>;</span><br><span class="line">    model<span class="variable">.titleLeftMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.iconCellHeight</span> = <span class="number">54</span>;</span><br><span class="line">    model<span class="variable">.iconWH</span> = <span class="number">41</span>;</span><br><span class="line">    model<span class="variable">.appendViewRrightMargin</span> = <span class="number">15</span>;</span><br><span class="line">    model<span class="variable">.tableHeaderHeight</span> = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.layout</span><span class="variable">.infoPreviewLayout</span> = model;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><code>LayoutDirector</code> 规定了<code>LayoutBuilder</code>要执行哪些方法,以及方法的执行顺序,确保最终的<code>GUILayout</code>对象能被顺利初始化.</p>
<p>.h文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"LayoutBuilder.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUILayout.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LayoutDirector</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)LayoutBuilder * builder;</span><br><span class="line"></span><br><span class="line">-(G<span class="built_in">UILayout</span>*)layout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>.m 文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"LayoutDirector.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"IP4LayoutBuilder.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"IP6LayoutBuilder.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"IP5LayoutBuilder.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"IP6PLayoutBuilder.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone4 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone6 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(750, 1334), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone6Plus ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242,2208), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LayoutDirector</span></span></span><br><span class="line"></span><br><span class="line">-(LayoutBuilder *)builder&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!_builder) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (kisiPhone4) &#123;</span><br><span class="line">            _builder = [IP4LayoutBuilder new];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(kisiPhone5)&#123;</span><br><span class="line">            _builder = [IP5LayoutBuilder new];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(kisiPhone6)&#123;</span><br><span class="line">            _builder = [IP6LayoutBuilder new];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(kisiPhone6Plus)&#123;</span><br><span class="line">            _builder = [IP6PLayoutBuilder new];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(G<span class="built_in">UILayout</span>*)layout&#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.builder</span> buildLayout];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.builder</span> configLoginLayout];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.builder</span> configDiaryLayout];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.builder</span> configPregnantMangerLayout];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.builder</span> configInfoPreviewLayout];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.builder</span> configExpertListLayout];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.builder</span> configPediaLayout];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.builder</span> configAnteCareLayout];</span><br><span class="line">    <span class="keyword">return</span>  [<span class="keyword">self</span><span class="variable">.builder</span> layout];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>因为这个模块的判断方式是屏幕的尺寸,故结合简单工厂模式,将原本属于调用者的判断逻辑下放到了 <code>LayoutDiretor</code>中.</p>
<p>最后,为了调用者使用方便,在整个布局模块的上层包装了一个 <code>GUILayoutManager</code> ,并在其内部为不同模块定义了宏.方便调用</p>
<p>.h</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUILayout.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"LayoutDirector.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kGenralLayout [GUILayoutManager layout].generalLayout</span></span><br><span class="line"><span class="preprocessor">#define kLoginLayout  [GUILayoutManager layout].loginLayout</span></span><br><span class="line"><span class="preprocessor">#define kPregnantLayout [GUILayoutManager layout].pregnantLayout</span></span><br><span class="line"><span class="preprocessor">#define kInfoOverviewLayout [GUILayoutManager layout].infoPreviewLayout</span></span><br><span class="line"><span class="preprocessor">#define kExpertLayout [GUILayoutManager layout].expertLayout</span></span><br><span class="line"><span class="preprocessor">#define kDiaryLayout  [GUILayoutManager layout].diaryLayout</span></span><br><span class="line"><span class="preprocessor">#define kPediaLayout  [GUILayoutManager layout].peidaLayout</span></span><br><span class="line"><span class="preprocessor">#define kAnteLayout [GUILayoutManager layout].anteCareLayout</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUILayoutManager</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)G<span class="built_in">UILayout</span> * layout;</span><br><span class="line"></span><br><span class="line">+(G<span class="built_in">UILayout</span>*)layout;</span><br><span class="line"></span><br><span class="line">+(instancetype) sharedLayoutManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>.m</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUILayoutManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUILayoutManager</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(G<span class="built_in">UILayout</span> *)layout&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_layout) &#123;</span><br><span class="line">        LayoutDirector * director = [LayoutDirector new];</span><br><span class="line">        G<span class="built_in">UILayout</span> *layout = [director layout];</span><br><span class="line">        _layout = layout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  _layout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(G<span class="built_in">UILayout</span>*)layout&#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UILayoutManager</span> * manager = [G<span class="built_in">UILayoutManager</span> new];</span><br><span class="line">    <span class="keyword">return</span> manager<span class="variable">.layout</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+(instancetype)allocWithZone:(<span class="keyword">struct</span> _<span class="built_in">NSZone</span> *)zone&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>  <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">id</span>  instance = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [<span class="keyword">super</span> allocWithZone:zone];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(instancetype)sharedLayoutManager&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onecToken;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">id</span> instance;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onecToken, ^&#123;</span><br><span class="line">        instance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="便利">便利</h2><p>如果UI出了新的尺寸,只需要在特定屏幕的的 XXXLayoutBuilder的对应方法中修改参数值即可, 项目中其它文件均无需修改.<br>例如:<br>    要加大iPhone6 下 ,百科模块的用户头像大小.<br>    <code>IP6LayoutBuilder.m</code>-&gt; <code>configPediaLayout</code> -&gt;<code>configPediaLayout</code>方法中,将<code>model.iconViewWH</code>修改即可.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从简单工厂到工厂模式]]></title>
      <url>http://yoursite.com/2015/08/10/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E4%BB%8E%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E5%88%B0%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>上次的文章,用简单工厂,解决了生产布局类的问题. 但是,上次的方式针对一个模块是可以的,当模块多了,每个类负责的属性就太多了.这是一个需要重构的点.</p>
<h2 id="准备工作">准备工作</h2><p>首先,将类重命名, 比如 原来的: </p>
<p>GUILayoutFactory -&gt; GUILoginLayoutFactory</p>
<p>原来的布局产品名称也是应该修改的,但是就不贴出来了,一个原则就是:不要让类名把你自己弄迷糊了即可.</p>
<h2 id="重构">重构</h2><p>下面是我工厂模式的结构图,目前工厂只有 Login这一个,项目中有更多,但是没必要都在此列举.</p>
<p><img src="" alt=""></p>
<p>文件说明图</p>
<p><img src="" alt=""></p>
<p>当把图画出来, 很容易看出来, 需要进行重构了. 因为在 <code>GUILoginLayoutFactory</code> 存在着逻辑判断代码,如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone4 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone6 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(750, 1334), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone6Plus ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242,2208), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, G<span class="built_in">UIDeviceType</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UIDeviceType4S</span> = <span class="number">1</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType5</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType6</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType6P</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceTypeNotFound</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面的代码是当时在应用简单工厂的时候,将逻辑下放到工厂中得.现在它存在于我们的 <code>GUILoginLayoutFactory</code>中,这个工厂还会有同级的兄弟工厂.它们也需要这种判断来生产具体的 layou产品,比如<code>GUIDiaryLayoutFactory</code>,那么,现在应该采用将这些代码提升到父类的重构手法.  <code>GUILoginLayoutFactory</code> 的父类是我们的 “ 总工厂 “ 也就是 <code>GUILayoutFactory</code></p>
<p>现在 <code>GUILayoutFactory</code>的头文件代码是:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">GUILayout</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone4 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone6 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(750, 1334), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone6Plus ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242,2208), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, G<span class="built_in">UIDeviceType</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UIDeviceType4S</span> = <span class="number">1</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType5</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType6</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType6P</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceTypeNotFound</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUILayoutFactory</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">-(G<span class="built_in">UILayout</span> *)layout;</span><br><span class="line">+(G<span class="built_in">UILayout</span> *)layout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>养成好习惯,每次小重构后都进行编译.</p>
<p>客户端调用代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UILayoutFactory</span> * layoutFactory = [G<span class="built_in">UILoginLayoutFactory</span> new];</span><br><span class="line">    G<span class="built_in">UILayout</span> * layout = [layoutFactory layout];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n %f \n %f \n %f \n %f"</span>,layout<span class="variable">.textFieldWidth</span>,layout<span class="variable">.textFieldHeight</span>,layout<span class="variable">.loginButtonWidth</span>,layout<span class="variable">.loginButtonHeight</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是的, 调用端需要知晓具体的工厂.比如这里的 <code>GUILoginFactory</code>才能拿到具体的产品.</p>
<h2 id="对比简单工厂">对比简单工厂</h2><p>原来使用简单工厂实现的时候,如果要增加新产品.那么需要:</p>
<ol>
<li>添加具体的产品(Layout类)</li>
<li>在工厂类中增加一个分支语句</li>
</ol>
<p>客户端是无需修改和知道工厂内部的细节的.</p>
<p>现在使用工厂模式,如果要增加新产品:</p>
<ol>
<li>添加具体的产品(Layout类)</li>
<li>添加具体产品的工厂类(LayoutFactory类)</li>
<li>客户端进行判断和需要知晓新的工厂类</li>
</ol>
<p>加重了客户端的负担.</p>
<p>总结来说: </p>
<ul>
<li><p>简单工厂最大的优点在于工厂类中包含了必要的逻辑判断,根据客户端的选择(或者是其他条件)动态实例化相关的类,对于客户端来说,去除了与具体产品的依赖 .</p>
</li>
<li><p>但是如果添加新产品,要修改工厂类,违背了”开放-封闭原则”</p>
</li>
<li><p>工厂模式让子类工厂决定实例化哪个类.让产品类的实例化延迟到了子工厂.</p>
</li>
<li><p>新增加产品的时候, 整个工厂的体系是没有修改的,只是扩展出一个子类.</p>
</li>
<li><p>工厂模式,客户端需要知晓具体的工厂子类</p>
</li>
</ul>
<p>两者没有好坏, 我们需要根据自己的实际情景来选择模式进行应用.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[当遇到严格要求的UI-实现]]></title>
      <url>http://yoursite.com/2015/08/09/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E5%BD%93%E9%81%87%E5%88%B0%E4%B8%A5%E6%A0%BC%E8%A6%81%E6%B1%82%E7%9A%84UI-%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="说明">说明</h2><p>因为公司项目负责,所以这个代码将用Demo的形式建立,然后引入到项目中.然后对项目的调用进行重构.</p>
<h2 id="创建项目文件">创建项目文件</h2><p>文件清单:</p>
<ul>
<li>产品父类 <code>GUILayout</code> 包含各种属性</li>
<li>iPhone4s/4 布局类 <code>GUIIP4SLayout</code> 继承 <code>GUILayout</code></li>
<li>iPhone5s/5 布局类 <code>GUIIP5Layout</code> 继承 <code>GUILayout</code></li>
<li>iPhone6 布局类  <code>GUIIP6Layout</code> 继承 <code>GUILayout</code></li>
<li>iPhone6 plus 布局类 <code>GUIIP6PLayout</code> 继承 <code>GUILayout</code></li>
<li>工厂类 <code>GUILayoutFactory</code></li>
</ul>
<h2 id="代码详解">代码详解</h2><p>首先是     <code>GUILayout</code>,它定义了所有需要的属性.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUILayout</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> textFieldHeight;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> textFieldWidth;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> loginButtonWidth;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> loginButtonHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUILayout.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUILayout</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>它的布局子类,在 <code>init</code>方法中,对布局属性进行了初始化,因为代码几乎一样,所以拿一个类说明:(为了以后区分,我给不同的布局类不同的值:<br>4/4s 值都是 4 ,5/5s 值都是5 ,6 值都是6 ,6 plus值都是 60)</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"GUILayout.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUIIP4SLayout</span> : <span class="title">GUILayout</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIIP4SLayout.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUIIP4SLayout</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.textFieldHeight</span>   = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.textFieldWidth</span>    = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.loginButtonHeight</span> = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.loginButtonWidth</span>  = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然后是工厂类:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">GUILayout</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUILayoutFactory</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">-(G<span class="built_in">UILayout</span>*)createLayout;</span><br><span class="line">+(G<span class="built_in">UILayout</span>*)createLayout;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUILayoutFactory.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIIP4SLayout.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIIP6Layout.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIIP6PLayout.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIIP5Layout.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone4 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone6 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(750, 1334), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define kisiPhone6Plus ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242,2208), [[UIScreen mainScreen] currentMode].size) : NO)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, G<span class="built_in">UIDeviceType</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    G<span class="built_in">UIDeviceType4S</span> = <span class="number">1</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType5</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType6</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceType6P</span>,</span><br><span class="line">    G<span class="built_in">UIDeviceTypeNotFound</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUILayoutFactory</span></span></span><br><span class="line"></span><br><span class="line">-(G<span class="built_in">UILayout</span>*)createLayout&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">switch</span> ([<span class="keyword">self</span> deviceType]) &#123;</span><br><span class="line">        <span class="keyword">case</span> G<span class="built_in">UIDeviceType4S</span>:</span><br><span class="line">            <span class="keyword">return</span> [G<span class="built_in">UIIP4SLayout</span> new];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> G<span class="built_in">UIDeviceType6</span>:</span><br><span class="line">            <span class="keyword">return</span> [G<span class="built_in">UIIP6Layout</span> new];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> G<span class="built_in">UIDeviceType6P</span>:</span><br><span class="line">            <span class="keyword">return</span> [G<span class="built_in">UIIP6PLayout</span> new];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> G<span class="built_in">UIDeviceType5</span>:</span><br><span class="line">            <span class="keyword">return</span> [G<span class="built_in">UIIP5Layout</span> new];</span><br><span class="line">        <span class="keyword">case</span> G<span class="built_in">UIDeviceTypeNotFound</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(G<span class="built_in">UILayout</span>*)createLayout&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  [[G<span class="built_in">UILayoutFactory</span> new] createLayout];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(G<span class="built_in">UIDeviceType</span>)deviceType&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (kisiPhone4) &#123;</span><br><span class="line">        <span class="keyword">return</span> G<span class="built_in">UIDeviceType4S</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(kisiPhone5)&#123;</span><br><span class="line">        <span class="keyword">return</span> G<span class="built_in">UIDeviceType5</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(kisiPhone6)&#123;</span><br><span class="line">        <span class="keyword">return</span> G<span class="built_in">UIDeviceType6</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(kisiPhone6Plus)&#123;</span><br><span class="line">        <span class="keyword">return</span> G<span class="built_in">UIDeviceType6P</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> G<span class="built_in">UIDeviceTypeNotFound</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将判断逻辑下放到工厂类中,简化了控制器的调用</li>
<li>定义根据屏幕尺寸判断设备类型的宏</li>
<li>根据枚举类型决定返回的<code>layout</code>类型</li>
</ul>
<h2 id="结语">结语</h2><p>好了,这就是完整的代码了.根据自己的需求,修改参数名,可以方便的用到自己的系统中.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[当遇到严格要求的UI-模式选择]]></title>
      <url>http://yoursite.com/2015/08/09/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E5%BD%93%E9%81%87%E5%88%B0%E4%B8%A5%E6%A0%BC%E8%A6%81%E6%B1%82%E7%9A%84UI-%E6%A8%A1%E5%BC%8F%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>公司最近的一个项目,在UI上有比较严格的要求: <strong>每种屏幕下地控件的尺寸要求绝对的精确</strong>  </p>
<h2 id="实现方案">实现方案</h2><p>使用的纯代码 ,加上要适配 iOS 7 ,所以 <code>Size-Class</code> 就不用考虑了. </p>
<p>分析情况,其实控件的相对位置是固定的.开始也是用了 <code>Masonry</code>,只是需要提供不同屏幕下地控件尺寸,间距等内容.</p>
<h2 id="如何更优雅可拓展的实现">如何更优雅可拓展的实现</h2><p>当然,你可以在布局的时候,写<code>if-else</code> 和 <code>switch-case</code>来对不同屏幕的尺寸参数赋不同的值. 可是如果以后要修改呢,苹果要抽风推出了新尺寸的iPhone,而你被要求去适配呢? 你岂不是要找遍整个项目修改原来的分支判断.<br>    就是说,以上的实现方式:</p>
<ul>
<li>维护性差 人工维护成本高,也破坏了<code>开闭原则</code></li>
<li>扩展性差 如果有新的要求,需要逐个重写.</li>
</ul>
<h2 id="设计模式选择">设计模式选择</h2><p>对于这种情况,一开始首先是想到了<code>策略模式</code>,因为我考虑每种屏幕都可以算作是一种方案.而至于<code>策略模式</code>是行为模式,也当然可以通过重构技巧把属性替换为方法,完成策略的行为需求.我兴冲冲的绘制了草稿(OC没有合适的UML类图工具,所以用了普通的绘图工具,线条种类不足以完全表示UML类图中得关系)</p>
<p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/当遇到严格要求的UIQQ20150809-5@2x.png" alt="策略模式"></p>
<p>为了规避策略模式需要让客户端(调用者)知道具体策略的缺点(我认为是缺点),我采用重构手法将逻辑下放到<code>context</code>,<code>DeviceType</code>能决定具体的策略,算是<code>简单工厂</code>和<code>策略模式</code>的结合.</p>
<p>但是在绘图的过程中,想到,这有点算过度设计了, <strong>其实我只是需要一个能够保持属性的对象,然后在布局的时候,使用它</strong> ,使用策略模式,意味着我需要把所有的属性的 <code>getter</code>实现,才算符合<code>策略</code>的本意.<br>这次是一次失败的案例:</p>
<ul>
<li>对这种级别的方法使用策略,大材小用,无缘故的增加复杂度而已</li>
<li>一开始就不应该偏执的考虑将属性重构为方法,这里只是简单地赋值,不需要拦截其 <code>get</code> 过程</li>
</ul>
<p>然后想到了,建造者模式: 创建型的模式,很符合我要个布局对象的需求,也给他弄上了个简单工厂,避免了在控制器中出现分支语句:</p>
<p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/当遇到严格要求的UIQQ20150809-3@2x.png" alt=""></p>
<p>没画出具体的产品(布局),请见谅.</p>
<p>但是, 这里又有一个问题: 在我以前的经验中, 建造者模式是用来区分过程固定,但是有需要多样化的建造方式的. 在我的场景中,我最复杂的情况也仅仅是赋值而已, 所以,也是不适合的.</p>
<h2 id="最终方案">最终方案</h2><p>其实最简单的,往往是最好的.最重要的是弄明白自己需要的. 我仅仅需要几个承载着不同属性的对象.最合适的方案应该是 <code>简单工厂</code>,而且可以把逻辑下放到简单工厂中.这模式太简单了,就不画图了.</p>
<h2 id="总结">总结</h2><p>在设计模式的选择,甚至是去除设计模式的过程中,需要开发者有足够的经验来做决定. 今天就走了一个弯路,好在及时发现了.如果用策略模式或者建造者编码,将来的维护成本肯定要上升.</p>
<p>下一篇中,将用代码实现.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通过重构实现模板方法模式（Template Method ) 模式篇]]></title>
      <url>http://yoursite.com/2015/08/06/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E9%80%9A%E8%BF%87%E9%87%8D%E6%9E%84%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88Template-Method-%E6%A8%A1%E5%BC%8F%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="书接上文">书接上文</h2><p>上次使用了一些简单地重构方法,得到的最终代码如下:<br><a id="more"></a><br>.h 未做改动,文件省略<br>.m 文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"GUIResetPasswordController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIChangePasswordController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;SMS_SDK/SMS_SDK.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIHeader.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUIResetPasswordController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UITextField</span> *phonenumberTextfield;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UITextField</span> *verifyCodeTextfield;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span>    *getVerifyCodeButton;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span>    *submitButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> secondsCoutDown;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSTimer</span>   *countDownTimer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> kLeftViewHeight = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> kLeftViewWidth  = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUIResetPasswordController</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -life cycle</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = kcMainGrayBackgroud;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupPhoneNumberTextField];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupVerifiedCodeTextField];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupGetVerifiyCodeButton];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupSubmitButton];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillLayoutSubviews &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillLayoutSubviews];</span><br><span class="line"></span><br><span class="line">    WSE(ws);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kTextFieldHeight = <span class="number">50</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.phonenumberTextfield</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">         make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">         make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">         make<span class="variable">.trailing</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">         make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(kTextFieldHeight);</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">         make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.phonenumberTextfield</span><span class="variable">.mas_bottom</span>)<span class="variable">.with</span><span class="variable">.offset</span>(<span class="number">1</span>);</span><br><span class="line">         make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">         make<span class="variable">.trailing</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>)<span class="variable">.with</span><span class="variable">.offset</span>(-G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>);</span><br><span class="line">         make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(kTextFieldHeight);</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">         make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>, kTextFieldHeight));</span><br><span class="line">         make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span><span class="variable">.mas_trailing</span>);</span><br><span class="line">         make<span class="variable">.bottom</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span>);</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.submitButton</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">         make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">         make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>((G<span class="built_in">UIScreenWidth</span>-(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>))/<span class="number">2</span>);</span><br><span class="line">         make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span><span class="variable">.mas_bottom</span>)<span class="variable">.with</span><span class="variable">.offset</span>(<span class="number">60</span>);</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -  delegate</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -event response</span></span><br><span class="line">- (<span class="keyword">void</span>)getTheCodeAgain &#123;</span><br><span class="line"></span><br><span class="line">    secondsCoutDown                  = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span><span class="variable">.enabled</span> = <span class="literal">NO</span>;</span><br><span class="line">    countDownTimer                   = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timeDown) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)nextStep:(<span class="built_in">UIButton</span> *)button &#123;</span><br><span class="line"></span><br><span class="line">    [SMS_SDK commitVerifyCode:<span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span><span class="variable">.text</span> result:^(<span class="keyword">enum</span> SMS_ResponseState state) &#123;</span><br><span class="line">         <span class="keyword">if</span> (state == SMS_ResponseStateSuccess) &#123;</span><br><span class="line">             [MBProgressHUD showMessage:<span class="string">@"正在验证 ... "</span>];</span><br><span class="line">             [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:[[G<span class="built_in">UIChangePasswordController</span> alloc]init] animated:<span class="literal">YES</span>];</span><br><span class="line">             [MBProgressHUD hideHUD];</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             [MBProgressHUD showError:<span class="string">@"验证失败"</span>];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;];</span><br><span class="line"><span class="preprocessor">#warning temp code ,remember to delete</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:[[G<span class="built_in">UIChangePasswordController</span> alloc]init] animated:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma  mark - share sdk sms</span></span><br><span class="line">- (<span class="keyword">void</span>)getVerifyCode:(<span class="built_in">UIButton</span> *)button &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.phonenumberTextfield</span><span class="variable">.text</span> == <span class="literal">nil</span>) &#123;</span><br><span class="line">        [MBProgressHUD showError:<span class="string">@"请先填写手机号码"</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *phoneNumber = <span class="keyword">self</span><span class="variable">.phonenumberTextfield</span><span class="variable">.text</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#warning temp code ,remember to delete</span></span><br><span class="line">    <span class="built_in">NSArray</span>  *paths        = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line">    <span class="built_in">NSString</span> *documentPath = [paths lastObject];</span><br><span class="line">    <span class="built_in">NSString</span> *filePath     = [documentPath stringByAppendingPathComponent:<span class="string">@"resetPhoneNumber.plist"</span>];</span><br><span class="line">    [phoneNumber writeToFile:filePath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    [SMS_SDK getVerificationCodeBySMSWithPhone:phoneNumber zone:<span class="string">@"86"</span> result:^(SMS_SDKError *error) &#123;</span><br><span class="line">         <span class="comment">//save phone number to file</span></span><br><span class="line">         <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line">         <span class="built_in">NSString</span> *documentPath = [paths lastObject];</span><br><span class="line">         <span class="built_in">NSString</span> *filePath = [documentPath stringByAppendingPathComponent:<span class="string">@"resetPhoneNumber.plist"</span>];</span><br><span class="line">         [phoneNumber writeToFile:filePath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> getTheCodeAgain];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -private methods</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)timeDown &#123;</span><br><span class="line">    secondsCoutDown--;</span><br><span class="line">    <span class="keyword">if</span> (secondsCoutDown == <span class="number">0</span>) &#123;</span><br><span class="line">        [countDownTimer invalidate];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span><span class="variable">.enabled</span> = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> setTitle:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"请等待 %ld 秒"</span>, (<span class="keyword">long</span>)secondsCoutDown] forState:<span class="built_in">UIControlStateDisabled</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIImageView</span> *)textLeftViewWithImage:(<span class="built_in">UIImage</span> *)leftImage &#123;</span><br><span class="line">    <span class="built_in">UIImageView</span> *containerView = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">    <span class="built_in">UIImageView</span> *iconView      = [[<span class="built_in">UIImageView</span> alloc]init];</span><br><span class="line">    iconView<span class="variable">.image</span> = leftImage;</span><br><span class="line">    [containerView addSubview:iconView];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIImageView</span> *seperatorView = [[<span class="built_in">UIImageView</span> alloc]init];</span><br><span class="line">    seperatorView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    [containerView addSubview:seperatorView];</span><br><span class="line">    <span class="comment">//set frame</span></span><br><span class="line">    containerView<span class="variable">.bounds</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kLeftViewWidth+<span class="number">20</span>, kLeftViewWidth);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewWH = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewX  = (kLeftViewWidth - iconViewWH)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewY  = (kLeftViewHeight - iconViewWH)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    iconView<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(iconViewX, iconViewY, iconViewWH, iconViewWH);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorW = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorH = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorX = kLeftViewWidth-seperatorW;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorY = (kLeftViewHeight-seperatorH)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    seperatorView<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(seperatorX, seperatorY, seperatorW, seperatorH);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> containerView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupPhoneNumberTextField &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UITextField</span> *phonenumberTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_dianhua"</span>]];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.placeholder</span>     = <span class="string">@"您的手机号"</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    phonenumberTextfield<span class="variable">.clearButtonMode</span> = <span class="built_in">UITextFieldViewModeWhileEditing</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:phonenumberTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.phonenumberTextfield</span> = phonenumberTextfield;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupVerifiedCodeTextField &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UITextField</span> *verifyCodeTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_yanzhengma"</span>]];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.placeholder</span>     = <span class="string">@"输入验证码"</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:verifyCodeTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span> = verifyCodeTextfield;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupGetVerifiyCodeButton &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIButton</span> *getVerifyCodeButton = [[<span class="built_in">UIButton</span> alloc]init];</span><br><span class="line">    [getVerifyCodeButton setTitle:<span class="string">@"获取验证码"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton setBackgroundColor:kcMainRed];</span><br><span class="line">    [getVerifyCodeButton setTitleColor:kcMainGrayBackgroud forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(getVerifyCode:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:getVerifyCodeButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> = getVerifyCodeButton;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupSubmitButton &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIButton</span> *submitButton = [[<span class="built_in">UIButton</span> alloc] init];</span><br><span class="line">    [submitButton setTitle:<span class="string">@"下一步"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton setBackgroundColor:[<span class="built_in">UIColor</span> whiteColor]];</span><br><span class="line">    submitButton<span class="variable">.layer</span><span class="variable">.cornerRadius</span> = <span class="number">3</span>;</span><br><span class="line">    [submitButton setTitleColor:kcMainRed forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(nextStep:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:submitButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.submitButton</span> = submitButton;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -getters and setters</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="模板方法">模板方法</h2><p><code>模板方法</code>设计模式是最常用来避免<code>直接复制代码</code>的设计模式.</p>
<h3 id="1-_隔离变化">1. 隔离变化</h3><p> 所谓的隔离变化,概括起来说就是: </p>
<ul>
<li>对比两份或者多份代码,找出不同点</li>
<li>抽取出方法 (要求子类必须重写)</li>
<li>将公共代码作为模板类.</li>
<li>子类实现差异方法</li>
</ul>
<h3 id="2-创建模板类">2.创建模板类</h3><p>新建模板控制器 <code>GUIVaiidationTemplateController</code> </p>
<p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/template-refactoringQQ20150806-8@2x.png" alt=""></p>
<p>在编写模板类的时候,我的最佳实践步骤是: </p>
<ul>
<li>版本控制保存当前状态</li>
<li>拷贝重构好的代码到模板类</li>
<li>原控制器继承模板类</li>
<li>将差异抽取,并在子类中分别实现</li>
</ul>
<p>拷贝完毕的代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIVaiidationTemplateController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;SMS_SDK/SMS_SDK.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIHeader.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> secondsCoutDown;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSTimer</span>   *countDownTimer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> kLeftViewHeight = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> kLeftViewWidth  = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUIVaiidationTemplateController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UITextField</span> *phonenumberTextfield;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UITextField</span> *verifyCodeTextfield;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span>    *getVerifyCodeButton;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span>    *submitButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUIVaiidationTemplateController</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -life cycle</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = kcMainGrayBackgroud;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setupPhoneNumberTextField];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setupVerifiedCodeTextField];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setupGetVerifiyCodeButton];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setupSubmitButton];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillLayoutSubviews &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillLayoutSubviews];</span><br><span class="line">    </span><br><span class="line">    WSE(ws);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kTextFieldHeight = <span class="number">50</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.phonenumberTextfield</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">        make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">        make<span class="variable">.trailing</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">        make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(kTextFieldHeight);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.phonenumberTextfield</span><span class="variable">.mas_bottom</span>)<span class="variable">.with</span><span class="variable">.offset</span>(<span class="number">1</span>);</span><br><span class="line">        make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">        make<span class="variable">.trailing</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>)<span class="variable">.with</span><span class="variable">.offset</span>(-G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>);</span><br><span class="line">        make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(kTextFieldHeight);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>, kTextFieldHeight));</span><br><span class="line">        make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span><span class="variable">.mas_trailing</span>);</span><br><span class="line">        make<span class="variable">.bottom</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.submitButton</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">        make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>((G<span class="built_in">UIScreenWidth</span>-(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>))/<span class="number">2</span>);</span><br><span class="line">        make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span><span class="variable">.mas_bottom</span>)<span class="variable">.with</span><span class="variable">.offset</span>(<span class="number">60</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -  delegate</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -event response</span></span><br><span class="line">- (<span class="keyword">void</span>)getTheCodeAgain &#123;</span><br><span class="line">    </span><br><span class="line">    secondsCoutDown                  = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span><span class="variable">.enabled</span> = <span class="literal">NO</span>;</span><br><span class="line">    countDownTimer                   = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timeDown) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)nextStep:(<span class="built_in">UIButton</span> *)button &#123;</span><br><span class="line">    </span><br><span class="line">    [SMS_SDK commitVerifyCode:<span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span><span class="variable">.text</span> result:^(<span class="keyword">enum</span> SMS_ResponseState state) &#123;</span><br><span class="line">        <span class="keyword">if</span> (state == SMS_ResponseStateSuccess) &#123;</span><br><span class="line">            [MBProgressHUD showMessage:<span class="string">@"正在验证 ... "</span>];</span><br><span class="line">            [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:[[G<span class="built_in">UIChangePasswordController</span> alloc]init] animated:<span class="literal">YES</span>];</span><br><span class="line">            [MBProgressHUD hideHUD];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [MBProgressHUD showError:<span class="string">@"验证失败"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"><span class="preprocessor">#warning temp code ,remember to delete</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:[[G<span class="built_in">UIChangePasswordController</span> alloc]init] animated:<span class="literal">YES</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma  mark - share sdk sms</span></span><br><span class="line">- (<span class="keyword">void</span>)getVerifyCode:(<span class="built_in">UIButton</span> *)button &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.phonenumberTextfield</span><span class="variable">.text</span> == <span class="literal">nil</span>) &#123;</span><br><span class="line">        [MBProgressHUD showError:<span class="string">@"请先填写手机号码"</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *phoneNumber = <span class="keyword">self</span><span class="variable">.phonenumberTextfield</span><span class="variable">.text</span>;</span><br><span class="line">    </span><br><span class="line"><span class="preprocessor">#warning temp code ,remember to delete</span></span><br><span class="line">    <span class="built_in">NSArray</span>  *paths        = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line">    <span class="built_in">NSString</span> *documentPath = [paths lastObject];</span><br><span class="line">    <span class="built_in">NSString</span> *filePath     = [documentPath stringByAppendingPathComponent:<span class="string">@"resetPhoneNumber.plist"</span>];</span><br><span class="line">    [phoneNumber writeToFile:filePath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    [SMS_SDK getVerificationCodeBySMSWithPhone:phoneNumber zone:<span class="string">@"86"</span> result:^(SMS_SDKError *error) &#123;</span><br><span class="line">        <span class="comment">//save phone number to file</span></span><br><span class="line">        <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line">        <span class="built_in">NSString</span> *documentPath = [paths lastObject];</span><br><span class="line">        <span class="built_in">NSString</span> *filePath = [documentPath stringByAppendingPathComponent:<span class="string">@"resetPhoneNumber.plist"</span>];</span><br><span class="line">        [phoneNumber writeToFile:filePath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> getTheCodeAgain];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -private methods</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)timeDown &#123;</span><br><span class="line">    secondsCoutDown--;</span><br><span class="line">    <span class="keyword">if</span> (secondsCoutDown == <span class="number">0</span>) &#123;</span><br><span class="line">        [countDownTimer invalidate];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span><span class="variable">.enabled</span> = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> setTitle:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"请等待 %ld 秒"</span>, (<span class="keyword">long</span>)secondsCoutDown] forState:<span class="built_in">UIControlStateDisabled</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIImageView</span> *)textLeftViewWithImage:(<span class="built_in">UIImage</span> *)leftImage &#123;</span><br><span class="line">    <span class="built_in">UIImageView</span> *containerView = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">    <span class="built_in">UIImageView</span> *iconView      = [[<span class="built_in">UIImageView</span> alloc]init];</span><br><span class="line">    iconView<span class="variable">.image</span> = leftImage;</span><br><span class="line">    [containerView addSubview:iconView];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImageView</span> *seperatorView = [[<span class="built_in">UIImageView</span> alloc]init];</span><br><span class="line">    seperatorView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    [containerView addSubview:seperatorView];</span><br><span class="line">    <span class="comment">//set frame</span></span><br><span class="line">    containerView<span class="variable">.bounds</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kLeftViewWidth+<span class="number">20</span>, kLeftViewWidth);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewWH = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewX  = (kLeftViewWidth - iconViewWH)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewY  = (kLeftViewHeight - iconViewWH)/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    iconView<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(iconViewX, iconViewY, iconViewWH, iconViewWH);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorW = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorH = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorX = kLeftViewWidth-seperatorW;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorY = (kLeftViewHeight-seperatorH)/<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    seperatorView<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(seperatorX, seperatorY, seperatorW, seperatorH);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> containerView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupPhoneNumberTextField &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UITextField</span> *phonenumberTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_dianhua"</span>]];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.placeholder</span>     = <span class="string">@"您的手机号"</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    phonenumberTextfield<span class="variable">.clearButtonMode</span> = <span class="built_in">UITextFieldViewModeWhileEditing</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:phonenumberTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.phonenumberTextfield</span> = phonenumberTextfield;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupVerifiedCodeTextField &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UITextField</span> *verifyCodeTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_yanzhengma"</span>]];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.placeholder</span>     = <span class="string">@"输入验证码"</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:verifyCodeTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span> = verifyCodeTextfield;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupGetVerifiyCodeButton &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIButton</span> *getVerifyCodeButton = [[<span class="built_in">UIButton</span> alloc]init];</span><br><span class="line">    [getVerifyCodeButton setTitle:<span class="string">@"获取验证码"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton setBackgroundColor:kcMainRed];</span><br><span class="line">    [getVerifyCodeButton setTitleColor:kcMainGrayBackgroud forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(getVerifyCode:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:getVerifyCodeButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> = getVerifyCodeButton;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupSubmitButton &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIButton</span> *submitButton = [[<span class="built_in">UIButton</span> alloc] init];</span><br><span class="line">    [submitButton setTitle:<span class="string">@"下一步"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton setBackgroundColor:[<span class="built_in">UIColor</span> whiteColor]];</span><br><span class="line">    submitButton<span class="variable">.layer</span><span class="variable">.cornerRadius</span> = <span class="number">3</span>;</span><br><span class="line">    [submitButton setTitleColor:kcMainRed forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(nextStep:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:submitButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.submitButton</span> = submitButton;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -getters and setters</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>好的,现在开始对比两个子类. 两个子类的代码和上面的代码类似,就不上代码了. </p>
<p>以上面的代码为例,首先提取变化.</p>
<p>我粘贴完毕之后,发现在跳转控制器的地方,需要有这个控制器 <code>GUIChangePasswordController</code> ,而另一个注册的子类没有,所以这就是一个变化,应该将这个变化放到一个方法中.</p>
<p>在子类和模板类的方法有所不同, 模板类做的只是把方法提取出来,同时要求子类必须实现,自己不需要写具体的实现.</p>
<p>模板类中原代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[SMS_SDK commitVerifyCode:<span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span><span class="variable">.text</span> result:^(<span class="keyword">enum</span> SMS_ResponseState state) &#123;</span><br><span class="line">       <span class="keyword">if</span> (state == SMS_ResponseStateSuccess) &#123;</span><br><span class="line">           [MBProgressHUD showMessage:<span class="string">@"正在验证 ... "</span>];</span><br><span class="line">           [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:[[G<span class="built_in">UIChangePasswordController</span> alloc]init] animated:<span class="literal">YES</span>];</span><br><span class="line">           [MBProgressHUD hideHUD];</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           [MBProgressHUD showError:<span class="string">@"验证失败"</span>];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
<p>隔离变化后代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[SMS_SDK commitVerifyCode:<span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span><span class="variable">.text</span> result:^(<span class="keyword">enum</span> SMS_ResponseState state) &#123;</span><br><span class="line">    <span class="keyword">if</span> (state == SMS_ResponseStateSuccess) &#123;</span><br><span class="line">        [MBProgressHUD showMessage:<span class="string">@"正在验证 ... "</span>];</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:[<span class="keyword">self</span> pushTargetController] animated:<span class="literal">YES</span>];</span><br><span class="line">        [MBProgressHUD hideHUD];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [MBProgressHUD showError:<span class="string">@"验证失败"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>重头戏来了 ! OC中没有任何关键字能要求子类必须重写父类的方法.那么很多的设计模式是不是对OC就不适用了呢 ? 其实还是有方法的.</p>
<p>在OC 2.0之后 , 大家都用 @throw了,更符合规范,但是1.0的 NSAssert 更加简洁,谁优谁劣,自己选择.</p>
<p>对应的要求子类必须实现的代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">id</span>)pushTargetController&#123;</span><br><span class="line">    <span class="comment">//不写实现,子类必须重写此方法</span></span><br><span class="line">    <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInternalInconsistencyException</span> reason:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"方法: %@ 必须被子类实现"</span>,<span class="built_in">NSStringFromSelector</span>(_cmd)] userInfo:<span class="literal">nil</span>];</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到,写了异常代码之后,返回值也不是必须的了,爽 !</p>
<p>到两个子类中实现跳转代码,为了方便,我称呼为 子类A 和 子类B</p>
<p>子类A<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">id</span>)pushTargetController&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> [[G<span class="built_in">UIChangePasswordController</span> alloc]init];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>子类B</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">id</span>)pushTargetController&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [[G<span class="built_in">UISignupPasswordController</span> alloc]init];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最后一步">最后一步</h2><p>接下来的工作就比较简单暴力了. 把两个子类中完全相同的代码删掉.<br>将差异的部分提取到父类,抽取方法. 重复进行.</p>
<h2 id="收尾">收尾</h2><p>运行,测试.</p>
<p>子类A完整代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"GUIResetPasswordController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIChangePasswordController.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUIResetPasswordController</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -life cycle</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.title</span> = <span class="string">@"重置密码"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -  delegate</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -event response</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -private methods</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">id</span>)pushTargetController&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> [[G<span class="built_in">UIChangePasswordController</span> alloc]init];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark -getters and setters</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>子类B 代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUISignupPasswordController</span></span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.title</span> = <span class="string">@"用户注册"</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -life cycle</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -  delegate</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -event response</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -private methods</span></span><br><span class="line">-(<span class="keyword">id</span>)pushTargetController&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [[G<span class="built_in">UISignupPasswordController</span> alloc]init];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -getters and setters</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>清爽吧 ?</p>
<h2 id="结语">结语</h2><h3 id="注意点">注意点</h3><ul>
<li>要养成随手编译的好习惯,尤其是在重构代码的过程中,随时发现问题.</li>
<li>善用git svn等版本控制工具,它们是你的后悔药.</li>
</ul>
<h3 id="不要再拷贝代码了">不要再拷贝代码了</h3><p>就如刚才的例子,如果有新需求,需要更改样式或者其他内容,那我需要分别修改两个类.这还只是两个类,如果是10个,20个呢 ? 程序员加班多得原因之一,就是为自己的不规范负责.</p>
<p>使用了模板方法,其实只要维护一份代码即可,以后增加新的类 ,只需要继承模板 ,维护起来非常方便.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通过重构实现模板方法模式（Template Method）: 重构篇]]></title>
      <url>http://yoursite.com/2015/08/05/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E9%80%9A%E8%BF%87%E9%87%8D%E6%9E%84%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%EF%BC%88Template%20Method%20)%20%E9%87%8D%E6%9E%84%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>现在公司的项目中,有两个界面表现几乎完全一样的控制器.如图:</p>
<p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/template-refactoringQQ20150806-2@2x.png" alt=""><br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/template-refactoringQQ20150806-3@2x.png" alt=""></p>
<p>但是两者的行为是部分有差别的,当时编码过程中,遵循了<code>极限编程</code>的原则,尽快的写出可以实现功能的代码. 重构和使用模式的工作放在以后进行 . 以防止<code>过度设计</code>带来的问题.<br>写好一个界面之后,直接复制代码,修改了部分.这在什么时候来看,都是编写的最快方式,但是却不是好的设计和可维护方案.</p>
<p>所以现在要开始进行重构了.</p>
<a id="more"></a>
<h2 id="初始代码">初始代码</h2><p>下面是两个类之一的完整代码 .您不用完整阅读,因为在后面,我会逐一分解之:</p>
<p><code>GUIResetPasswordController.h</code>文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUIResetPasswordController</span> : <span class="title">UIViewController</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><code>GUIPhoneNumberModificationController.m</code>文件</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIResetPasswordController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIChangePasswordController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;SMS_SDK/SMS_SDK.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"GUIHeader.h"</span></span></span><br><span class="line"><span class="preprocessor">#define kLeftViewWith   (40)</span></span><br><span class="line"><span class="preprocessor">#define kLeftViewHeight (40)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GUIResetPasswordController</span> ()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UITextField</span> *phonenumberTextfield;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UITextField</span> *verifyCodeTextfield;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span>    *getVerifyCodeButton;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIButton</span>    *submitButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> secondsCoutDown;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSTimer</span>   *countDownTimer;</span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GUIResetPasswordController</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = kcMainGrayBackgroud;</span><br><span class="line">    [<span class="keyword">self</span> setupChildViews];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupChildViews &#123;</span><br><span class="line">    <span class="built_in">UITextField</span> *phonenumberTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_dianhua"</span>]];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.placeholder</span>     = <span class="string">@"您的手机号"</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    phonenumberTextfield<span class="variable">.clearButtonMode</span> = <span class="built_in">UITextFieldViewModeWhileEditing</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:phonenumberTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.phonenumberTextfield</span> = phonenumberTextfield;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UITextField</span> *verifyCodeTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_yanzhengma"</span>]];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.placeholder</span>     = <span class="string">@"输入验证码"</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:verifyCodeTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span> = verifyCodeTextfield;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIButton</span> *getVerifyCodeButton = [[<span class="built_in">UIButton</span> alloc]init];</span><br><span class="line">    [getVerifyCodeButton setTitle:<span class="string">@"获取验证码"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton setBackgroundColor:kcMainRed];</span><br><span class="line">    [getVerifyCodeButton setTitleColor:kcMainGrayBackgroud forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(getVerifyCode:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:getVerifyCodeButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> = getVerifyCodeButton;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIButton</span> *submitButton = [[<span class="built_in">UIButton</span> alloc] init];</span><br><span class="line">    [submitButton setTitle:<span class="string">@"下一步"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton setBackgroundColor:[<span class="built_in">UIColor</span> whiteColor]];</span><br><span class="line">    submitButton<span class="variable">.layer</span><span class="variable">.cornerRadius</span> = <span class="number">3</span>;</span><br><span class="line">    [submitButton setTitleColor:kcMainRed forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(nextStep:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:submitButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.submitButton</span> = submitButton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIImageView</span> *)textLeftViewWithImage:(<span class="built_in">UIImage</span> *)leftImage &#123;</span><br><span class="line">    <span class="built_in">UIImageView</span> *containerView = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">    <span class="built_in">UIImageView</span> *iconView      = [[<span class="built_in">UIImageView</span> alloc]init];</span><br><span class="line">    iconView<span class="variable">.image</span> = leftImage;</span><br><span class="line">    [containerView addSubview:iconView];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIImageView</span> *seperatorView = [[<span class="built_in">UIImageView</span> alloc]init];</span><br><span class="line">    seperatorView<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    [containerView addSubview:seperatorView];</span><br><span class="line">    <span class="comment">//set frame</span></span><br><span class="line">    containerView<span class="variable">.bounds</span> = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kLeftViewWith+<span class="number">20</span>, kLeftViewWith);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewWH = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewX  = (kLeftViewWith - iconViewWH)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> iconViewY  = (kLeftViewHeight - iconViewWH)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    iconView<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(iconViewX, iconViewY, iconViewWH, iconViewWH);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorW = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorH = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorX = kLeftViewWith-seperatorW;</span><br><span class="line">    <span class="built_in">CGFloat</span> seperatorY = (kLeftViewHeight-seperatorH)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    seperatorView<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(seperatorX, seperatorY, seperatorW, seperatorH);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> containerView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillLayoutSubviews &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillLayoutSubviews];</span><br><span class="line"></span><br><span class="line">    WSE(ws);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kTextFieldHeight = <span class="number">50</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.phonenumberTextfield</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">         make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">         make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">         make<span class="variable">.trailing</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">         make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(kTextFieldHeight);</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">         make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.phonenumberTextfield</span><span class="variable">.mas_bottom</span>)<span class="variable">.with</span><span class="variable">.offset</span>(<span class="number">1</span>);</span><br><span class="line">         make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>);</span><br><span class="line">         make<span class="variable">.trailing</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.view</span>)<span class="variable">.with</span><span class="variable">.offset</span>(-G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>);</span><br><span class="line">         make<span class="variable">.height</span><span class="variable">.mas_equalTo</span>(kTextFieldHeight);</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">         make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>, kTextFieldHeight));</span><br><span class="line">         make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span><span class="variable">.mas_trailing</span>);</span><br><span class="line">         make<span class="variable">.bottom</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span>);</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.submitButton</span> mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">         make<span class="variable">.size</span><span class="variable">.mas_equalTo</span>(<span class="built_in">CGSizeMake</span>(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">         make<span class="variable">.leading</span><span class="variable">.mas_equalTo</span>((G<span class="built_in">UIScreenWidth</span>-(G<span class="built_in">UIScreenWidth</span>/<span class="number">3</span>))/<span class="number">2</span>);</span><br><span class="line">         make<span class="variable">.top</span><span class="variable">.mas_equalTo</span>(ws<span class="variable">.verifyCodeTextfield</span><span class="variable">.mas_bottom</span>)<span class="variable">.with</span><span class="variable">.offset</span>(<span class="number">60</span>);</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)nextStep:(<span class="built_in">UIButton</span> *)button &#123;</span><br><span class="line"></span><br><span class="line">    [SMS_SDK commitVerifyCode:<span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span><span class="variable">.text</span> result:^(<span class="keyword">enum</span> SMS_ResponseState state) &#123;</span><br><span class="line">         <span class="keyword">if</span> (state == SMS_ResponseStateSuccess) &#123;</span><br><span class="line">             [MBProgressHUD showMessage:<span class="string">@"正在验证 ... "</span>];</span><br><span class="line">             [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:[[G<span class="built_in">UIChangePasswordController</span> alloc]init] animated:<span class="literal">YES</span>];</span><br><span class="line">             [MBProgressHUD hideHUD];</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             [MBProgressHUD showError:<span class="string">@"验证失败"</span>];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;];</span><br><span class="line"><span class="preprocessor">#warning temp code ,remember to delete</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.navigationController</span> pushViewController:[[G<span class="built_in">UIChangePasswordController</span> alloc]init] animated:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma  mark - share sdk sms</span></span><br><span class="line">- (<span class="keyword">void</span>)getVerifyCode:(<span class="built_in">UIButton</span> *)button &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.phonenumberTextfield</span><span class="variable">.text</span> == <span class="literal">nil</span>) &#123;</span><br><span class="line">        [MBProgressHUD showError:<span class="string">@"请先填写手机号码"</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *phoneNumber = <span class="keyword">self</span><span class="variable">.phonenumberTextfield</span><span class="variable">.text</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#warning temp code ,remember to delete</span></span><br><span class="line">    <span class="built_in">NSArray</span>  *paths        = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line">    <span class="built_in">NSString</span> *documentPath = [paths lastObject];</span><br><span class="line">    <span class="built_in">NSString</span> *filePath     = [documentPath stringByAppendingPathComponent:<span class="string">@"resetPhoneNumber.plist"</span>];</span><br><span class="line">    [phoneNumber writeToFile:filePath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    [SMS_SDK getVerificationCodeBySMSWithPhone:phoneNumber zone:<span class="string">@"86"</span> result:^(SMS_SDKError *error) &#123;</span><br><span class="line">         <span class="comment">//save phone number to file</span></span><br><span class="line">         <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line">         <span class="built_in">NSString</span> *documentPath = [paths lastObject];</span><br><span class="line">         <span class="built_in">NSString</span> *filePath = [documentPath stringByAppendingPathComponent:<span class="string">@"resetPhoneNumber.plist"</span>];</span><br><span class="line">         [phoneNumber writeToFile:filePath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">     &#125;];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> getTheCodeAgain];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)getTheCodeAgain &#123;</span><br><span class="line"></span><br><span class="line">    secondsCoutDown                  = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span><span class="variable">.enabled</span> = <span class="literal">NO</span>;</span><br><span class="line">    countDownTimer                   = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timeDown) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)timeDown &#123;</span><br><span class="line">    secondsCoutDown--;</span><br><span class="line">    <span class="keyword">if</span> (secondsCoutDown == <span class="number">0</span>) &#123;</span><br><span class="line">        [countDownTimer invalidate];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span><span class="variable">.enabled</span> = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> setTitle:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"请等待 %ld 秒"</span>, (<span class="keyword">long</span>)secondsCoutDown] forState:<span class="built_in">UIControlStateDisabled</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="重构代码">重构代码</h2><h3 id="发现代码的问题">发现代码的问题</h3><ul>
<li>首先,文件本身没有结构,阅读需要翻来翻去. 利用 Code Snippets 添加固定结构到文件顶部:</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -life cycle</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - <span class="title">&lt;#name#&gt;</span> delegate</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -event response</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -private methods</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark -getters and setters</span></span><br></pre></td></tr></table></figure>
<p>方法分门别类放好,最后可以从这里看到代码的结构了.</p>
<p><img src="http://7xkv7m.com1.z0.glb.clouddn.com/template-refactoringQQ20150806-7@2x.png" alt=""></p>
<p>关于这么组织的点子和原因,来源于<a href="http://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html" target="_blank" rel="external">这篇文章</a></p>
<p>我要还补充一点,就是对使用 xvim 插件的开发者们, 这方法是在爽爆了,当你在 <code>viewDidLoad</code> 中编写代码,需要一个新方法的时候,只需要:</p>
<ol>
<li>切换到命令模式 (我已经映射成了 zz)</li>
<li>按 <code>/</code> 输入你想写的方法的 mark ,比如 <code>private</code>,回车</li>
<li>按 <code>o</code></li>
</ol>
<p>一个熟练的 vim 使用者,整个过程也就2秒钟 ,那代码在你眼前飞动的感觉呦 ~</p>
<p>下面回归正题</p>
<h3 id="代码的不合理之处">代码的不合理之处</h3><p>从第一个方法 <code>viewDidLoad</code> 开始往下看</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#pragma mark -life cycle</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = kcMainGrayBackgroud;</span><br><span class="line">    [<span class="keyword">self</span> setupChildViews];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>似乎没有什么问题, 如果有强迫症可以把设置背景色提取一个方法.提取方法的原则是:<strong>你想给代码写注释了</strong> ,那么就把代码放到方法中,给方法起个意图明显的名字,哪怕只有一行代码 ! (因为注释都是邪恶的,不解释)</p>
<p>但是我觉得这里没有什么阅读困难,所以不去提取方法.</p>
<p>然后下一行 <code>[self setupChildViews];</code>,点击进去. okay,出现问题代码了.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupChildViews &#123;</span><br><span class="line">    <span class="built_in">UITextField</span> *phonenumberTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_dianhua"</span>]];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.placeholder</span>     = <span class="string">@"您的手机号"</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    phonenumberTextfield<span class="variable">.clearButtonMode</span> = <span class="built_in">UITextFieldViewModeWhileEditing</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:phonenumberTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.phonenumberTextfield</span> = phonenumberTextfield;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UITextField</span> *verifyCodeTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_yanzhengma"</span>]];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.placeholder</span>     = <span class="string">@"输入验证码"</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:verifyCodeTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span> = verifyCodeTextfield;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIButton</span> *getVerifyCodeButton = [[<span class="built_in">UIButton</span> alloc]init];</span><br><span class="line">    [getVerifyCodeButton setTitle:<span class="string">@"获取验证码"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton setBackgroundColor:kcMainRed];</span><br><span class="line">    [getVerifyCodeButton setTitleColor:kcMainGrayBackgroud forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(getVerifyCode:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:getVerifyCodeButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> = getVerifyCodeButton;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIButton</span> *submitButton = [[<span class="built_in">UIButton</span> alloc] init];</span><br><span class="line">    [submitButton setTitle:<span class="string">@"下一步"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton setBackgroundColor:[<span class="built_in">UIColor</span> whiteColor]];</span><br><span class="line">    submitButton<span class="variable">.layer</span><span class="variable">.cornerRadius</span> = <span class="number">3</span>;</span><br><span class="line">    [submitButton setTitleColor:kcMainRed forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(nextStep:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:submitButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.submitButton</span> = submitButton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法违背了<code>单一职责原则</code>.就是一个方法做了太多事情. 下面通过 <code>提取方法</code> 的重构手法进行重构.</p>
<p>最终代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupChildViews &#123;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupPhoneNumberTextField];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupVerifiedCodeTextField];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupGetVerifiyCodeButton];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setupSubmitButton];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupPhoneNumberTextField &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UITextField</span> *phonenumberTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_dianhua"</span>]];</span><br><span class="line">    phonenumberTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.placeholder</span>     = <span class="string">@"您的手机号"</span>;</span><br><span class="line">    phonenumberTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    phonenumberTextfield<span class="variable">.clearButtonMode</span> = <span class="built_in">UITextFieldViewModeWhileEditing</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:phonenumberTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.phonenumberTextfield</span> = phonenumberTextfield;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupVerifiedCodeTextField &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UITextField</span> *verifyCodeTextfield = [[<span class="built_in">UITextField</span> alloc]init];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftView</span>        = [<span class="keyword">self</span> textLeftViewWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"zhuce_yanzhengma"</span>]];</span><br><span class="line">    verifyCodeTextfield<span class="variable">.leftViewMode</span>    = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.placeholder</span>     = <span class="string">@"输入验证码"</span>;</span><br><span class="line">    verifyCodeTextfield<span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:verifyCodeTextfield];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.verifyCodeTextfield</span> = verifyCodeTextfield;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupGetVerifiyCodeButton &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIButton</span> *getVerifyCodeButton = [[<span class="built_in">UIButton</span> alloc]init];</span><br><span class="line">    [getVerifyCodeButton setTitle:<span class="string">@"获取验证码"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton setBackgroundColor:kcMainRed];</span><br><span class="line">    [getVerifyCodeButton setTitleColor:kcMainGrayBackgroud forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [getVerifyCodeButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(getVerifyCode:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:getVerifyCodeButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.getVerifyCodeButton</span> = getVerifyCodeButton;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupSubmitButton &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIButton</span> *submitButton = [[<span class="built_in">UIButton</span> alloc] init];</span><br><span class="line">    [submitButton setTitle:<span class="string">@"下一步"</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton setBackgroundColor:[<span class="built_in">UIColor</span> whiteColor]];</span><br><span class="line">    submitButton<span class="variable">.layer</span><span class="variable">.cornerRadius</span> = <span class="number">3</span>;</span><br><span class="line">    [submitButton setTitleColor:kcMainRed forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [submitButton addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(nextStep:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.view</span> addSubview:submitButton];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.submitButton</span> = submitButton;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于对变量命名的改进,我待会自己做了,就不写出来了</p>
<p>通过重构,整个结构变得清爽. 但是有出现了一个新问题: 在 <code>viewDidLoad</code>中对 <code>setupChildViews</code> 的调用显得有点不平衡(个人觉得),更重要的原因,以后我要采用<code>模板方法</code>这个模式,过深的调用层级,子类重写方法的时候,需要开发者过多精力.所以,我采用 <code>内联方法</code>将函数的实现放到调用函数的地方.</p>
<p>删除 <code>setupChildViews</code> ,将实现放到 <code>viewDidLoad</code> 中</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = kcMainGrayBackgroud;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setupPhoneNumberTextField];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setupVerifiedCodeTextField];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setupGetVerifiyCodeButton];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setupSubmitButton];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此,我觉得方法就这样吧. 接下来找变量的问题. 第一眼看到的就是两个宏:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#define kLeftViewWidth   (40)</span></span><br><span class="line"><span class="preprocessor">#define kLeftViewHeight (40)</span></span><br></pre></td></tr></table></figure>
<p>记得在哪里读过 ,在值替换上使用宏是一个不好的习惯(宏有自己不可替换的功能,这里不做讨论).因为有全局变量可以实现它的功能,更重要的是编译器会对全局变量的类型等进行检查,降低出错的几率.</p>
<p>所以修改如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> kLeftViewHeight = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> kLeftViewWidth  = <span class="number">40</span>;</span><br></pre></td></tr></table></figure>
<h2 id="结语">结语</h2><p>好了,重构篇就先到此了, 可以肯定的是,这样去做<code>模板方法</code>模式,是不够的,因为没有隔离出变化.但是我准备把这项工作放到下一篇中,毕竟要先遇到问题,再去解决问题才是好的做法</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIWebView执行JS的几个注意点]]></title>
      <url>http://yoursite.com/2015/08/04/iOS%20Tips/UIWebView%E6%89%A7%E8%A1%8CJS%E7%9A%84%E5%87%A0%E4%B8%AA%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>这是一个给培训的同学写的Demo,概括起来的几个特点是:</p>
<ul>
<li>无法和服务器沟通,只能在iOS端这里更改网页</li>
<li>需要隐藏两个html组件</li>
</ul>
<p>这是没有修改的网页的<a href="http://m.shijieyou.com/mdetail-3445464-0-%5BLjava.lang.String;@6625086c" target="_blank" rel="external">地址</a> ,可以看到,顶部和底部有网页原来的两个条,需要隐藏,来实现如下的效果:<br><img src="http://7xkv7m.com1.z0.glb.clouddn.com/UIWebViewGVS9U@{[OH%25D9%257D$5DARPT.jpg" alt=""></p>
<a id="more"></a>
<h2 id="执行JS的坑">执行JS的坑</h2><p>首先, 在电脑端利用浏览器进行调试 , 得到可正确执行的 JS代码,如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function getElementsClass(classnames)&#123;</span><br><span class="line">    var classobj = new Array();       <span class="comment">//定义数组</span></span><br><span class="line"></span><br><span class="line">    var classint = <span class="number">0</span>;      <span class="comment">//定义数组的下标</span></span><br><span class="line"></span><br><span class="line">    var tags = document<span class="variable">.getElementsByTagName</span>(<span class="string">"*"</span>);      <span class="comment">//获取HTML的所有标签</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (var i <span class="keyword">in</span> tags) &#123;      <span class="comment">//对标签进行遍历</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tags[i]<span class="variable">.nodeType</span> == <span class="number">1</span>) &#123;<span class="comment">//判断节点类型</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tags[i]<span class="variable">.getAttribute</span>(<span class="string">"class"</span>) == classnames) &#123;<span class="comment">//判断和需要CLASS名字相同的，并组成一个数组</span></span><br><span class="line"></span><br><span class="line">                classobj[classint] = tags[i];</span><br><span class="line"></span><br><span class="line">                classint++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> classobj;<span class="comment">//返回组成的数组</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window<span class="variable">.onload</span> = function() &#123;</span><br><span class="line"></span><br><span class="line">    var topBar = getElementsClass(<span class="string">"navbar"</span>);</span><br><span class="line">    topBar[<span class="number">0</span>]<span class="variable">.style</span><span class="variable">.display</span> = <span class="string">"none"</span>;</span><br><span class="line">    topBar[<span class="number">1</span>]<span class="variable">.style</span><span class="variable">.display</span> = <span class="string">"none"</span>;</span><br><span class="line">    var bottomBar = getElementsClass(<span class="string">"toolbar"</span>);</span><br><span class="line">    bottomBar[<span class="number">0</span>]<span class="variable">.style</span><span class="variable">.display</span> = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="执行JS">执行JS</h2><p>重点来了 ,由于在公司开发的 ,都有服务器端作为配合,所以用UIWebView执行JS来修改html代码这种需求 ,对工作中的开发者并不常见. 所以在使用的时候, 遇到了一些问题:</p>
<p>进入头文件:</p>
<p>找到了可以直接拼接 JS 的方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (nullable <span class="built_in">NSString</span> *)stringByEvaluatingJavaScriptFromString:(<span class="built_in">NSString</span> *)script;</span><br></pre></td></tr></table></figure>
<p>然后就是拼接了,看到这么多行, 肯定不能用手写了 .于是 ,我很得意的利用正则表达式工具,给每行拼接了成了 <code>[string appendString:@&quot;blablabla...&quot;];</code> 这样的形式</p>
<p>发现不执行,重点是修改JS代码也变得十分困难了.后来才愚蠢的想到可以将JS放到文件中… ,使用如下代码加载:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"disappear"</span> ofType:<span class="string">@"js"</span>];</span><br><span class="line">  <span class="built_in">NSString</span> *jsString = [[<span class="built_in">NSString</span> alloc] initWithContentsOfFile:filePath];</span><br></pre></td></tr></table></figure>
<p>再一个关键的问题, 就是何时让 UIWebView执行这段代码 ,首先想到的,是代理方法 . </p>
<p>一共有四个代理方法 ,根据名字可以非常容易知道其调用的时机 .</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 将要开始加载请求</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 已经开始加载请求</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webViewDidStartLoad:(<span class="built_in">UIWebView</span> *)webView;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 请求加载完毕</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 请求加载失败</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">UIWebView</span> *)webView didFailLoadWithError:(nullable <span class="built_in">NSError</span> *)error;</span><br></pre></td></tr></table></figure>
<p>一开始想到的是 , 加载完毕 , 然后执行 JS .于是在加载完毕代理方法中拼接JS ,结果不执行.</p>
<p>后来尝试了开始加载的两个方法.</p>
<p>经过多方尝试. 写出如下代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.mainWebView</span><span class="variable">.delegate</span>        = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">NSString</span> *filePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"disappear"</span> ofType:<span class="string">@"js"</span>];</span><br><span class="line">   <span class="built_in">NSString</span> *jsString = [[<span class="built_in">NSString</span> alloc] initWithContentsOfFile:filePath];</span><br><span class="line">   [<span class="keyword">self</span><span class="variable">.mainWebView</span> stringByEvaluatingJavaScriptFromString:jsString];</span><br><span class="line"></span><br><span class="line">   <span class="built_in">NSURL</span>        *url     = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://m.shijieyou.com/mdetail-3445464-0-%5BLjava.lang.String;@6625086c"</span>];</span><br><span class="line">   <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</span><br><span class="line">   [<span class="keyword">self</span><span class="variable">.mainWebView</span> loadRequest:request];</span><br></pre></td></tr></table></figure>
<p>成功实现功能 </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常见问题之过度设计和设计不足]]></title>
      <url>http://yoursite.com/2015/08/01/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8B%E8%BF%87%E5%BA%A6%E8%AE%BE%E8%AE%A1%E5%92%8C%E8%AE%BE%E8%AE%A1%E4%B8%8D%E8%B6%B3/</url>
      <content type="html"><![CDATA[<p><strong>每个从事软件开发的人 , 都会强调设计模式的重要性.</strong></p>
<h2 id="过度设计">过度设计</h2><p>软件模式的伟大之处 ,在于它们传递了了许多有用的思想 . 那么我们在学习了大量的设计模式之后,就理当成为一个优秀的软件设计和开发者 ,对吧 ? 模式帮助我们开发灵活的框架 ,帮助我们构建健壮 , 拓展性强的软件系统 . 但是现在的现状是 ,非常熟知设计模式的开发者 ,在工作中, 经常会犯过度设计的错误 .</p>
<p>所谓的过度设计 ,就是”杀鸡用了牛刀” .有些程序员这么做, 是因为它们认为自己正确地估计了软件系统的未来需求 . 他们急于这种未来的需求,应用各种设计模式 , 让软件系统能够更加灵活, 可拓展 . 但是能做到这种未卜先知的人又有几个呢 ? 如果估计错误 ,就要对繁冗的代码进行调整 .相应地 ,开发新功能和解决缺陷的时间就被减少了 .</p>
<p>说到对软件设计模式的偏执 , 这个还是非常容易理解的 . 小时候 ,我们得了一件新玩具 ,总是特别希望在小伙伴面前好好显摆显摆 .</p>
<h2 id="设计不足">设计不足</h2><p>相对于过度设计 , 设计不足要常见的多 (过度设计起码需要你掌握一些设计模式) . 设计不足是指开发的软件设计不良 . 其产生的原因有如下几个:</p>
<ul>
<li>程序员没有时间进行重构</li>
<li>程序员在何为好的软件设计方面知识不足</li>
<li>程序员呗要求在既有的系统中快速地添加功能</li>
<li>程序员被迫同时进行太多项目.</li>
</ul>
<p>随着时间的推移 , 设计不足的软件将变成昂贵的,难以维护甚至无法维护的大麻烦.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[func的参数修饰符]]></title>
      <url>http://yoursite.com/2015/07/30/Swift/func%E7%9A%84%E5%8F%82%E6%95%B0%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h3 id="参数默认是_let_类型的">参数默认是 let 类型的</h3><p>一般省略函数参数的修饰符 ,我们并没有指定它是什么类型</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func incrementor(variable: Int) -&gt;Int&#123;</span><br><span class="line">    <span class="keyword">return</span> variable + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认是  let ,比如下面的是错误代码 , 因为 let 不可变</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func incrementor(variable: Int) -&gt;Int&#123;</span><br><span class="line">    <span class="keyword">return</span> ++variable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>仔细看错误提示:<br><code>Mark parameter with &#39;var&#39; to make it mutable</code></p>
<p>需要显式写 var </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func incrementor(var variable: Int) -&gt;Int&#123;</span><br><span class="line">    <span class="keyword">return</span> ++variable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="inout">inout</h3><p>函数参数是值传递,就是说,不会改变外部参数的值,比如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var number = <span class="number">7</span></span><br><span class="line">let newNumber =  incrementor(number)</span><br><span class="line">number</span><br></pre></td></tr></table></figure>
<p>newNumber是 8 , number 还是 7 .</p>
<p>如果想要修改,那么就应该加上 inout修饰参数</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func incrementor(<span class="keyword">inout</span> variable: Int) -&gt;Int&#123;</span><br><span class="line">    <span class="keyword">return</span> ++variable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在是引用传递, 那么 ,我们在传递的时候,应该传递的是引用(地址)而不是参数.用法如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let newNumber =  incrementor(&amp;number)</span><br></pre></td></tr></table></figure>
<p>一般的,这样的函数,是不用返回值的.因为已经直接修改了参数<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func incrementor(<span class="keyword">inout</span> variable: Int)&#123;</span><br><span class="line">   ++variable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数的参数修饰是有传递限制的,就是说对于跨越层级的调用,需要保证同一参数的修饰符是统一的,比如我们基于上一个方法进行拓展,实现 +N 的方法.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func makeIncrementor(addNumber: Int) -&gt;((<span class="keyword">inout</span> Int)-&gt;())&#123;</span><br><span class="line">    func incrementor(<span class="keyword">inout</span> variable: Int)&#123;</span><br><span class="line">        variable += addNumber</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> incrementor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>外层 makeIncrementor 的返回里也需要在参数的类型前面明确指出修饰词,让它和内部的定义一致,否则编译不通过.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自用Xcode插件整理]]></title>
      <url>http://yoursite.com/2015/07/20/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E8%87%AA%E7%94%A8Xcode%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="RTImageAssets">RTImageAssets</h2><p>根据某张图片自动生成 1x 2x 3x的图片 ,还有关于App图标的功能.</p>
<p><a href="https://github.com/rickytan/RTImageAssets" target="_blank" rel="external">项目地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xvim相关]]></title>
      <url>http://yoursite.com/2015/07/05/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/xvim%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h2 id="配置常用功能">配置常用功能</h2><p>用户目录下的  .xvimrc 如果没有,新建一个即可<br>touch .xvimrc</p>
<h3 id="设置按钮映射">设置按钮映射</h3><p><code>imap zz &lt;Esc&gt;</code> 映射 zz 为 Esc 的功能<br><code>set ic</code> set ignore case 搜索的时候,忽略大小写</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xocde插件失效解决[转载]]]></title>
      <url>http://yoursite.com/2015/06/05/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/Xocde%E6%8F%92%E4%BB%B6%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3-%E8%BD%AC%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>XCode的插件大大丰富了XCode的功能，而且有了Alcatraz，插件的管理也非常容易，像我这种Vim党完全离不开XVim。但是有个非常恼人的问题：一旦升级XCode，插件就失效！<br>之前XCode升级到6.2的时候遇到过插件失效的问题，Google之后把一段很长命令复制到Terminal后运行一下即可，当时一看解决了， 顿时觉得满足感爆棚，自己可以拯救地球了~就没有再深入，结果升级到6.3时又遇到了。“同样的招式对圣斗士是不能使用第二次的！”，同样的坑对有节操的 程序员是不能掉进去第二次的！因此这一次一定要搞清楚为什么会这样，以后再次遇到了如何解决。<br><a id="more"></a></p>
<h2 id="问题原因">问题原因</h2><p>XCode的插件放置在目录<code>~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins</code>目录下，为<code>.xcplugin</code>格式。通过<code>Show Content</code>可以看到<code>xcplugin</code>中存在一个<code>Info.plist</code>，其中有一项为<code>DVTPlugInCompatibilityUUIDs</code>，而这就是插件失效的原因。<br>由于Apple没有公开插件开发的相关资料，这里我只能通过命名跟值猜测<code>DVTPlugInCompatibilityUUIDs</code>的作用：插件通过<code>DVTPlugInCompatibilityUUIDs</code>来指定能够运行此插件的XCode版本。 因此，<code>DVTPlugInCompatibilityUUIDs</code>中存放的是XCode版本对应的UUID，XCode在启动加载控件时，将当前UUID同 插件<code>Info.plist</code>中<code>DVTPlugInCompatibilityUUIDs</code>存放的UUID数组进行匹配，如果没有匹配项，说明此插件无法在该版 本的XCode运行，插件也就失效了。</p>
<h2 id="解决办法">解决办法</h2><p>解决办法非常简单：将当前版本的UUID加到<code>DVTPlugInCompatibilityUUIDs</code>中即可。但是插件比较多（1个及以上）的情况 下，一个个的打开修改非常无聊跟低效，作为“懒惰”的程序员，这时候就要用上命令行，让重复劳动自动化。思路为将命令分为两部分：<br>通过<code>find</code>命令在插件目录下找到所有插件的<code>Info.plist</code>文件<br>通过<code>xargs</code>命令对上一步的搜索结果进行“for循环”（就这样理解吧），针对每一个<code>Info.plist</code>文件，利用<code>defaults write</code>命令将当前版本的<code>UUID</code>加到<code>DVTPlugInCompatibilityUUIDs</code>中。<br>此时问题来了，挖掘机技术。。。不对，是如何获取当前版本XCode的UUID呢？首先关掉XCode，打开Terminal，输入<code>tail -f /var/log/system.log</code>，再次打开XCode，就能看到如下log信息:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[MT] PluginLoading: Required plug-<span class="keyword">in</span> compatibility U<span class="built_in">UID</span> <span class="number">9</span>F75337B-<span class="number">21</span>B4-<span class="number">4</span>ADC-B558-F9<span class="built_in">CADF7073A7</span> <span class="keyword">for</span> plug-<span class="keyword">in</span> at path ‘~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/Alcatraz<span class="variable">.xcplugin</span>’ not present <span class="keyword">in</span> DVTPlugInCompatibilityU<span class="built_in">UIDs</span></span><br></pre></td></tr></table></figure>
<p>可以看到，log信息表明XCode加载插件失败的原因，并且能够看到当前版本（6.3）XCode的UUID为9F75337B-21B4-4ADC-B558-F9CADF7073A7。经过@Kyrrr的提醒，有一种更好的方式来获取当前版本XCode的UUID：通过defaults read命令从XCode的Info.plist读取DVTPlugInCompatibilityUUID。<br>最终的命令为：</p>
<pre><code class="objc">find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -name Info<span class="variable">.plist</span> -maxdepth <span class="number">3</span> | xargs -I{} defaults write {} DVTPlugInCompatibilityU<span class="built_in">UIDs</span> -array-add `defaults read /Applications/Xcode<span class="variable">.app</span>/Contents/Info<span class="variable">.plist</span> DVTPlugInCompatibilityU<span class="built_in">UID</span>`
</code></pre>
<p>在Terminal中运行上述命令就解决了插件失效的问题，在插件<code>Info.plist</code>的<code>DVTPlugInCompatibilityUUIDs</code>中也能看到新增的<code>UUID</code>了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tip9 以类族模式隐藏实现细节]]></title>
      <url>http://yoursite.com/2015/06/04/iOS%20Tips/Tip9%20%E4%BB%A5%E7%B1%BB%E6%97%8F%E6%A8%A1%E5%BC%8F%E9%9A%90%E8%97%8F%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>类族是一种很有用的模式,可以隐藏抽象基类背后的细节.OC的系统框架中,普遍使用这个模式.</p>
<p>一个例子: UIButton<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> * button = [<span class="built_in">UIButton</span> buttonWithType];</span><br></pre></td></tr></table></figure></p>
<p>该方法返回的对象类型取决于传入的 <code>type</code> ,不同的<code>type</code>决定了这个 button 将来的一些属性的不同(或者说可供设置的属性的不同)</p>
<p>要实现类似的功能,如果不用类族,那么还可能是一个类中的枚举.比如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) drawRect:(<span class="built_in">CGRect</span>)rect&#123;</span><br><span class="line">	<span class="keyword">if</span>(_type == typeA)&#123;</span><br><span class="line">		<span class="comment">//绘制一个 typeA 类型的 Button</span></span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (_type == typeB)&#123;</span><br><span class="line">		<span class="comment">//绘制一个 typeB 类型的 Button</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个简单的类型,这么看来没有问题,但是如果类型太多,这样就显得非常笨拙了.</p>
<p>稍微聪明一点的程序员,会把这样的代码重构.不同的实现放到子类中,父类中存放公共代码.但是这样也有一个缺点,就是开发者需要知道所有的子类.</p>
<p>现在类族的好处就显而易见了.</p>
<h2 id="一个自定义的类族">一个自定义的类族</h2><p>假设我们有一个 Person 类,Person 分为不同的职业.有老师,学生,医生.那么类族的实现应该是:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>,PersonType) &#123;</span><br><span class="line">    PersonTypeDoctor,</span><br><span class="line">    PersonTypeTeacher,</span><br><span class="line">    PersonTypeStudent</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">+ (Person *) personWithType:(PersonType)type&#123;</span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> PersonTypeDoctor:</span><br><span class="line">            <span class="keyword">return</span> [[PersonDoctor alloc]init];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PersonTypeTeacher:</span><br><span class="line">            <span class="keyword">return</span> [[PersonTypeTeacher alloc]init];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PersonTypeStudent:</span><br><span class="line">            <span class="keyword">return</span> [[PersonTypeStudent alloc]init];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Currying]]></title>
      <url>http://yoursite.com/2015/06/03/Swift/Currying/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>最近开始读喵神的书,书是好书,就是非常概略,不利于 Swift 基础薄弱的童鞋,所以,借着自己阅读的理解和查阅的资料,把每个知识点扩充一下.</p>
<h2 id="Currying">Currying</h2><p><strong>Currying就是把一个多参数的方法，拆解为只有第一个参数的方法，这个方法的返回值不是一个具体的值，而是一个新的方法，这个方法的参数是原先的方法刨去第一个参数后的“剩下的方法的片段”，可以理解为，把一个多参数方法只作为某一种模板</strong></p>
<h2 id="基本写法">基本写法</h2><p>基本结构:</p>
<p>func <code>function name</code> (<code>parameters</code>)(<code>parameters</code>)-&gt;<code>return type</code>{<br>    <code>statements</code><br>}</p>
<p>一个 Currying<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func add(originValue: Int)(inputValue: Int) -&gt; Int &#123;</span><br><span class="line">        <span class="keyword">return</span> originValue + inputVlue</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这个写法就是 <code>currying</code> 函数的基本写法,<code>originValue</code> 是他的固定的基数(或者说基础参数). <code>inputValue</code>是以后调用的不同的输入值.基础参数构建了一个类似模板的东西,而输入值构建了我们想要的最终结果.</p>
<p>使用:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let addWith10 = add(<span class="number">10</span>)</span><br><span class="line">let addWith100 = add(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p>以上,分别构建了一个以 10 和100 为基数的方法.它们都是新的方法,但是是我们最开始方法的一部分,如果要使用:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let result1 = addWith10(inputValue: <span class="number">1</span>)</span><br><span class="line">let result2 = addWith100(inputValue: <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>result1的结果是  11<br>result2的结果是  101</p>
<p>以上就是 Currying 的一个小剖析,下面我们从一般函数入手,看看Currying到底是怎么演化的.</p>
<h2 id="从函数开始">从函数开始</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func sum(a: Int,b: Int) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>)   <span class="comment">//输出3</span></span><br></pre></td></tr></table></figure>
<p>这是一个非常简单的函数,如果用 Currying 的写法,会变成:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func sum(a: Int)(b: Int) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">var sumByFirst = sum(<span class="number">1</span>)</span><br><span class="line">sumByFirst(b: <span class="number">4</span>) <span class="comment">//输出5</span></span><br></pre></td></tr></table></figure>
<p>只需要传入第一个参数，返回的sumByFirst是一个函数，它包含剩余的其他参数，以及刚刚传入进去的那个1，接着以它自己作为方法传入第二个参数b就行了。<br>如果是三个参数就像这样： </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func sum(a: Int)(b: Int)(c: Int) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line">var sumByFirst = sum(<span class="number">1</span>)</span><br><span class="line">var sumBySecond = sumByFirst(b: <span class="number">4</span>)</span><br><span class="line">sumBySecond(c: <span class="number">10</span>)  <span class="comment">//输出15</span></span><br></pre></td></tr></table></figure>
<p>除了第一个参数以外，其他的参数都要显式地写上参数标签，并且要按参数排列的顺序调用。<br>一个括号中放两个参数也可以： </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func sum(a: Int)(b: Int, c: Int) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line">var sumByFirst = sum(<span class="number">1</span>)</span><br><span class="line">sumByFirst(b: <span class="number">4</span>,c: <span class="number">10</span>)  <span class="comment">//输出15</span></span><br></pre></td></tr></table></figure>
<p>在某些情况下，你可能会用某个相同的参数重复调用某个方法，那么利用柯里化会使代码更易于维护：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func sum(a: Int)(b: Int) -&gt; Int &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">var sumWithFive = sum(<span class="number">5</span>)</span><br><span class="line">sumWithFive(b: <span class="number">5</span>)</span><br><span class="line">sumWithFive(b: <span class="number">10</span>)</span><br><span class="line">sumWithFive(b: <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<p>因为 Swift 的 Selector  只能通过字符串生成,这会面临一个很严重的问题,就是难以重构,并且无法在编译期间进行检查,这是非常危险的行为.但是利用方法的 Currying ,我们可以解决这个问题.</p>
<p>参考网址:</p>
<p><a href="http://blog.csdn.net/zhangao0086/article/details/38851759" target="_blank" rel="external">http://blog.csdn.net/zhangao0086/article/details/38851759</a></p>
<p><a href="http://www.tuicool.com/articles/bMBjUfn" target="_blank" rel="external">http://www.tuicool.com/articles/bMBjUfn</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[新版多说的配置]]></title>
      <url>http://yoursite.com/2015/06/03/%E4%B8%BB%E9%A1%B5%E7%BB%B4%E6%8A%A4%E8%AE%B0%E5%BD%95/%E6%96%B0%E7%89%88%E5%A4%9A%E8%AF%B4%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>最近给博客更换了一款主题,但是发现多说评论失效了,用一期的配置方法进行配置,还报错.现在重新整理</p>
<h2 id="前提">前提</h2><p>已经注册多说开发者帐号,并且创建了应用.</p>
<h2 id="步骤">步骤</h2><ol>
<li><p>取消HEXO博客根目录中的 _config.yml 中 disqus_shortname: ，暂时不用这个功能，直接永久开启多说评论。(如果没有此参数,可以忽略)</p>
</li>
<li><p>打开 <code>themes\light\layout_partial\comment.ejs</code> (如果没有,请创建)将你的通用代码粘贴进来,并修改三处地方:</p>
</li>
</ol>
<p><code>data-thread-key=&quot;&lt;%= page.path %&gt;</code><br><code>data-title=&quot;&lt;%= page.title %&gt;&quot;</code><br><code>data-url=&quot;&lt;%= page.permalink %&gt;&quot;</code></p>
<p>最终我的完整代码:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 多说评论框 start --&gt;</span><br><span class="line">	&lt;div class="ds-thread" data-thread-key="&lt;%= page.path %&gt;" data-title="&lt;%= page.title %&gt;" data-url="&lt;%= page.permalink %&gt;"&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 多说评论框 end --&gt;</span><br><span class="line">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">var duoshuoQuery = &#123;short_name:"guiqingblog"&#125;;</span><br><span class="line">	(function() &#123;</span><br><span class="line">		var ds = document.createElement('script');</span><br><span class="line">		ds.type = 'text/javascript';ds.async = true;</span><br><span class="line">		ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';</span><br><span class="line">		ds.charset = 'UTF-8';</span><br><span class="line">		(document.getElementsByTagName('head')[0] </span><br><span class="line">		 || document.getElementsByTagName('body')[0]).appendChild(ds);</span><br><span class="line">	&#125;)();</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;!-- 多说公共JS代码 end --&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>打开<code>themes\light\layout_partial\article.ejs</code><br>在最后一行加上如下代码</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(!index)&#123; %&gt;</span><br><span class="line">&lt;%- partial('comment') %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<h2 id="后记">后记</h2><p>在早期版本,第二步骤中的三个文章参数不是必须的,但是新版中,如果不配置,会报错.样式也不能正常显示 .</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[定位程序崩溃点的方法探究]]></title>
      <url>http://yoursite.com/2015/06/03/iOS%20Tips/%E5%AE%9A%E4%BD%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E7%82%B9%E7%9A%84%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>昨天遇到问题,当我的 NavitgationController back 的时候,程序崩溃,诡异的地方是: 控制台完全没有任何打印,崩溃的断点直接回到了 main 函数中.</p>
<h2 id="几个尝试">几个尝试</h2><p>想到之前曾经读过一篇出现在这样情景崩溃的文章:有对象依赖被 pop 的控制器,结果导致了崩溃,但是经过仔细排查,发现并没有这样的情况.</p>
<h2 id="查找资料">查找资料</h2><p>网上对崩溃问题的定位常规方法总结起来有:</p>
<h3 id="1-添加通用断点">1.添加通用断点</h3><ol>
<li>选择 BreakPoint Navigator,点击右下角的 ‘+’ ,然后在弹窗中选择 ‘Add Exception BreakPoint’<br><img src="http://i1.tietuku.com/e8b80841e86eb86a.png"></li>
</ol>
<p><img src="http://i1.tietuku.com/de970099a16ad135.png"></p>
<ol>
<li>右键断点,选择 ‘Edit BreakPoint’,检查设置如下<br><img src="http://i1.tietuku.com/d135fc352fd61583.png"></li>
</ol>
<p>然后运行程序,程序就能定位到出现崩溃的代码.</p>
<p>但是很遗憾的是,这种方式只能解决大部分的问题(比如不识别的selector 等),有很多类型的崩溃它是不能定位的 </p>
<p>比如出现 <code>EXEC_BAD_ACCESS</code>这种错误,以上的方法是不能定位的.</p>
<h3 id="2-重写object的respondsToSelector方法">2.重写object的respondsToSelector方法</h3><p>1.重写object的respondsToSelector方法，现实出现EXEC_BAD_ACCESS前访问的最后一个object.因为有时候程序崩溃根本不知错误发生在什么地方。</p>
<p>在可能出现问题的 .m 或者.mm 文件中加入以下代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#ifdef _FOR_DEBUG_  </span></span><br><span class="line">-(<span class="built_in">BOOL</span>) respondsToSelector:(SEL)aSelector &#123;  </span><br><span class="line">    printf(<span class="string">"SELECTOR: %s\n"</span>, [<span class="built_in">NSStringFromSelector</span>(aSelector) UTF8String]);  </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> respondsToSelector:aSelector];  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="preprocessor">#endif</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在 <code>other c flags</code>中加入<code>-D _FOR_DEBUG_</code>（记住请只在<code>Debug Configuration</code>下加入此标记）,这样当你程序崩溃时，Xcode的console上就会准确地记录了最后运行的object的方法。</li>
</ol>
<p><img src="http://i1.tietuku.com/4399070fa7215690.png"><br>很不幸,这样还是没有定位我出现问题的代码.</p>
<h2 id="最终方案">最终方案</h2><p>首先说一下 EXC_BAD_ACCESS 这个错误，可以这么说，90%的错误来源在于对一个已经释放的对象进行release操作.那么我们应该启用 僵尸对象.方法如下:</p>
<p><code>Product-&gt;Scheme-&gt;Edit Scheme-&gt;Arguments 的 Environment Variables 中，增加标计位NSZombieEnabled设为YES)</code>objc<br><img src="http://i1.tietuku.com/d7c5ed9195b06916.png"></p>
<p>这样,就能看到崩溃的具体原因了.但是如果想知道代码,这个<a href="http://www.jb51.net/article/38948.htm" target="_blank" rel="external">原文</a>说需要借助 Xcode 控制台的 GDB,很不幸的是,高版本的 Xcode 中,已经没有切换到 GDB 的功能了.网上也有帖子介绍 GDB 对应 lldb 的指令是什么,很不幸,都不能正常工作,所以这里不在罗列.</p>
<p>后来,我想到是否可以借助终端来完成任务?</p>
<p>那么问题来了,终端怎么知道这个内存地址是属于谁的?<br>后来想到,可以通过活动监视器,拿到我们程序进程的 pid<br><img src="http://i1.tietuku.com/623a316bb0e053be.png"><br>我的是 <code>1175</code></p>
<p>然后参考刚刚<a href="http://www.jb51.net/article/38948.htm" target="_blank" rel="external">原文</a>中的指令, <code>sudo malloc_history 1175 0x7a692620</code><br>后面一个参数是崩溃的地址.</p>
<p>此时终端提示,没有打印 <code>MallocStackLogging</code> .<br><img src="http://i1.tietuku.com/c13979bcb1add8c6.png"></p>
<p>其实这里是需要在 Xocde 中配置的.按照刚刚配置 <code>NSZombieEnabled</code>的位置和方式,添加一个参数:</p>
<p><code>MallocStackLoggingNoCompact</code> 值设置为 <code>YES</code></p>
<p>然后继续重新编译运行,查看 pid ,查看崩溃的内存地址.</p>
<p><img src="http://i1.tietuku.com/e197b876e9fa3a52.png"></p>
<p>见到终端打印出了调用顺序,一般来说,是最后一个你自定义的方法导致的崩溃.</p>
<p>然后就是解决 bug 了,祝好运 ~</p>
<p>参考网址:<br><a href="http://blog.csdn.net/totogo2010/article/details/8949440" target="_blank" rel="external">http://blog.csdn.net/totogo2010/article/details/8949440</a><br><a href="http://mobile.51cto.com/iphone-279455.htm" target="_blank" rel="external">http://mobile.51cto.com/iphone-279455.htm</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2015-06-01滚动监听 触摸点获取 Tranform RecealApp]]></title>
      <url>http://yoursite.com/2015/06/01/iOS%20Tips/2015-06-01%E6%BB%9A%E5%8A%A8%E7%9B%91%E5%90%AC-%E8%A7%A6%E6%91%B8%E7%82%B9%E8%8E%B7%E5%8F%96-Tranform-RecealApp/</url>
      <content type="html"><![CDATA[<h2 id="概要">概要</h2><ul>
<li>UITableView 滚动行为的监听,触摸点的获取</li>
<li>CGAffineTransformMakeTranslation和CGAffineTransformTranslate</li>
<li>reveal app 的项目集成</li>
<li>inputAccessoryView 遇到的几个问题</li>
</ul>
<a id="more"></a>
<h3 id="UITableView_滚动行为的监听,触摸点的获取">UITableView 滚动行为的监听,触摸点的获取</h3><p>项目中有个需求是当 tableView 滚动的时候,将 tableView 上面的视图隐藏,就类似于 HeadView 那种推上去的效果. 但是按照 UI 层级来说,不能使用  Header ,所以有了这样一个需求.</p>
<h4 id="网络上找到的零散知识">网络上找到的零散知识</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获得哪一行滚动上去了*/</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSIndexPath</span> *path =  [<span class="keyword">self</span><span class="variable">.bottomView</span> indexPathForRowAtPoint:<span class="built_in">CGPointMake</span>(scrollView<span class="variable">.contentOffset</span><span class="variable">.x</span>, scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"这是第%ld行"</span>,path<span class="variable">.row</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获得触摸点的位置*/</span></span><br><span class="line"> <span class="built_in">UITableView</span> *tableView=(<span class="built_in">UITableView</span> *)<span class="keyword">self</span><span class="variable">.view</span>;</span><br><span class="line">    <span class="built_in">NSSet</span> *touches = [event allTouches]; <span class="comment">//包含所有的uitouch 单点触控就只有一个uitouch</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UITouch</span> *touch= [touches anyObject];    <span class="comment">//获取触摸点在uitableVIEW上的位置</span></span><br><span class="line">    <span class="built_in">CGPoint</span> p=[touch locationInView:tableView];</span><br><span class="line">    <span class="built_in">NSIndexPath</span> *path= [tableView indexPathForRowAtPoint:p];</span><br><span class="line">    Book *book=<span class="keyword">self</span><span class="variable">.books</span>[path<span class="variable">.row</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"row--%@"</span>,book<span class="variable">.name</span>);</span><br></pre></td></tr></table></figure>
<p>但是使用的时候,结果始终是 0 ,就是不能正确取到触摸点的位置.<br>所以还是利用下面的方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSIndexPath</span> *path =  [<span class="keyword">self</span><span class="variable">.bottomView</span> indexPathForRowAtPoint:<span class="built_in">CGPointMake</span>(scrollView<span class="variable">.contentOffset</span><span class="variable">.x</span>, scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span>)];</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// NSLog(@"这是第%ld行",path.row);</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%f,%f"</span>,scrollView<span class="variable">.contentOffset</span><span class="variable">.x</span>,scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span>);</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CGAffineTransformMakeTranslation和CGAffineTransformTranslate">CGAffineTransformMakeTranslation和CGAffineTransformTranslate</h3><p>简单提一下两个的区别(其他的缩放,旋转一个意思): </p>
<ul>
<li>Translate(动词) 的是累加的形式,以前一个状态的 Transform 作为参照</li>
<li>MakeTranslation(名词) 是以最开始的状态为参照</li>
</ul>
<p>主要是两者的使用场景:</p>
<ul>
<li>如果你的参数是累加的,那么通常用 MakeXXX能够完成需求</li>
<li>如果参数是固定的,那么通常 动词的形式是你要的结果</li>
</ul>
<h4 id="我的需求的最终实现代码">我的需求的最终实现代码</h4><p>最终效果实现</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#pragma mark -system deleage</span></span><br><span class="line">-(<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSIndexPath</span> *path =  [<span class="keyword">self</span><span class="variable">.bottomView</span> indexPathForRowAtPoint:<span class="built_in">CGPointMake</span>(scrollView<span class="variable">.contentOffset</span><span class="variable">.x</span>, scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.topView</span><span class="variable">.transform</span> =  <span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="number">0</span>,-scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span>);</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.bottomView</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> clearColor];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.topView</span><span class="variable">.transform</span> = <span class="built_in">CGAffineTransformMakeTranslation</span>(<span class="number">0</span>, -scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span>);</span><br><span class="line">    </span><br><span class="line">    [<span class="built_in">UIView</span> beginAnimations:<span class="literal">nil</span> context:<span class="literal">nil</span>];</span><br><span class="line">     [<span class="built_in">UIView</span> setAnimationDuration:<span class="number">0.25</span>];</span><br><span class="line">    <span class="keyword">if</span> (-scrollView<span class="variable">.contentOffset</span><span class="variable">.y</span>&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.bottomView</span><span class="variable">.y</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.headerView</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> grayColor];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.bottomView</span><span class="variable">.y</span> = (<span class="keyword">self</span><span class="variable">.topView</span><span class="variable">.y</span>+<span class="keyword">self</span><span class="variable">.topView</span><span class="variable">.height</span>);</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.headerView</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="built_in">UIView</span> commitAnimations];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="reveal_app_的使用">reveal app 的使用</h3><p>之前研究逆向的时候,用过,但是时间久了,居然忘记怎么集成了.<br>查阅了网上的资料,找到了方法</p>
<h4 id="一-_简单的做法">一. 简单的做法</h4><p>安装Reveal不算复杂，要把Reveal用到工程中则需要把framework或者dylib编入。</p>
<ol>
<li><p>打开Xcode工程</p>
</li>
<li><p>打开Revel工具，选择Menu-&gt;Help-&gt;Show Reveal Library in Finder，这样就会打开RevealApp里面带的库</p>
</li>
<li>把Reveal.framework加入工程，在弹出框中选中Copy items into destination group’s folder (if needed).</li>
<li>在工程设置中，在Other Linker Flags项增加-ObjC -framework Reveal 如果你使用的还是Xcode4，那么还需要增加-frame CFNetwork -frame QuartzCore -framework CoreGraphics</li>
</ol>
<h4 id="二-相对复杂,但是对项目的侵入性比较小的做法">二.相对复杂,但是对项目的侵入性比较小的做法</h4><ol>
<li><p>在当前用户目录新建一个文件.lldbinit，位于~/.lldbinit，LLDB每次启动的时候都会加载这个文件。</p>
</li>
<li><p>在.lldbinit中输入如下内容：</p>
</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">command alias reveal_load_sim expr (<span class="keyword">void</span>*)dlopen(<span class="string">"/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib"</span>, <span class="number">0x2</span>);</span><br><span class="line"></span><br><span class="line">command alias reveal_load_dev expr (<span class="keyword">void</span>*)dlopen([(<span class="built_in">NSString</span>*)[(<span class="built_in">NSBundle</span>*)[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"libReveal"</span> ofType:<span class="string">@"dylib"</span>] cStringUsingEncoding:<span class="number">0x4</span>], <span class="number">0x2</span>);</span><br><span class="line"></span><br><span class="line">command alias reveal_start expr (<span class="keyword">void</span>)[(<span class="built_in">NSNotificationCenter</span>*)[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@"IBARevealRequestStart"</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">command alias reveal_stop expr (<span class="keyword">void</span>)[(<span class="built_in">NSNotificationCenter</span>*)[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@"IBARevealRequestStop"</span> object:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>上述文件创建了4个命令：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reveal_load_sim,reveal_load_dev, reveal_start 和 reveal_stop</span><br></pre></td></tr></table></figure>
<ul>
<li><p>reveal_load_sim 这个只在iOS模拟器上有效。它从Reveal的应用程序bundle中找到并加载libReveal.dylib（请确保你把Reveal安装到了系统的Application文件夹，如果你换地方了，你修改上述的文件）。</p>
</li>
<li><p>reveal_load_dev 这个命令在iOS设备和模拟器上都有效。不过，它需要你在Build Phase中的的Copy Bundle Resources中加上libReveal.dylib，请确保没有放到Link Binary With Libraries这个地方。</p>
</li>
<li><p>reveal_start 这个命令发出一个通知启动Reveal Server。</p>
</li>
<li><p>reveal_stop 这个命令发出一个通知停止Reveal Server。</p>
</li>
</ul>
<p><strong>请注意：只有在iOS应用发出了UIApplicationDidFinishLaunchingNotification通知之后，比如应用的delegate已经处理过application::didFinishLaunchingWithOptions:之后才能调用上面的reveal<em>load</em>*命令，然后再调用reveal_start</strong></p>
<p>在设备起来之后，你就可以断下应用，在LLDB提示框中输入上述的命令了。<br><img src="http://ww4.sinaimg.cn/large/9e446dffjw1esorix0zrej20hs06qq3q.jpg"></p>
<p>上述的过程还需要手动输入，下面介绍如何设置条件断点，使得Reveal在启动之后自动加载。</p>
<p>在你的应用的application:didFinishLaunchingWithOptions 中的代码出加一个断点，然后右键，选择编辑断点。</p>
<p>输入如下图一样的命令：</p>
<p><img src="http://ww1.sinaimg.cn/large/9e446dffjw1esorixpfx2j20hs097wfn.jpg"></p>
<p>重新运行下应用，如果控制台输出了如下信息：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reveal server started.</span><br></pre></td></tr></table></figure>
<p>说明成功了</p>
<p>个人推荐用第一种方法,然后项目发布的时候,记得删除即可</p>
<h3 id="InputAccessoryView_可能遇到的问题">InputAccessoryView 可能遇到的问题</h3><h4 id="辅助布局的样式">辅助布局的样式</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIBarButtonItem</span> * button1 =[[<span class="built_in">UIBarButtonItem</span>  alloc]initWithBarButtonSystemItem:                                        <span class="built_in">UIBarButtonSystemItemFlexibleSpace</span> target:<span class="keyword">self</span> action:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<h4 id="定义普通的按钮">定义普通的按钮</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIBarButtonItem</span> * doneButton = [[<span class="built_in">UIBarButtonItem</span> alloc]initWithTitle:<span class="string">@"完成"</span> style:<span class="built_in">UIBarButtonItemStyleDone</span>  target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(resignKeyboard)];</span><br></pre></td></tr></table></figure>
<h4 id="添加按钮">添加按钮</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> * buttonsArray = [<span class="built_in">NSArray</span> arrayWithObjects:button1,button2,doneButton,<span class="literal">nil</span>];    </span><br><span class="line">   [topView setItems:buttonsArray];</span><br></pre></td></tr></table></figure>
<p>参考网址:<br><a href="http://www.cocoachina.com/bbs/read.php?tid=293372" target="_blank" rel="external">http://www.cocoachina.com/bbs/read.php?tid=293372</a><br><a href="http://blog.csdn.net/yongyinmg/article/details/39293015" target="_blank" rel="external">http://blog.csdn.net/yongyinmg/article/details/39293015</a><br><a href="http://blog.csdn.net/sakulafly/article/details/17994173" target="_blank" rel="external">http://blog.csdn.net/sakulafly/article/details/17994173</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于@property中NSString的copy-深入细节]]></title>
      <url>http://yoursite.com/2015/05/20/iOS%20Tips/%E5%85%B3%E4%BA%8E-property%E4%B8%ADNSString%E7%9A%84copy/</url>
      <content type="html"><![CDATA[<p>前几天和东盟君讨论关于在 <code>@property(nonatomic,copy)NSString * string;</code>中 <code>copy</code>的使用问题. 虽然自己很明白,见到<code>NSString</code>,果断用 <code>copy</code>,但是却说不出个道道.</p>
<p>今天偶尔在一片国外论坛的文章上看到了关于这个的内容(因为在pad上看的,具体地址没法引用了).所以简单记录一下.</p>
<p><strong>因为类似 NSString这样的不可变父类,它们有可变的子类(比如 NSMutableString),那么就可能造成修改指针指向的结果,而这是我们不愿意看到的</strong></p>
<p>是比较抽象的描述,要弄明白这段话,需要明确 <code>copy</code> 做了什么 ?</p>
<p>在官方的描述中: <code>copy</code>是复制一个对象,并强引用它.</p>
<p>那么开始解释一开始的话:</p>
<p>假设我有一个 <code>Person</code> 类,他有一个 <code>name</code>属性,它是<code>NSString</code>类型的.不可变对象对吧.</p>
<p>那么问题来了,下面的语法是成立的:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">NSMutableString</span> * mutableString = [[<span class="built_in">NSMutableString</span> alloc]initWithString:<span class="string">@"gg"</span>];</span><br><span class="line"> <span class="comment">//1</span></span><br><span class="line">per<span class="variable">.name</span> = mutableString;</span><br></pre></td></tr></table></figure>
<p>上面1处首先语法没有问题, NSString是 NSMutableString的父类.<br>然后这个时候,如果 <code>name</code>属性是 <code>@property</code> 是 <code>strong</code>的,<br>那么 <code>per.name</code> 和 <code>mutableString</code> 指向的是同一块内存区域,<br>那么,我就可以通过修改 <code>mutableString</code>来修改<code>per.name</code>了,而当初我们既然选择了 <code>NSString</code>,那么就是考虑到不会对其进行修改的.所以,这样违背了我们的初衷.</p>
<p>如果是<code>copy</code>,<code>per.name</code>在使用前会复制一份出来,这样使用的其实是它的副本,即使修改了<code>mutableString</code>也不会对<code>per.name</code>的本尊造成影响.</p>
<h3 id="关于_copy_和_mutableCopy">关于 copy 和 mutableCopy</h3><p>现在我说的这两者是在代码中使用的时候,就是对象创建和赋值时候的.<br>苹果的设计是:</p>
<ul>
<li>copy        拿到的永远是不可变对象</li>
<li>mutableCopy 拿到的是可变对象</li>
</ul>
<p>为什么这样设计呢?</p>
<p>以上两者的调用者可能是 可变的或者不可变的,那么就会有四种组合,对于开发者去记忆四种组合是比较蹩脚的.所以干脆 </p>
<ul>
<li>不管调用者类型是可变与否,copy到得就不可变</li>
<li>不管调用者类型是可变与否,mutableCopy到得就是可变对象</li>
</ul>
<h3 id="关于创建可变类型">关于创建可变类型</h3><p>以前都是用类似 <code>NSMutableString * string = [ NSMutableString string ];</code>这样的方式创建,但是在和东盟君讨论的时候,打印了一下,发现 <code>string</code>的class是:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> * string = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"string"</span>];</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"string is %@"</span>,[string class]);</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">NSMutableString</span> * mutableString = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line"> <span class="built_in">NSLog</span>(<span class="string">@"mutable string is %@"</span>,[mutableString class]);</span><br></pre></td></tr></table></figure>
<p>打印结果:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2015</span>-<span class="number">05</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">43.549</span> TestNsstring[<span class="number">10993</span>:<span class="number">1874316</span>] string is __<span class="built_in">NSCFString</span></span><br><span class="line"><span class="number">2015</span>-<span class="number">05</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">43.550</span> TestNsstring[<span class="number">10993</span>:<span class="number">1874316</span>] <span class="keyword">mutable</span> string is __<span class="built_in">NSCFString</span></span><br></pre></td></tr></table></figure>
<p>究其原因, NSString是一个类簇,具体的实现都会找到合适的类,这个不用纠结了.</p>
<p>不久之后,在 <strong>iOS6 by Tutorial</strong>中一书中看到关于 <code>[@[] mutableCopy]</code> 和 <code>[@{} mutableCopy]</code> 这样的用法.</p>
<p>也符合 copy 和 mutableCopy 的准则</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tableview相关-iOS开发 Tips]]></title>
      <url>http://yoursite.com/2015/05/06/iOS%20Tips/Tableview%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<ul>
<li>在使用Tableview的时候,即使只是设置了几条数据,但是多余的部分还是会出现<code>cell</code>,就是出现了多余的分割线.</li>
</ul>
<p>解决方案:  </p>
<p>在<code>TableViewController</code>中添加一行代码即可  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.tableView</span><span class="variable">.tableFooterView</span> = [<span class="built_in">UIView</span> alloc initWithFrame:<span class="built_in">CGRectZero</span>];</span><br></pre></td></tr></table></figure>
<ul>
<li>有时候用Tableview做布局的时候,我们并不希望它是可以滚动的.所以,可以使用如下代码禁止滚动</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.tableView</span><span class="variable">.scrollEnabled</span> = <span class="literal">NO</span> ;</span><br></pre></td></tr></table></figure>
<ul>
<li>设置不让cell选中时高亮</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.selectionStyle</span> = <span class="built_in">UITableViewCellSelectionStyleNone</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>去掉表格之间的分割线</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataTableview<span class="variable">.separatorStyle</span> = <span class="built_in">UITableViewCellSeparatorStyleNone</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[管理代码片段]]></title>
      <url>http://yoursite.com/2015/05/05/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E7%AE%A1%E7%90%86%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p> Xcode 界面的右下角 , 可以通过快捷键 Cmd+Ctrl+Opt+2 调出来, 代码片段是一些代码的模板, 对一些常见的编程模式 ,Xcode 都将这些代码抽象成模板放到代码片段中,使用的时候,只需要按快捷键,就可以把模板的内容填到代码中.</p>
<p>例如苹果引入两 GCD 之后,我们需要一个延时的操作,只需要在 Xcode 中键入 dispatch ,就可以看到 Xcode 中弹出一个上下文菜单, 第一个选项就是相应的代码片段.</p>
<h2 id="Xcode代码片段的管理">Xcode代码片段的管理</h2><p>那么如何自定义代码片段呢? 相当简单,当你觉得某段代码很有用,可以当做模板的时候,将其整体选中,拖动到 Xcode 右下角的代码片段区域中即可. Xcode 会自动帮你创建的代码片段. 之后可以单机该代码片段,在弹出的界面中选择 “Edit”,即可为此代码片段设置快捷键等信息.</p>
<p>可以直接敲代码,然后拖到右下角</p>
<p>如果有些地方想让用户替换掉,可以用 &lt;#被替换的内容#&gt;的格式 .这样在代码片段被使用后,焦点会自动移动到该处,你只需要连贯的键入替换后的内容即可.</p>
<p>可以使用git管理代码片段.</p>
<p>代码片段默认目录是:</p>
<p><code>cd ~/Library/Developer/Xcode/UserData/CodeSnippets/</code></p>
<p>可以对该目录使用 git ,那么就能随时使用自己的代码片段了. </p>
<h2 id="其他管理工具">其他管理工具</h2><p>其他类似功能的还有 Dash 和 SnippetsLib ,它们两者的优势是支持任意语言.</p>
<p>但是如果针对iOS开发 ,Xcode默认的代码片段还是首选 .</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙扫描的坑]]></title>
      <url>http://yoursite.com/2015/05/02/%E5%9D%91/%E8%93%9D%E7%89%99%E6%89%AB%E6%8F%8F%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>今天公司有同事要求手机连接一个蓝牙设备, 要求是手机自动连接过去.简单翻了一下Apple的文档还找了几个网页,觉得了然于心了.于是先写出了进行扫描的代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;CoreBluetooth/CoreBluetooth.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">CBCentralManagerDelegate</span>&gt; </span>&#123;</span><br><span class="line">    CBCentralManager *bleManager_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    bleManager_ = [[CBCentralManager alloc] initWithDelegate:<span class="keyword">self</span> queue:<span class="literal">nil</span>];</span><br><span class="line">    [bleManager_ scanForPeripheralsWithServices:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    [bleManager_ stopScan];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)centralManagerDidUpdateState:(CBCentralManager *)central &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>( <span class="string">@"%@"</span>, central );</span><br><span class="line">    <span class="keyword">switch</span> ( central<span class="variable">.state</span> ) &#123;</span><br><span class="line">    <span class="keyword">case</span> CBCentralManagerStateUnknown: &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@"%@"</span>, <span class="string">@"CBCentralManagerStateUnknown"</span> );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> CBCentralManagerStateResetting: &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@"%@"</span>, <span class="string">@"CBCentralManagerStateResetting"</span> );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> CBCentralManagerStateUnsupported: &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@"%@"</span>, <span class="string">@"CBCentralManagerStateUnsupported"</span> );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> CBCentralManagerStateUnauthorized: &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@"%@"</span>, <span class="string">@"CBCentralManagerStateUnauthorized"</span> );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> CBCentralManagerStatePoweredOff: &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@"%@"</span>, <span class="string">@"CBCentralManagerStatePoweredOff"</span> );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> CBCentralManagerStatePoweredOn: &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>( <span class="string">@"%@"</span>, <span class="string">@"CBCentralManagerStatePoweredOn"</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central</span><br><span class="line"> didDiscoverPeripheral:(CBPeripheral *)peripheral</span><br><span class="line">     advertisementData:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)advertisementData</span><br><span class="line">                  RSSI:(<span class="built_in">NSNumber</span> *)RSSI &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>( <span class="string">@"BLE found  %@"</span>, peripheral<span class="variable">.name</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central</span><br><span class="line">  didConnectPeripheral:(CBPeripheral *)peripheral &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>( <span class="string">@"BLE connected  %@"</span>, peripheral<span class="variable">.name</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central</span><br><span class="line">    didFailToConnectPeripheral:(CBPeripheral *)peripheral</span><br><span class="line">                         error:(nullable <span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>( <span class="string">@"BLE connected  %@ faild %@"</span>, peripheral<span class="variable">.name</span>, error );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>真机运行, 发现打印了 <code>CBCentralManagerStatePoweredOn</code> ,但是之后就没有后文了. 发现外设的代理方法没有调用.但是直接通过手机进行扫描,能够发现设备.反复尝试,还是没有得到预期的结果.</p>
<p>后来想到,自己尝试在手机上反复开关蓝牙让列表刷新,注意到蓝牙开关是有一定时间的.结合自己在代码中:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bleManager_ = [[CBCentralManager alloc] initWithDelegate:<span class="keyword">self</span> queue:<span class="literal">nil</span>];</span><br><span class="line">[bleManager_ scanForPeripheralsWithServices:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>初始化了直接就开始扫描, 可能是由于蓝牙的Manager还没有准备好吧,于是尝试修改这个开始扫描到判定Manager的状态为PowerOn中:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> CBCentralManagerStatePoweredOn: &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>( <span class="string">@"%@"</span>, <span class="string">@"CBCentralManagerStatePoweredOn"</span> );</span><br><span class="line">    [bleManager_ scanForPeripheralsWithServices:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再进行打印,发现终于出现了各个外设了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MJExtention 对不规范 JSON 解析的一个测试]]></title>
      <url>http://yoursite.com/2015/04/18/iOS%20Tips/MJExtention-%E5%AF%B9%E4%B8%8D%E8%A7%84%E8%8C%83-JSON-%E8%A7%A3%E6%9E%90%E7%9A%84%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="Context">Context</h2><p>今天受 MJ 老师吩咐,测试 MJExtension 对于不规范的 JSON 的解析情况.特记录于此 </p>
<h2 id="说明几点">说明几点</h2><h3 id="何为不规范">何为不规范</h3><p>我说的不规则指的是有一定容错能力,但是前提还是 JSON,弄些乱七八糟的字符串就没有意义了哈.比如说,这次我想测试的是前一段事件遇到的一个小问题:服务端返回的是类似这样的一个结果:  </p>
<p><img src="http://ww1.sinaimg.cn/large/9e446dffjw1er9qrf2g2hj206608vaad.jpg"></p>
<p>为了展现,截图是规范的 JSON,服务端给我的实际数据是:<br>两个箭头指向处还有 <code>&quot;</code>  .</p>
<p><img src="http://ww2.sinaimg.cn/large/9e446dffjw1er9ql5uocrj206k08sq3c.jpg">  </p>
<p>换句话说,他是严格执行的: <code>&quot;键&quot;:&quot;无论啥类型&quot;</code> . 网上大多数的所谓的 JSON 格式校验工具认为这种格式是 okay 的,但是它的问题是,没法继续”钻下去” ,这里就是我所说的 “不规范”.<br>说到这里,推荐个地址 <a href="http://tool.oschina.net/codeformat/json" target="_blank" rel="external">在线校验</a>,这个不仅仅是校验,还有格式化功能.支持按层级折叠和展开.</p>
<a id="more"></a>  
<h2 id="准备工作">准备工作</h2><ul>
<li>更新 podfile ,以获取最新的 MJExtension 代码.<br><img src="http://ww3.sinaimg.cn/large/9e446dffjw1er9qs5ny5qj20f203dab8.jpg"></li>
<li>因为现在服务端已经更改,所以才用从本地文件读取的方式,新建一个 json 文件,放到沙盒中.测试数据已经分享到 百度网盘</li>
</ul>
<p>链接: <a href="http://pan.baidu.com/s/1qWA1Na8" target="_blank" rel="external">http://pan.baidu.com/s/1qWA1Na8</a> 密码: dvwb</p>
<p>大家也可以使用自己的数据进行测试,毕竟就是加两个英文引号.</p>
<h2 id="测试">测试</h2><h3 id="无引号版本(规范的_JSON_)">无引号版本(规范的 JSON )</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *paths=<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *path=[paths objectAtIndex:<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *Json_path=[path stringByAppendingPathComponent:<span class="string">@"JsonFile.json"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSData</span> *data=[<span class="built_in">NSData</span> dataWithContentsOfFile:Json_path];</span><br><span class="line"><span class="comment">//自带解析方式</span></span><br><span class="line"><span class="keyword">id</span> JsonObject=[<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="built_in">NSJSONReadingAllowFragments</span> error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//MJ Extension</span></span><br><span class="line">GQResponeseStatusModel* statusModel = [GQResponeseStatusModel objectWithJSONData:data];</span><br></pre></td></tr></table></figure>
<p>lldb 看到 data 有数据,说明读取正常,一路断点的也都有值,最后数据正常读取显示.<br><img src="http://ww3.sinaimg.cn/large/9e446dffjw1er9rf6gidrj20bf013t8r.jpg"></p>
<h3 id="2-有引号版本">2.有引号版本</h3><p>在我的文件中的:这两个位置,用引号括起来.即 json 这个 key,对应的有 “ 的 value .</p>
<p><img src="http://ww3.sinaimg.cn/large/9e446dffjw1er9r0w0gjmj205e03gaa3.jpg"></p>
<p><img src="http://ww1.sinaimg.cn/large/9e446dffjw1er9r0n7u94j207e03daa1.jpg"></p>
<p>现在拿到数据到刚刚推荐的网址上,结果提示:</p>
<p><img src="http://ww3.sinaimg.cn/large/9e446dffjw1er9r44dvfnj20tx0h2dna.jpg"></p>
<p>继续跑代码:</p>
<p>结果:</p>
<p>data 有值.  </p>
<p><img src="http://ww1.sinaimg.cn/large/9e446dffjw1er9rflz1cpj20d900tjrf.jpg">  </p>
<p>自带的 JSON 解析结果为 nil  </p>
<p>MJExtension 之后,模型的四个属性为nil (MJ老师也说了,MJExtension 基于苹果自带的 API )</p>
<p><img src="http://ww1.sinaimg.cn/large/9e446dffjw1er9r7utg4cj20nf05lq4p.jpg"></p>
<p>好了,因为暂时遇到的情况就这一个.所以就采取个案例做个小测试.算是完成了老师的嘱托啊~~</p>
<h3 id="后记:">后记:</h3><ol>
<li><p>当时服务端正在忙着做其他事情,没有时间给我改返回的格式.所以才用了分次解析的方式.先拿到 json 的 value 值,然后从这一层开始使用 MJExtension ,也完成了任务.  </p>
</li>
<li><p>如果有可能,大家按照统一的规范进行开发,是最省时省力又舒畅的.</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客成长记]]></title>
      <url>http://yoursite.com/2015/04/15/%E4%B8%BB%E9%A1%B5%E7%BB%B4%E6%8A%A4%E8%AE%B0%E5%BD%95/%E5%8D%9A%E5%AE%A2%E6%88%90%E9%95%BF%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="加入评论功能">加入评论功能</h2><p><em>2015-04-15 12:59:49</em>   </p>
<ol>
<li><p>使用微博或者其他帐号登录<a href="http://duoshuo.com" target="_blank" rel="external">多说</a>,建立自己的一个帐号,同时拿到通用代码.    </p>
</li>
<li><p>取消HEXO博客根目录中的 <code>_config.yml</code> 中 <code>disqus_shortname:</code> ，暂时不用这个功能，直接永久开启多说评论。</p>
</li>
<li><p>修改主题目录下面的(我的是 <code>/themes/jacman/_config.ym</code> ) <code>_config.yml</code> 中的 </p>
</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#### Comment</span></span><br><span class="line">duoshuo_shortname: guiqingblog    <span class="preprocessor">## e.g. wuchong   your duoshuo short name.</span></span><br></pre></td></tr></table></figure>
<p>如果没有请添加.   </p>
<ol>
<li>修改 <code>themes\XXX\layout_partial\article.ejs</code><br>在最后加上下面的代码:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(!index)&#123; %&gt;</span><br><span class="line">&lt;%- partial('comment') %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>修改 <code>themes/jacman/layout/_partial/post/comment.ejs</code> 为你通用代码的 js 部分,如果没有这个文件请新建.</li>
</ol>
<p>最终效果:  </p>
<p><img src="http://ww3.sinaimg.cn/large/9e446dffjw1er66il80t3j20mp09ujs8.jpg"></p>
<p>参考网址:  </p>
<p><a href="http://gpio.me/hexo-duoshuo.html" target="_blank" rel="external">http://gpio.me/hexo-duoshuo.html</a><br><a href="http://duoshuo.com" target="_blank" rel="external">http://duoshuo.com</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高效OC编程-在类的头文件中尽量少引入其他头文件]]></title>
      <url>http://yoursite.com/2015/04/15/iOS%20Tips/%E5%9C%A8%E7%B1%BB%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B0%BD%E9%87%8F%E5%B0%91%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>与C 和C++ 一样，Objective-C 也使用“头文件”（header file） 与“实现文件”（implementation file）来区隔代码。用Objective-C 语言编写“类”（class）的标准方式为：以类名做文件名，分别创建两个文件，头文件后缀用.h，实现文件后缀用.m。创建好一个类之后，其代码看上去如下所示:   </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EOCPerson.h</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EOCPerson.m</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"EOCPerson.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EOCPerson</span></span></span><br><span class="line"><span class="comment">// Implementation of methods</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>  
<p>用Objective-C 语言编写任何类几乎都需要引入Foundation.h。如果不在该类本身引入这个文件的话，那么就要引入与其超类所属框架相对应的“基本头文件”（base header file）。例如，在创建iOS 应用程序时，通常会继承UIViewController 类。而这些子类的头文件需要引入UIKit.h。现在看来，EOCPerson 类还好。其头文件引入了整个Foundation 框架，不过这并没有问题。如果此类继承自Foundation 框架中的某个类，那么EOCPerson 类的使用者（consumer）<br>可能会用到其基类中的许多内容。继承自UIViewController 的那些类也是如此，其使用者可能会用到UIKit 中的大部分内容。<br>过段时间， 你可能又创建了一个名为EOCEmployer 的新类， 然后可能觉得每个EOCPerson 实例都应该有一个EOCEmployer。于是，直接为其添加一项属性：   </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EOCPerson.h</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) EOCEmployer *employer;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然而这么做有个问题，就是在编译引入了EOCPerson.h 的文件时，EOCEmployer 类并不可见。不便强迫开发者在引入EOCPerson.h 时必须一并引入EOCEmployer.h，所以，常见的<br>办法是在EOCPerson.h 中加入下面这行：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"EOCEmployer.h"</span></span></span><br></pre></td></tr></table></figure>
<p>这种办法可行，但是不够优雅。在编译一个使用了EOCPerson 类的文件时，不需要知道<br>EOCEmployer 类的全部细节，只需要知道有一个类名叫EOCEmployer 就好。所幸有个办法<br>能把这一情况告诉编译器:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">EOCEmployer</span>;</span></span><br></pre></td></tr></table></figure>
<p>这叫做“向前声明”（forward declaring）该类。现在EOCPerson 的头文件变成了这样：   </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EOCPerson.h</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">EOCEmployer</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) EOCEmployer *employer;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>将引入头文件的时机尽量延后，只在确有需要时才引入，这样就可以减少类的使用者所需引入的头文件数量。假设本例把EOCEmployer.h 引入到EOCPerson.h，那么只要引入EOCPerson.h，就会一并引入EOCEmployer.h 的所有内容。此过程若持续下去，则要引入许<br>多根本用不到的内容，这当然会增加编译时间。<br>向前声明也解决了两个类互相引用的问题。假设要为EOCEmployer 类加入新增及删除雇员的方法，那么其头文件中会加入下述定义:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addEmployee:(EOCPerson*)person;</span><br><span class="line">- (<span class="keyword">void</span>)removeEmployee:(EOCPerson*)person;</span><br></pre></td></tr></table></figure>
<p>此时， 若要编译EOCEmployer， 则编译器必须知道EOCPerson 这个类， 而要编译EOCPerson，则又必须知道EOCEmployer。如果在各自头文件中引入对方的头文件，则会导致“循环引用”（chicken-and-egg situation）。当解析其中一个头文件时，编译器会发现它引入<br>了另一个头文件，而那个头文件又回过头来引用第一个头文件。使用#import 而非#include指令虽然不会导致死循环，但却这意味着两个类里有一个无法被正确编译。如果不信的话，读者可以自己试试。<br>但是有时候必须要在头文件中引入其他头文件。如果你写的类继承自某个超类，则必须引入定义那个超类的头文件。同理，如果要声明你写的类遵从某个协议（protocol），那么该协议必须有完整定义，且不能使用向前声明。向前声明只能告诉编译器有某个协议，而此时<br>编译器却要知道该协议中定义的方法。<br>例如，要从图形类中继承一个矩形类，且令其遵循绘制协议：   </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EOCRectangle.h</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"EOCShape.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"EOCDrawable.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCRectangle</span> : <span class="title">EOCShape</span>&lt;<span class="title">EOCDrawable</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">float</span> width;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">float</span> height;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>第二条<code>#import</code>是难免的。鉴于此，最好是把协议单独放在一个头文件中。要是把<code>EOCDrawable</code> 协议放在了某个大的头文件里，那么只要引入此协议，就必定会引入那个头文<br>件中的全部内容，如此一来，就像上面说的那样，会产生相互依赖问题，而且还会增加编译<br>时间。<br>然而有些协议，例如“委托协议”（delegate protocol），就不用单独写一个<br>头文件了。在那种情况下，协议只有与接受协议委托的类放在一起定义才有意义。此时最好<br>能在实现文件中声明此类实现了该委托协议，并把这段实现代码放在“ class-continuation 分<br>类”（class-continuation category）里。这样的话，只要在实现文件中引入包含<br>委托协议的头文件即可，而不需将其放在公共头文件（public header file）里。每次在头文件中引入其他头文件之前，都要先问问自己这样做是否确有必要。如果可以用向前声明取代引入，那么就不要引入。若因为要实现属性、实例变量或者要遵循协议而必须引入头文件，则应尽量将其移至“ class-continuation 分类”中。这样做不仅可以缩减编译时间，而且还能降低彼此依赖程度。若是依赖关系过于复杂，则会给维护带来麻烦，而且，如果只想把代码的某个部分开放为公共API 的话，太复杂的依赖关系也会出问题。<br>要点 :</p>
<ul>
<li><p>除非确有必要，否则不要引入头文件。一般来说，应在某个类的头文件中使用向前声明来提及别的类，并在实现文件中引入那些类的头文件。这样做可以尽量降低类之间的耦合（coupling）。  </p>
</li>
<li><p>有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下，尽量把“该类遵循某协议”的这条声明移至“ class-continuation 分类”中。如果不行的话，就把协议单独放在一个头文件中，然后将其引入。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git问题汇总]]></title>
      <url>http://yoursite.com/2015/04/14/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/git%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h3 id="2015-04-14_12:54:43">2015-04-14 12:54:43</h3><h4 id="问题描述">问题描述</h4><p>使用git add添加要提交的文件的时候，如果文件名是中文，会显示形如274\232\350\256\256\346\200\273\347\273\223.png的乱码。</p>
<h4 id="解决方案">解决方案</h4><p>在终端输入    </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core<span class="variable">.quotepath</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="说明">说明</h4><p>core.quotepath设为false的话，就不会对0×80以上的字符进行quote。中文显示正常。  </p>
<h4 id="问题描述-1">问题描述</h4><p>在MsysGit中，使用git log显示提交的中文log乱码。</p>
<h4 id="解决方案-1">解决方案</h4><p>设置git gui的界面编码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global gui<span class="variable">.encoding</span> utf-<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>设置 commit log 提交时使用 utf-8 编码，可避免服务器上乱码，同时与linux上的提交保持一致！</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global i18n<span class="variable">.commitencoding</span> utf-<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>使得在 <code>$ git log</code> 时将 utf-8 编码转换成 gbk 编码，解决Msys bash中git log 乱码。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global i18n<span class="variable">.logoutputencoding</span> gbk</span><br></pre></td></tr></table></figure>
<p>使得 git log 可以正常显示中文（配合i18n.logoutputencoding = gbk)，在 /etc/profile 中添加：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> LESSCHARSET=utf-<span class="number">8</span></span><br></pre></td></tr></table></figure>
<h4 id="问题描述-2">问题描述</h4><p>在MsysGit自带的bash中，使用ls命令查看中文文件名乱码。cygwin没有这个问题。  </p>
<h4 id="解决方案-2">解决方案</h4><p>使用 <code>lls --show-control-chars</code> 命令来强制使用控制台字符编码显示文件名，即可查看中文文件名。</p>
<p>为了方便使用，可以编辑 <code>/etc/git-completion.bash</code> ，新增一行 <code>alias ls=&quot;ls --show-control-chars&quot;</code>  </p>
<p>参考地址:<a href="http://www.cnblogs.com/perseus/archive/2012/11/21/2781074.html" target="_blank" rel="external">http://www.cnblogs.com/perseus/archive/2012/11/21/2781074.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网站错误解决日志]]></title>
      <url>http://yoursite.com/2015/04/14/%E4%B8%BB%E9%A1%B5%E7%BB%B4%E6%8A%A4%E8%AE%B0%E5%BD%95/%E7%BD%91%E7%AB%99%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<h2 id="时间">时间</h2><h3 id=""> </h3><h2 id="时间_2015-04-14_11:10:43">时间 2015-04-14 11:10:43</h2><h3 id="问题描述">问题描述</h3><p>今天使用 hexo 部署到 git 的时候,报错:  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Error: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0777 for '/Users/katsura/.ssh/id_rsa' are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">bad permissions: ignore key: /Users/katsura/.ssh/id_rsa</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line"></span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (/Users/katsura/Git/guiqingblog.github.io/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:42:17)</span><br><span class="line">    at ChildProcess.emit (events.js:98:17)</span><br><span class="line">    at maybeClose (child_process.js:766:16)</span><br><span class="line">    at Socket.&lt;anonymous&gt; (child_process.js:979:11)</span><br><span class="line">    at Socket.emit (events.js:95:17)</span><br><span class="line">    at Pipe.close (net.js:466:12)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="几个尝试">几个尝试</h3><p>有印象关于 id_rsa 这个 key 的,就是昨天把它加到了 key chain 当中.于是尝试删除,仍然报错.  </p>
<h3 id="问题解决">问题解决</h3><p>仔细查看报错的信息  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permissions 0777 for '/Users/katsura/.ssh/id_rsa' are too open.</span><br></pre></td></tr></table></figure>
<p>想到今天早上曾经为了模拟器的原因,把整个 User目录的权限改成了 777 …</p>
<p>于是,终端输入:  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permissions 0777 for '/Users/katsura/.ssh/id_rsa' are too open.</span><br></pre></td></tr></table></figure>
<p>问题解决</p>
<h3 id="思考">思考</h3><p>以后切不可为了省事做一些大面积的修改工作.对哪个文件就是对哪个文件!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIApplication tips -给新手的笔记]]></title>
      <url>http://yoursite.com/2015/04/13/iOS%20Tips/UIApplication-tips/</url>
      <content type="html"><![CDATA[<h3 id="UIApplication_对象是应用程序的象征">UIApplication 对象是应用程序的象征</h3><p>每一个应用程序都有自己的 UIApplication对象,而且是单例的.<br>通过 [UIApplication sharedApplication]可以获得这个单例对象<br>一个iOS程序启动后创建的第一个对象就是 UIApplication 对象<br>一个iOS程序启动后创建的第一个对象就是 UIApplication 对象<br>利用 UIApplication 对象,能进行一些应用级别的操作 </p>
<p>验证单例操作:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">	    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIApplication</span> *app  = [<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line">    <span class="built_in">UIApplication</span> *app2 = [<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line">    <span class="built_in">UIApplication</span> *app3 = [[<span class="built_in">UIApplication</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p,%p,%p"</span>,app,app2,app3);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行项目结果报错: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2015-04-13 19:05:19.695 forBlogTest[1897:80612] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'There can only be one UIApplication instance.'</span><br></pre></td></tr></table></figure>
<p>错误信息很明确: 只能有一个 UIApplication 实例.  </p>
<p>现在,我们改动一下程序   </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">	    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIApplication</span> *app  = [<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line">    <span class="built_in">UIApplication</span> *app2 = [<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p,%p"</span>,app,app2);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台打印:  </p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x7f8453d13b80</span>,<span class="number">0x7f8453d13b80</span></span><br></pre></td></tr></table></figure>
<p>可以看到,地址是一样的. </p>
<h3 id="利用_UIApplication_做应用级别的常见操作">利用 UIApplication 做应用级别的常见操作</h3><h4 id="1-_图标右上角的数字">1. 图标右上角的数字</h4><p><img src="http://ww1.sinaimg.cn/large/9e446dffjw1er45jyinfhj202k02o3yh.jpg" alt="应用程序角标"><br>如图,这个右上角的数字是可以通过代码控制的.最常见的是在推送的处理上.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIApplication</span> *app = [<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line">  <span class="comment">//0 代表清除图标右上角的数字</span></span><br><span class="line">  app<span class="variable">.applicationIconBadgeNumber</span> = <span class="number">0</span> ;</span><br></pre></td></tr></table></figure>
<p>因为 Application 是程序级别的单例对象,所以,任何地方执行这段代码均可清除角标.  </p>
<h4 id="2-设置显示联网状态">2.设置显示联网状态</h4><p>通过一下代码即可让状态栏显示 “菊花”  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app<span class="variable">.networkActivityIndicatorVisible</span> = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>
<p>效果如图:<br><img src="http://ww4.sinaimg.cn/large/9e446dffjw1er45pquehhj207h01sglh.jpg" alt="联网状态">  </p>
<h4 id="3-打开_URL">3.打开 URL</h4><ul>
<li>URL 一个资源的唯一路径</li>
<li>URL 的组成 : 协议头://主机域名/路径  </li>
<li>网络资源 URL 的组成: <a href="http://主机域名/路径" target="_blank" rel="external">http://主机域名/路径</a>  例如 <code>http://www.baidu.com/image/1.png</code>  </li>
<li>本地资源 URL 的组成: file:///路径  因为是本地主机域名可以不写,但<code>/</code> 不能省略. 例如<code>file:///User/apple/desktop/2.png</code>  </li>
</ul>
<p>UIApplication对象的 openURL 可以依靠协议头,打开各种需要的程序 .比如,下面的代码将会调用 Safari 打开网址</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[app openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://wwww.baidu.com"</span>]];</span><br></pre></td></tr></table></figure>
<p>如果是图片等,会自动调用相应的程序,上面的代码我们写的是 http ,所以会调用 Safari.<br>而下面的代码将会调用电话功能    </p>
<p><code>[app openURL:[NSURL URLWithString:@&quot;tel://10086&quot;]];</code>  </p>
<p>openURL 功能是非常强大的,以下简单列举一下常用的方法  </p>
<ul>
<li>打电话</li>
</ul>
<p><code>[app openURL:[NSURLURLWithString:@&quot;tel://10086&quot;]];</code></p>
<ul>
<li>发短信</li>
</ul>
<p><code>[app openURL:[NSURLURLWithString:@&quot;sms://10086&quot;]];</code></p>
<ul>
<li>发邮件  </li>
</ul>
<p><code>[app openURL:[NSURLURLWithString:@&quot;mailto://12345@qq.com&quot;]];</code></p>
<ul>
<li>打开网页资源  </li>
</ul>
<p><code>[app openURL:[NSURLURLWithString:@&quot;http://ios.itcast.cn&quot;]];</code></p>
<ul>
<li>打开其他 App 根据协议头,系统进行调用    </li>
</ul>
<h4 id="4_管理状态栏">4 管理状态栏</h4><p>从iOS7开始，系统提供了2种管理状态栏的方式    </p>
<h5 id="a-通过UIViewController管理（每一个UIViewController都可以拥有自己不同的状态栏）-">a.通过UIViewController管理（每一个UIViewController都可以拥有自己不同的状态栏）.</h5><p>在iOS7中，默认情况下，状态栏都是由UIViewController管理的，UIViewController实现下列方法就可以轻松管理状态栏的可见性和样式</p>
<p>状态栏的样式　<br>　　<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle;</span><br></pre></td></tr></table></figure></p>
<p>状态栏的可见性　　</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">BOOL</span>)prefersStatusBarHidden;</span><br></pre></td></tr></table></figure>
<p>详细代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#pragma mark-设置状态栏的样式</span></span><br><span class="line">-(<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//设置为白色</span></span><br><span class="line">    <span class="comment">//return UIStatusBarStyleLightContent;</span></span><br><span class="line">    <span class="comment">//默认为黑色</span></span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleDefault</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark-设置状态栏是否隐藏（否）</span></span><br><span class="line">-(<span class="built_in">BOOL</span>)prefersStatusBarHidden</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="b-通过UIApplication管理（一个应用程序的状态栏都由它统一管理）">b.通过UIApplication管理（一个应用程序的状态栏都由它统一管理）</h5><p>如果想利用UIApplication来管理状态栏，首先得修改Info.plist的设置<br>在 info.plist文件中,添加一个:<br><code>View controller-based status bar appearance</code>  值为 NO<br>这样,就是不让控制器管理 statusbar</p>
<p>代码:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过sharedApplication获取该程序的UIApplication对象</span></span><br><span class="line"><span class="built_in">UIApplication</span> *app=[<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line">app<span class="variable">.applicationIconBadgeNumber</span>=<span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置指示器的联网动画</span></span><br><span class="line">app<span class="variable">.networkActivityIndicatorVisible</span>=<span class="literal">YES</span>;</span><br><span class="line"><span class="comment">//设置状态栏的样式</span></span><br><span class="line"><span class="comment">//app.statusBarStyle=UIStatusBarStyleDefault;//默认（黑色）</span></span><br><span class="line"><span class="comment">//设置为白色+动画效果</span></span><br><span class="line">  [app setStatusBarStyle:<span class="built_in">UIStatusBarStyleLightContent</span> animated:<span class="literal">YES</span>];</span><br><span class="line"><span class="comment">//设置状态栏是否隐藏</span></span><br><span class="line">app<span class="variable">.statusBarHidden</span>=<span class="literal">YES</span>;</span><br><span class="line">  <span class="comment">//设置状态栏是否隐藏+动画效果</span></span><br><span class="line">[app setStatusBarHidden:<span class="literal">YES</span> withAnimation:<span class="built_in">UIStatusBarAnimationFade</span>];</span><br></pre></td></tr></table></figure>
<p>既然两种都可以对状态栏进行管理，那么什么时候该用什么呢？<br>如果状态栏的样式只设置一次，那就用UIApplication来进行管理；<br>如果状态栏是否隐藏，样式不一样那就用控制器进行管理。<br>UIApplication来进行管理有额外的好处，可以提供动画效果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高效OC编程-在对象内部尽量直接访问实例变量]]></title>
      <url>http://yoursite.com/2015/04/12/iOS%20Tips/%E5%9C%A8%E5%AF%B9%E8%B1%A1%E5%86%85%E9%83%A8%E5%B0%BD%E9%87%8F%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>在对象之外访问实例变量时,应该总是通过属性来做.在那么在对象内部访问实例变量的时候,又该如何呢?  </p>
<p>这是 OCer们一直激烈讨论的问题.有人认为,无论什么情况,都应该通过属性来访问实例变量;也有人说,”通过属性访问”和”直接访问”应该搭配着用. 除了几种特殊情况之外, 笔者强烈建议大家在读取实例变量的时候采用直接访问的形式,而在设置实例变量的时候通过属性来做.<br><a id="more"></a><br>请看下面的类:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EOCPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)<span class="built_in">NSString</span> \*firstName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)<span class="built_in">NSString</span> \*lastName;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置全名的快捷方法</span></span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span>\*)fullName;</span><br><span class="line">-(<span class="keyword">void</span>)setFullName:(<span class="built_in">NSString</span>\*)fullName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>fullName和 setFullName这两个”便捷方法”,可以这样来实现:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">NSString</span>\*)fullName</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@"</span>,<span class="keyword">self</span><span class="variable">.firstName</span>,<span class="keyword">self</span><span class="variable">.lastName</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  下面的方法假设所有的全名有且仅有两部分,当然这个方法也能被改写,来支持外来姓名</span><br><span class="line"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)setFullName:(<span class="built_in">NSString</span> \*)fullName</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">NSArray</span>* components = [fullName componentsSeparatedByString:<span class="string">@" "</span>];</span><br><span class="line">	<span class="keyword">self</span><span class="variable">.firstName</span> = [components objectAtIndex:<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">self</span><span class="variable">.lastName</span>  = [components objectAtIndex:<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在fullName的获取与设置方法中,我们使用”点语法”,通过存储方法来访问相关实例变量. 假设重写这两个方法,不经由存取方法,而是直接访问实例变量:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">NSString</span>*)fullName</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@"</span>,_firstName,_lastName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setFullName:(<span class="built_in">NSString</span> \*)fullName</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">NSArray</span> *components = [fullName componentsSeparatedByString:<span class="string">@" "</span>];</span><br><span class="line">	_firstName = [components objectAtIndex:<span class="number">0</span>];</span><br><span class="line">	_lastName  = [components objectAtIndex:<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两种写法有几个区别:  </p>
<ul>
<li><p>由于不经过 OC的 方法派发( method dispatch ),所以直接访问实例变量的速度当然比较快. 在这种情况下,编译器所生成的代码会直接访问对象实例变量的那块内存.</p>
</li>
<li><p>直接访问实例变量时,不会调用其设置方法. 这就绕过了为相关属性所定义的”内存管理定义”.比如,在ARC下直接访问一个声明为 copy的属性,那么并不会copy该属性,只会保留新值并释放旧值.</p>
</li>
<li><p>如果直接访问实例变量,就不会触发 KVO通知,这样做是否会产生问题,还取决于具体的对象行为.</p>
</li>
<li><p>通过属性来访问有助于排查与之相关的错误,因为可以setter添加断点,监控该属性的调用者以及访问时机.</p>
</li>
</ul>
<p>有一种合理的这种方案,那就是:在写入实例变量时,通过其 setter来做,而在读取实例变量的时候,直接访问之.这样,就技能提高读取操作的速度,又能监控对属性的写入操作.之所以要通过setter来写入实例变量,其首要原因在于,这样做能够确保相关属性的”内存管理定义”得以贯彻.但是,选用这种方法时,需要注意几个问题.</p>
<p>第一个要注意的地方是,在初始化方法中,应该如何设置属性值.这种情况下总是应该直接访问实例变量,因为子类可能会 覆写(override)设置方法.<br> 在上例中,假设EOCPerson有一子类叫做 EOCSmithPerson,这个类表示那些姓 Smith 的人.该子类可能会override lastName所对应的设置方法:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)setLastName:(<span class="built_in">NSString</span> \*)lastName</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (![lastName isEqualToString:<span class="string">@"Smith"</span>]) &#123;</span><br><span class="line">	    [<span class="built_in">NSException</span> raise:<span class="built_in">NSInvalidArgumentException</span> format:<span class="string">@"Last name must be Smith "</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">self</span><span class="variable">.lastName</span>  = lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在父类 EOCPerson的默认初始化方法中,可能会将姓氏设为空字符串.此时若是通过 setter方法来做,那么调用的将是子类的设置方法,从而抛出异常.但是某些情况下有必须在初始化方法中调用该设置方法:如果待初始化的实例变量声明在父类中,而我们又无法在子类中直接访问此实例变量的话,就需要调用 setter 了.  </p>
<p>另一个要主要的问题是:懒加载.在这种情况下,必须通过 getter访问属性,否则实例变量就永远不会初始化.比如,EOCPerson类也许会用一个属性来表示人脑中的信息,这个属性所代指的对象相当复杂.由于此属性不常用,而且创建成本较高,所以,我们会在 getter中对其进行懒加载.  </p>
<p><code>-(EOCBrain\*)brain
    {
        if(!_brain)
        {
            _barin = [Brain new];
        }
        return brain;
    }</code>objc</p>
<p>在这种情况下,如果没有使用 getter 方法,而直接访问实例变量,则会看到没有初始化的 brain ,所以说,如果使用了懒加载,就必须通过getter 来访问brain属性.</p>
<p>归纳:</p>
<ul>
<li><p>在对象内部读取数据时候,应该通过实例变量来读,而写入数据是,则应该通过属性来写.</p>
</li>
<li><p>在初始化以及 dealloc方法中,总是应该通过实例变量来读写数据</p>
</li>
<li><p>有时会使用懒加载技术配置某些数据,这种情况下,需要通过属性来读取数据.</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[25条提升iOS App性能的建议-iOS 方法论]]></title>
      <url>http://yoursite.com/2015/04/12/iOS%20Tips/25%E6%9D%A1%E6%8F%90%E5%8D%87iOS-App%E6%80%A7%E8%83%BD%E7%9A%84%E5%BB%BA%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h2 id="25条提高_iOS_App_性能的建议">25条提高 iOS App 性能的建议</h2><p>性能关系到用户体验,所以它对于我们的开发来说是至关重要的.  </p>
<h3 id="特别注意:">特别注意:</h3><p>在优化代码之后,必须保证有个需要解决的问题!不要陷入”pre-optimizing(预优化)”你的代码.用Instruments分析你的代码,来发现需要提高的地方.</p>
<p>下面是一些值得预先考虑的地方,分为三个不同的级别-基础,中级,高级<br><a id="more"></a></p>
<h3 id="基础">基础</h3><p>这些技巧你要总是想着实现在你开发的App中  </p>
<ol>
<li><p>用ARC去管理内存（Use ARC to Manage Memory）</p>
</li>
<li><p>适当的地方使用reuseIdentifier（Use a reuseIdentifier Where Appropriate）</p>
</li>
<li><p>尽可能设置视图为不透明（Set View as Opaque When Possible）</p>
</li>
<li><p>避免臃肿的XIBs文件（Avoid Fat XiBs）</p>
</li>
<li><p>不要阻塞主进程（Don’t Block the Main Thread）</p>
</li>
<li><p>调整图像视图中的图像尺寸（Size Images to Image Views）</p>
</li>
<li><p>选择正确集合（Choose the Correct Collection）</p>
</li>
<li><p>启用Gzip压缩（Enable GZIP Compression）</p>
</li>
</ol>
<h3 id="中级">中级</h3><p>这些技巧是当你遇到更复杂的情况的时候使用。</p>
<ol>
<li><p>重用和延迟加载视图（Reuse and Lazy Load Views）</p>
</li>
<li><p>缓存，缓存，缓存（Cache,Cache,Cache）</p>
</li>
<li><p>考虑绘图（Consider Drawing）</p>
</li>
<li><p>处理内存警告（Handle Memory Warnings）</p>
</li>
<li><p>重用大开销对象（Reuse Expensive Objects）</p>
</li>
<li><p>使用精灵表（Use Sprite Sheets ）</p>
</li>
<li><p>避免重复处理数据（Avoid Re-Processing Data）</p>
</li>
<li><p>选择正确的数据格式（Choose the Right Data Format）</p>
</li>
<li><p>适当的设置背景图片（Set  Background Images Appropriately）</p>
</li>
<li><p>减少你的网络占用（Reduce Your Web Footprint）  </p>
</li>
<li><p>设置阴影路径（Set the Shadow Path ）</p>
</li>
<li><p>你的表格视图Optimize Your Table Views）</p>
</li>
<li><p>选择正确的数据存储方式（Choose Correct Data Storage Option）</p>
</li>
</ol>
<h4 id="高级">高级</h4><p>这些技巧你应该只在你很积极认为它们能解决这个问题，而且你觉得用它们很舒适的时候使用。</p>
<ol>
<li><p>加速启动时间（Speed up Launch Time ）</p>
</li>
<li><p>使用自动释放池（Use AutoRelease Pool）</p>
</li>
<li><p>缓存图像（Cache Images-Or not ）</p>
</li>
<li><p>尽可能避免日期格式化器（Avoid Date Formatters Where Possible）   </p>
</li>
</ol>
<p><a href="http://www.raywenderlich.com/31166/25-ios-app-performance-tips-tricks" target="_blank" rel="external">参考文章地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基本配置]]></title>
      <url>http://yoursite.com/2015/04/05/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="mac_配置">mac 配置</h3><ul>
<li>显示隐藏文件</li>
</ul>
<p><code>defaults write com.apple.finder AppleShowAllFiles -bool true</code></p>
<ul>
<li>重启Finder</li>
</ul>
<p><code>killall -KILL Finder</code></p>
<h3 id="Xcode">Xcode</h3><ul>
<li>插件目录 (需要运行任意一个插件工程,此目录才会出现)</li>
</ul>
<p><code>~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins</code></p>
<ul>
<li>工程模板目录</li>
</ul>
<p><code>/Applications/Xcode-Beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/Project\ Templates/iOS/Application</code></p>
<ul>
<li>模拟器路径</li>
</ul>
<p><code>/Users/yourUserName/ Library/Developer/CoreSimulator</code></p>
<ul>
<li>显示行号</li>
</ul>
<p><code>xcode-&gt;preferences-&gt;text editing-&gt;editing</code><br>选中 <code>show line numbers</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发中,用脚本实现给文件添加@xx后缀-小脚本大智慧]]></title>
      <url>http://yoursite.com/2015/04/04/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p><em>脚本是用于执行一些重复性的操作,非常小巧方便.不需要创建工程</em></p>
<h1 id="context">context</h1><p>自己最近手头有个项目,对方的美工是个完全的新手.所以,给的图片,虽然按照分辨率处理妥当(只有<code>@2x</code>版本),但是命名统一没有添加<code>@2x</code>,已经发过来了,让她去每个文件重新命名也是有点不近人情,自己去手动重命名更是傻瓜行为.  </p>
<p>这种情况,脚本要粉末登场了.<br>\&lt;!—more—>  </p>
<h2 id="shell">shell</h2><p>首先想到的是类<code>unix</code>系统的<code>shell</code>,这种强大于<code>windows</code>下<code>cmd</code>的存在.以前,自己仅仅会一些简单地命令行命令.写这种相对具有一定功能的脚本还是第一次,好在,经过各种查找资料,终于写了出来.  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">`<span class="preprocessor"># !/bin/bash</span></span><br><span class="line">append=<span class="string">"@2x"</span></span><br><span class="line">ext=<span class="string">"png"</span></span><br><span class="line">dir=$(eval pwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls $dir | grep .$oldext)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">name=$(ls $file | cut -d. -f1)$append</span><br><span class="line">mv $file $&#123;name&#125;.$ext</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>`<br>可以看出,即使没有可以精简,只需要不到10行代码即可完成任务.</p>
<h2 id="python">python</h2><p>既然想到了脚本,自己难以抑制的就取想<code>python</code>了,于是有了下面的代码  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">`import os</span><br><span class="line"></span><br><span class="line">path = '.'</span><br><span class="line"></span><br><span class="line">for file in os.listdir(os.curdir):</span><br><span class="line">f,ext=os.path.splitext(file)</span><br><span class="line">if '.png'==ext :</span><br><span class="line">newfile = f+'@2x'+ext</span><br><span class="line">print newfile</span><br><span class="line">os.renames(file,newfile)</span><br></pre></td></tr></table></figure>
<p>`  </p>
<p>不出所料,也是非常简单的.  </p>
<h2 id="更进一步">更进一步</h2><p>现在两者实现的功能都是非常简单地,而且只能命名当前目录的<code>png</code>后缀的文件.最终,我选择用<code>python</code>代码更进一步.  </p>
<p>定义两个函数,一个递归增加后缀,一个递归删除后缀(python版本是2.7.9),具体什么操作,只要后面调用一下即可.  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">`__author__ = 'katsura'  </span><br><span class="line">  </span><br><span class="line">import os  </span><br><span class="line">  </span><br><span class="line">def add_suffix(suffix) :  </span><br><span class="line">    for file in os.listdir(os.path.curdir) :  </span><br><span class="line">        print file  </span><br><span class="line">        if file[0:1]() == '.' :  </span><br><span class="line">            continue  </span><br><span class="line">        filename,ext = os.path.splitext(file)  </span><br><span class="line">        if '.png' == ext :  </span><br><span class="line">            newfilename =  filename+suffix+ext  </span><br><span class="line">            os.renames(file,newfilename)  </span><br><span class="line">        if os.path.isdir(file) :  </span><br><span class="line">            origindir = os.getcwd()  </span><br><span class="line">            newdir = file  </span><br><span class="line">            os.chdir(newdir)  </span><br><span class="line">            add_suffix(suffix)  </span><br><span class="line">            os.chdir(origindir)  </span><br><span class="line">  </span><br><span class="line">def remove_suffix(suffix) :  </span><br><span class="line">    for file in os.listdir(os.path.curdir) :  </span><br><span class="line">        #print file  </span><br><span class="line">        if file[0:1]() == '.' :  </span><br><span class="line">            continue  </span><br><span class="line">        filename,ext = os.path.splitext(file)  </span><br><span class="line">        if '.png' == ext :  </span><br><span class="line">            newfilename =  filename.rstrip(suffix)+ext  </span><br><span class="line">            os.renames(file,newfilename)  </span><br><span class="line">        if os.path.isdir(file) :  </span><br><span class="line">            origindir = os.getcwd()  </span><br><span class="line">            newdir = file  </span><br><span class="line">            os.chdir(newdir)  </span><br><span class="line">            remove_suffix(suffix)  </span><br><span class="line">            os.chdir(origindir)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">add_suffix('@2x')</span><br></pre></td></tr></table></figure>
<p>`  </p>
<h2 id="感想">感想</h2><p>语言就应该仅仅是工具,不应该执迷于语言的学习.因为当你有一定的经验之后,你会发现,什么语言都很简单… 难点是深入下去  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开始使用正则表达式-正则表达式]]></title>
      <url>http://yoursite.com/2015/03/17/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="一些细节的完善">一些细节的完善</h2><p>在<a href="">上篇文章</a>中,我们简单使用了一个正则完成了一些东西,但是也发现了一些问题.那个在线工具并不怎么好用…<br>经常遇到输入之后,没有匹配.<br>这也是 web 程序经常遇到的尴尬.所以,我们使用本地应用来进行处理.<br>笔者的是 mac10.10 ,使用的工具叫做 RegExRx .大家可以选择一款合适的使用.( windows 下的正则程序更加多,功能也很强大)</p>
<h2 id="开始正则之旅">开始正则之旅</h2><p>明确了正则的用途之后,我们开始使用正则表达式.还是从一些实际案例出发,我很讨厌一开始就摆上 N 多得概念, 列举出 N 多得符号,根本不让人好好阅读嘛!  </p>
<h3 id="符号的延伸">符号的延伸</h3><p>上次我们使用了匹配数字的符号<code>\d</code>,这个是表示数字的意思,但是它只能表示一位数字,于是,我又使用了<code>{m,n}</code>这个符号.  </p>
<p><code>\d</code>还有一种表示方法就是 <code>[0-9]</code> ,<code>[]</code>是字符串列举的意思.<br>比如<code>[abc]</code>表示匹配<code>a</code>或者<code>b</code>或者<code>c</code>,和<code>\d</code>一样,它只能匹配一个.  </p>
<h3 id="常用模式的列举:">常用模式的列举:</h3><p><code>[0-9]</code> :表示数字 等价于 <code>\d</code></p>
<p><code>[a-z]</code> :表示小写字母</p>
<p><code>[A-Z]</code> :表示大写字母</p>
<p>在列举的前面加上 ^即可表示 非,比如  </p>
<p><code>[^0-9]</code> :表示非数字  </p>
<p>简写的的形式比如 <code>\d</code>,如果要取反,则小写改大写(熟悉 Vim 的人一定亲切),如:<br><code>\D</code>:表示非数字</p>
<p><code>\w</code> 表示单词字符,在英语环境下,等价于 <code>[_a-zA-Z0-9]</code>,就是常说的:字母数字下划线  </p>
<p>同理,把它大写,就是取反  </p>
<p><code>\W</code> 表示非单词字符,除掉字母数字下划线的内容</p>
<h4 id="匹配空白字符">匹配空白字符</h4><p>\s:表示空白字符( space),它和 [ \t\n\r]等价(分别是 空格 制表符 换行符 回车符)<br>注:有些匹配工具不会高亮换行符号和回车符号<br>那么很自然的想到<br><code>\S</code> 匹配非空白字符,和<code>[ \t\n\r]</code>等价,当然,也可以 <code>[^\s]</code></p>
<h4 id="匹配任何字符">匹配任何字符</h4><p>使用 .可以匹配任何字符,一个点只能匹配一个</p>
<h4 id="使用量词">使用量词</h4><p>在最开始的时候,我们已经使用了量词的符号 {},用法也已经解释过了.比如:</p>
<p><code>.{8}</code> 匹配8个任意字符<br>但是在实际应用中,我们有三个特殊的量词是大量使用的:<br><code>?</code> :表示出现0次或者1次</p>
<p><code>*</code> :表示出现0次或者多次</p>
<p><code>+</code> :表示出现1次或者多次<br>结语</p>
<p>这次是一个比较枯燥的符号认知的过程.好在,常用的符号我们已经学习完毕,从下篇开始,我们做大量的练习,并学习更高级的知识</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从开一个手机号码开始-正则表达式]]></title>
      <url>http://yoursite.com/2015/03/07/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/%E4%BB%8E%E5%BC%80%E4%B8%80%E4%B8%AA%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<p>正则表达式是描述一组字符串特征的模式,用来匹配特定的字符串.<br>—Ken Thompson</p>
<p>虽然有点抽象,但是我觉得大家已经模模糊糊的明白了.<br><a id="more"></a></p>
<h3 id="你应该有的工具">你应该有的工具</h3><p>  为了直观的看到你的对错,请使用网站<a href="http://tool.chinaz.com/regex/" target="_blank" rel="external">在线正则测试</a><br><img src="http://ww3.sinaimg.cn/large/9e446dffjw1ervjfylf9tj20on0cogms.jpg"></p>
<h3 id="最笨的”匹配”">最笨的”匹配”</h3><p>我的上一个手机号码是 18615654686,当然,作为天朝子民,前面是有个+86的,这个大家都见过的,现在假设一个场景:<br>本人的电话被一部2000万字的电子小说引用了,现在需要让你帮我找出在哪里引用了?<br>解决:你会说,使用搜索,然后输入我的电话,结果自然就出来了.<br>真是太聪明了!</p>
<p>那我们通过这个在线工具来测试一下我们匹配的过程,请复制以下的内容到测试工具下面的文本框中.</p>
<blockquote>
<p>5678456ghju124iewlfjds;fei 饭eieiffds,quentin is so handsome !iof+86 18615654686jewjfejf</p>
</blockquote>
<p>没错,这是我在键盘上乱滚出来的结果,什么?有句话说我很帅?纯属天意吧!<br>然后请你在上面的文本框上输入,进行匹配(现在先忽略掉+86,直接搜索我电话号码):<br>首先输入 <code>1</code> ,你看到了什么?<br><img src="http://ww3.sinaimg.cn/large/9e446dffjw1ervjgohghfj20ou0ctjsw.jpg"></p>
<p>对,下面的文本中所有的 <code>1</code>都被高亮显示了.这个就是它要表达的意思:找出所有符合<code>1</code>这个模式的文本.</p>
<p>继续输入,直到输入完毕我的电话,现在你看到只是我的电话被高亮了.<br>好了,你已经完成了我的需求.</p>
<h3 id="需求改了">需求改了</h3><p>作为一名开发者,你的领导会这么放过你? NO!<br>现在我要求: 找出 2000万的文本里面的所有电话,不仅仅是我的,还有 甲乙丙丁… 然后他们的电话我不知道,但都知道是手机号码. </p>
<p>现在,传统的直接搜索的方式的弊端已经出来了.<br>我们的主角—-正则表达式也就出来了.我给你一段测试文本,请再次粘贴到网址的下面的框中.</p>
<blockquote>
<p>oinehkjfae;jipwohljewrpijlfdslnadasjlfjew;hjkuifewjoioufjsghfslfjdsljfdsljfiesl;fes;hgslgroigjfojfowefpewfkdlsflwfemnfsjldsljfapoepglkwgnsljflskfjjwio13165115639dsfjiejd;asfk;afje;nv;sajfds;ajf18677346767mdsfaekwmfksdmal;fmds;afejnwanfsalfdslk18515651188dsjf;awfjl;jsa;fjdaioejai13165789098js;fkds’afje;wjadfs;fk;dsafjew;fds;afjaw;jidsakldjasf;ldjsafnd;safjkeal;fjdsa;lfjweif;fai;jfiw;afjadl;sjfadls;fjnds;ang;ljggf[aofeo[pfjeoif15949860766</p>
</blockquote>
<p>好了,现在请在测试工具的上面的文本框中输入 <code>\d{9,}</code>,<br>好的,你可以看到,所有的电话都出来了!(当然,我这里面都是写的电话,复杂的技巧我们将在后面讨论)</p>
<p>下面我们来解释一下上面的表达式:<br><code>\d</code>表示数字(digital)<br><code>{}</code>表示次数列举,比如<code>a{3}</code> 表示 a 出现了3次, <code>a{3,5}</code>表示 a 出现了3到5次,能匹配 <code>aaa</code>,<code>aaaa</code>,<code>aaaaa</code> 这三个结果<br>那像我的式子,就是 数字出现了9到 N 次</p>
<p>好了,这就是一个小小的电话引出的正则内容,你可以看出正则的强大和应用广泛.<br>更多内容,后面讨论</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 Homebrew 管理你的mac开发包]]></title>
      <url>http://yoursite.com/2015/02/28/%E7%8E%AF%E5%A2%83%E3%80%81%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/%E4%BD%BF%E7%94%A8-Homebrew-%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84mac%E5%BC%80%E5%8F%91%E5%8C%85/</url>
      <content type="html"><![CDATA[<h2 id="context">context</h2><p>很多人可能不了解 Homebrew, 其实它相当于开发软件界的 Appstore.</p>
<p>比如,如果我要安装 python 的最新版本,那么传统的做法是</p>
<ol>
<li>到官方网站下载 python 的最新版本 </li>
<li>极其麻烦和小心翼翼的删除自带的 python 版本 </li>
<li>安装新的版本 </li>
<li>设置环境变量</li>
</ol>
<p>而借助 <code>Homebrew</code>, 需要做的仅仅是:<br><code>brew uninstall python</code><br>然后<br><code>brew install python</code></p>
<p>整个过程只是等待而已,不需要百度 <code>python</code> 的官方网址,不需要找卸载安装配置环境变量教程…</p>
<h2 id="安装_Homebrew">安装 Homebrew</h2><p>更多的好处就会在你以后的使用中被发掘.<br>下面我们进行 Homebrew 的安装.</p>
<p>打开终端,输入以下命令:<br><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code>objc</p>
<p>注意:</p>
<ul>
<li><p>因网络的原因,可能会不成功,请多尝试几次,一直到成功安装.</p>
</li>
<li><p>中间会出现一个 Press RETURN to continue or any other key to abort,请及时回车,并输入密码,不要傻等着…</p>
</li>
<li><p>不要加 sudo, 加了也没关系,待会会提示你 Don’t run as root</p>
</li>
<li><p>如果出现了某个包导致的安装失败,你仅需要按照提示进行操作即可</p>
</li>
</ul>
<p>当看到下面的内容时 ,证明已经安装成功了.</p>
<p><img src="http://ww4.sinaimg.cn/large/9e446dffjw1essytoxlv1j20ka0dhtf0.jpg"></p>
<p>注: 本文来自本人早期在 csdn 上撰写的文章,内容为原创</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高效OC编程-用枚举表示状态、选项、状态码 ]]></title>
      <url>http://yoursite.com/2015/01/15/iOS%20Tips/%E7%94%A8%E6%9E%9A%E4%B8%BE%E8%A1%A8%E7%A4%BA%E7%8A%B6%E6%80%81%E3%80%81%E9%80%89%E9%A1%B9%E3%80%81%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>由于Objective-C 基于C 语言，所以C 语言有的功能它都有。其中之一就是枚举类型：</p>
<p>enum 系统框架中频繁用到此类型，然而开发者容易忽视它。在以一系列常量来表示错误状态码或可组合的选项时，极宜使用枚举为其命名。由于C++11 标准扩充了枚举的特性所以最新版系统框架使用了“强类型”（strong type）的枚举。没错，Objective-C 也能得益于<br>C++11 标准。<br>枚举只是一种常量命名方式。某个对象所经历的各种状态就可以定义为一个简单的枚举集（enumeration set）。比如说，可以用下列枚举表示“套接字连接”（socket connection）的状态:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EOCConnectionState &#123;</span><br><span class="line">EOCConnectionStateDisconnected,  </span><br><span class="line"></span><br><span class="line">EOCConnectionStateConnecting,  </span><br><span class="line"></span><br><span class="line">EOCConnectionStateConnected,  </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>由于每种状态都用一个便于理解的值来表示，所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号，从0 开始，每个枚举递增1。实现枚举所用的数据类型取决于编译器，不过其二进制位（bit）的个数必须能完全表示下枚举编号才行。在前例中，由于最大编号是2，所以使用1 个字节5的char 类型即可。然而定义枚举变量的方式却不太简洁，要依如下语法编写:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EOCConnectionState state = EOCConnectionStateDisconnected;</span><br></pre></td></tr></table></figure>
<p>若是每次不用敲入enum 而只需写EOCConnectionState 就好了。要想这样做，则需使用<br>typedef 关键字重新定义枚举类型：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EOCConnectionState &#123;</span><br><span class="line">EOCConnectionStateDisconnected,</span><br><span class="line">EOCConnectionStateConnecting,</span><br><span class="line">EOCConnectionStateConnected,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> EOCConnectionState EOCConnectionState;</span><br></pre></td></tr></table></figure>
<p>现在可以用简写的EOCConnectionState 来代替完整的enum EOCConnectionState 了：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EOCConnectionState state = EOCConnectionStateDisconnected;</span><br></pre></td></tr></table></figure>
<p>C++11 标准修订了枚举的某些特性。其中一项改动是：可以指明用何种“底层数据类型”<br>（underlying type）来保存枚举类型的变量。这样做的好处是，可以向前声明枚举变量了。若<br>不指定底层数据类型，则无法向前声明枚举类型，因为编译器不清楚底层数据类型的大小，<br>所以在用到此枚举类型时，也就不知道究竟该给变量分配多少空间。<br>指定底层数据类型所用的语法是：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EOCConnectionStateConnectionState : <span class="built_in">NSInteger</span> &#123; <span class="comment">/* ... */</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>上面这行代码确保枚举的底层数据类型是NSInteger。也可以在向前声明时指定底层数<br>据类型：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EOCConnectionStateConnectionState : <span class="built_in">NSInteger</span>;</span><br></pre></td></tr></table></figure>
<p>还可以不使用编译器所分配的序号，而是手工指定某个枚举成员所对应的值。语法如下：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> EOCConnectionStateConnectionState &#123;</span><br><span class="line">     EOCConnectionStateDisconnected = <span class="number">1</span>,</span><br><span class="line">     EOCConnectionStateConnecting,</span><br><span class="line">     EOCConnectionStateConnected,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上述代码把<code>EOCConnectionStateDisconnected</code> 的值设为1，而不使用编译器所分配的0。<br>如前所述，接下来几个枚举的值都会在上一个的基础上递增1。比如说，<code>EOCConnectionStateConnected</code> 的值就是3。<br>还有一种情况应该使用枚举类型，那就是定义选项的时候。若这些选项可以彼此组<br>合，则更应如此。只要枚举定义得对，各选项之间就可通过“按位或操作符”（bitwise OR operator）来组合。例如，iOS UI 框架中有如下枚举类型，用来表示某个视图应该如何在水平<br>或垂直方向上调整大小：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="built_in">UIViewAutoresizing</span> &#123;</span><br><span class="line"><span class="built_in">UIViewAutoresizingNone</span> = <span class="number">0</span>,</span><br><span class="line"><span class="built_in">UIViewAutoresizingFlexibleLeftMargin</span> = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line"><span class="built_in">UIViewAutoresizingFlexibleWidth</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line"><span class="built_in">UIViewAutoresizingFlexibleRightMargin</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line"><span class="built_in">UIViewAutoresizingFlexibleTopMargin</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line"><span class="built_in">UIViewAutoresizingFlexibleHeight</span> = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line"><span class="built_in">UIViewAutoresizingFlexibleBottomMargin</span> = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个选项均可启用或禁用，使用上述方式来定义枚举值即可保证这一点，因为在每个枚<br>举值6所对应的二进制表示中，只有1 个二进制位的值是1。用“按位或操作符”可组合多个<br>选项，例如：<code>UIViewAutoResizingFlexibleWidth|UIViewAutoresizingFlexibleHeight</code>。用“按位与操作符”（bitwise AND operator）即可判断出是否已启用某个选项：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="built_in">UIViewAutoresizing</span> resizing =</span><br><span class="line"><span class="built_in">UIViewAutoresizingFlexibleWidth</span> |</span><br><span class="line"><span class="built_in">UIViewAutoresizingFlexibleHeight</span>;</span><br><span class="line"><span class="keyword">if</span> (resizing &amp; <span class="built_in">UIViewAutoresizingFlexibleWidth</span>) &#123;</span><br><span class="line"><span class="comment">// UIViewAutoresizingFlexibleWidth is set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>UIViewAutoresizingNone</code> 除外，它的值是0，对应的二进制值也是0，其中没有值为1 的二进制位<br>系统库中频繁使用这个办法。iOS UI 框架中的UIKit 里还有个例子，用枚举值告诉系统<br>视图所支持的设备显示方向。这个枚举类型叫做<code>UIInterfaceOrientationMask</code>，开发者需要实<br>现一个名为supportedInterfaceOrientations 的方法，将视图所支持的显示方向告诉系统：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSUInteger</span>)supportedInterfaceOrientations &#123;</span><br><span class="line">　　 <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortrait</span> |</span><br><span class="line"><span class="built_in">UIInterfaceOrientationMaskLandscapeLeft</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Foundation 框架中定义了一些辅助的宏，用这些宏来定义枚举类型时，也可以指定用于<br>保存枚举值的底层数据类型。这些宏具备向后兼容（backward compatibility）能力，如果目标<br>平台的编译器支持新标准，那就使用新式语法，否则改用旧式语法。这些宏是用#define 预<br>处理指令来定义的，其中一个用于定义像EOCConnectionState 这种普通的枚举类型，另一个<br>用于定义像UIViewAutoresizing 这种包含一系列选项的枚举类型，其用法如下：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, EOCConnectionState) &#123;</span><br><span class="line">EOCConnectionStateDisconnected,</span><br><span class="line">EOCConnectionStateConnecting,</span><br><span class="line">EOCConnectionStateConnected,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, EOCPermittedDirection) &#123;</span><br><span class="line">EOCPermittedDirectionUp = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">EOCPermittedDirectionDown = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">EOCPermittedDirectionLeft = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">EOCPermittedDirectionRight = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这些宏的定义如下：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#if (__cplusplus &amp;&amp; __cplusplus &gt;= 201103L&amp;&amp;</span></span><br><span class="line">(__has_extension(cxx_strong_enums) ||</span><br><span class="line">__has_feature(objc_fixed_enum))</span><br><span class="line">) ||</span><br><span class="line">(!__cplusplus &amp;&amp; __has_feature(objc_fixed_enum))</span><br><span class="line"><span class="preprocessor">#define NS_ENUM(_type, _name)</span></span><br><span class="line"><span class="keyword">enum</span> _name : _type _name; <span class="keyword">enum</span> _name : _type</span><br><span class="line"><span class="preprocessor">#if (__cplusplus)</span></span><br><span class="line"><span class="preprocessor">#define NS_OPTIONS(_type, _name)</span></span><br><span class="line">type _name; <span class="keyword">enum</span> : _type</span><br><span class="line"><span class="preprocessor">#else</span></span><br><span class="line"><span class="preprocessor">#define NS_OPTIONS(_type, _name)</span></span><br><span class="line"><span class="keyword">enum</span> _name : _type _name; <span class="keyword">enum</span> _name : _type</span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line"><span class="preprocessor">#else</span></span><br><span class="line"><span class="preprocessor">#define NS_ENUM(_type, _name) _type _name; enum</span></span><br><span class="line"><span class="preprocessor">#define NS_OPTIONS(_type, _name) _type _name; enum</span></span><br><span class="line"><span class="preprocessor">#endif</span></span><br></pre></td></tr></table></figure>
<p>由于需要分别处理不同情况，所以上述代码用多种方式来定义这两个宏。第一个#if 用<br>于判断编译器是否支持新式枚举。其中所用的布尔逻辑看上去相当复杂，不过其意思就是想<br>判断编译器是否支持新的枚举特性。如果不支持，那么就用老式语法来定义枚举。<br>如果支持新特性，那么用NS_ENUM 宏所定义的枚举类型展开之后就是：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> EOCConnectionState : <span class="built_in">NSUInteger</span> EOCConnectionState;</span><br><span class="line"><span class="keyword">enum</span> EOCConnectionState : <span class="built_in">NSUInteger</span> &#123;</span><br><span class="line">EOCConnectionStateDisconnected,</span><br><span class="line">EOCConnectionStateConnecting,</span><br><span class="line">EOCConnectionStateConnected,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>根据是否要将代码按C++ 模式编译，NS_OPTIONS 宏的定义方式也有所不同。如果<br>不按C++ 编译，那么其展开方式就和NS_ENUM 相同。若按C++ 编译，则展开后的代码<br>略有不同。原因在于，用按位或运算来操作两个枚举值时，C++ 编译模式的处理办法与非<br>C++ 模式不一样。而上面已经提到了，作为选项的枚举值经常需要用按位或运算来组合。<br>在用或运算操作两个枚举值时，C++ 认为运算结果的数据类型应该是枚举的底层数据类<br>型，也就是NSUInteger。而且C++ 不允许将这个底层类型“隐式转换”（implicit cast）为<br>枚举类型本身。我们用EOCPermittedDirection 来演示一下，假设按NS_ENUM 方式将其<br>展开：  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> EOCPermittedDirection : <span class="keyword">int</span> EOCPermittedDirection;</span><br><span class="line"><span class="keyword">enum</span> EOCPermittedDirection : <span class="keyword">int</span> &#123;</span><br><span class="line">EOCPermittedDirectionUp = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">EOCPermittedDirectionDown = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">EOCPermittedDirectionLeft = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">EOCPermittedDirectionRight = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后考虑下列代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EOCPermittedDirection permittedDirections =</span><br><span class="line">EOCPermittedDirectionLeft | EOCPermittedDirectionUp;</span><br></pre></td></tr></table></figure>
<p>若编译器按C++ 模式编译（也可能是按Objective-C++ 模式编译），则会给出下列错误信息：  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: cannot initialize a variable of type</span><br><span class="line">'EOCPermittedDirection' with an rvalue of type 'int'</span><br></pre></td></tr></table></figure>
<p>如果想编译这行代码， 就要将按位或操作的结果显式转换（explicit cast） 为EOCPermittedDirection。所以，在C++ 模式下应该用另一种方式定义NS_OPTIONS 宏，以便省去类型转换操作。鉴于此，凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义。若是枚举不需要互相组合，则应使用NS_ENUM 来定义。<br>能够用到枚举的情况还有很多。前面已经提到，枚举可以表示选项与状态，然而还有许<br>多东西也能用枚举来表示。比如状态码就是个好例子。可以把逻辑含义相似的一组状态码放入同一个枚举集里，而不要用#define 预处理指令或常量来定义。以枚举来表示样式（style）<br>也很合宜。假如创建某个UI 元素时可以使用不同的样式，那么在这种情况下就最应该把样式声明为枚举类型了。<br>最后再讲一种枚举的用法，就是在switch语句里。有时可以这样定义：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, EOCConnectionState) &#123;    EOCConnectionStateDisconnected,</span><br><span class="line">    EOCConnectionStateConnecting,</span><br><span class="line">    EOCConnectionStateConnected,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">switch</span> (_currentState) &#123;</span><br><span class="line">EOCConnectionStateDisconnected:</span><br><span class="line"><span class="comment">// Handle disconnected state</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">EOCConnectionStateConnecting:</span><br><span class="line"><span class="comment">// Handle connecting state</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">EOCConnectionStateConnected:</span><br><span class="line"><span class="comment">// Handle connected state</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们总习惯在switch 语句中加上default 分支。然而，若是用枚举来定义状态机（state machine），则最好不要有default 分支。这样的话，如果稍后又加了一种状态，那么编译器就会发出警告信息，提示新加入的状态并未在switch 分支中处理。假如写上了default 分支，那么它就会处理这个新状态，从而导致编译器不发警告信息。用NS_ENUM 定义其他枚举类型时也要注意此问题。例如，在定义代表UI 元素样式的枚举时，通常要确保switch 语句能正确处理所有样式。</p>
<p>要点</p>
<ul>
<li><p>应该用枚举来表示状态机的状态、传递给方法的选项以及状态码等值，给这些值起个易懂的名字。  </p>
</li>
<li><p>如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将各选项值定义为2 的幂，以便通过按位或操作将其组合起来。</p>
</li>
<li><p>用 NS_ENUM 与 NS_OPTIONS 宏来定义枚举类型，并指明其底层数据类型。这样做可以确保枚举是用开发者所选的底层数据类型实现出来的，而不会采用编译器所选的类型。</p>
</li>
<li><p>在处理枚举类型的 switch 语句中不要实现 default 分支。这样的话，加入新枚举之后,编译器就会提示开发者：switch 语句并未处理所有枚举。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ iOS平台(移动平台)架构问题 ]]></title>
      <url>http://yoursite.com/2014/11/10/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/iOS%E5%B9%B3%E5%8F%B0(%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%8F%B0)%E6%9E%B6%E6%9E%84%E9%97%AE%E9%A2%98%20/</url>
      <content type="html"><![CDATA[<h2 id="尴尬的遭遇">尴尬的遭遇</h2><p>自己从内心觉得对项目分层是一种非常好的思想,于是便在网络中寻找有关iOS项目分层的资料. 无奈,网络中关于iOS的项目架构资料非常少(最后证明我大方向走错了了,架构应该是独立于平台的,所以”iOS”的架构资料是找不到的),就算有几篇博文,也是自己琢磨出来的野路子.(个人思想比较保守,不够权威的东西不能让我信服,而事实上,每个人都能看到那些博文是有过度设计的问题的)</p>
<p>后来尝试在 code4app群里讨论这个问题,结果群里几个发言活跃的群友对这个架构问题”免讨论”</p>
<p>然后在 “跟MJ完虐iOS3.0”这个群中,更是遭到了红果果的嘲笑:MVC就够了,还分什么层?</p>
<p>并无刻意谈论群友,只是想拿事实举例:现在相当一部分开发者,对架构和分层这个东西认知不足.然后, 自己深知分层的好处,虽然有些灰心,但不至于放弃.最终,发现了Martin Fowler写的 &lt;&lt;企业应用架构模式&gt;&gt;一书,顿觉豁然开朗.</p>
<h2 id="对于移动设备来说,分层是否有必要?">对于移动设备来说,分层是否有必要?</h2><p>我最早是做java的,接触到的项目比较大,会有架构设计. 那么转到移动,就会考虑,移动是否也真的需要架构设计</p>
<p>只要是软件,就会有需求的变更,那么分层就显得非常有必要了. 即,我们需要为自己的软件留一条”后路”,解耦合,让其可扩展.<br>低耦合企业级系统架构涉及及移动平台的分层架构设计</p>
<p>从大方面来讲,架构是必要的,关键是怎么去执行.</p>
<p>一个系统,采用什么样子的结构,有哪些组件,组件之间什么关系,和环境之间有什么关系,这都是设计架构(或者分层)需要考虑的问题.</p>
<p>目的都是为了建立低耦合的企业级应用系统,低耦合的系统的好处是细化开发较色,提高开发效率,提高扩展性</p>
<p>需求是经常变化的,导致了系统不能满足需求变化的需求,因为是强耦合的,模块与模块之间,类和类之间.</p>
<p>低耦合的好处太多了</p>
<ul>
<li>可扩展性强</li>
<li>效率高</li>
<li>适应用户需求的变化</li>
</ul>
<p>这样我们系统维护工作就少,就是比较灵活<br>什么是企业级系统</p>
<p>这个问题在我的架构的基本概念和演化-博客园(或者csdn的架构的概念和最基本的三层架构-iOS企业应用架构设计 )一文中讨论过,但是这里还是有必要再提一下:</p>
<p>系统比较庞大,涉及到前端,后台(数据库,中间件,实际的设备)</p>
<p>现在的 java .net 都是可以构建企业级系统的.<br>设计的注意点</p>
<p>设计一定要考虑的非常周到,这样就存在一个文件,需要降低耦合度.分层,每层里面合理的运用设计模式 这就是:架构设计和设计模式</p>
<p>每层之间的东西必须是具有类似功能的类和子系统的集合.</p>
<p>可以分四层,五层,甚至一层,二层. 每种分法必须要有自己的道理.</p>
<p>比如你的房子,要开个窗户,结果就塌了,就这说明是不合理的设计</p>
<blockquote>
<p>此文中很多想法和灵感源自关东升老师的一节视频,视频在 51cto可以搜索到,但是付费的,本人只是学习了免费的第一节的内容,便觉得受益匪浅,更是在尝试寻求老师分层不合理性的时候,发现了Martin的&lt;&lt;企业应用架构设计&gt;&gt;一书,开始了更远的探究.在此感谢老师. —-我</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[架构的概念和最基本的三层架构]]></title>
      <url>http://yoursite.com/2014/11/06/%E9%87%8D%E6%9E%84%E3%80%81%E6%A8%A1%E5%BC%8F%E3%80%81%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="架构">架构</h2><p>Martin Fowler 给”架构”这个词做了两点归纳:</p>
<ol>
<li>最高层次的系统分解 </li>
<li>系统中不易改变的决定</li>
</ol>
<p>它包括了一些开发者希望能够及早做出的决定,因为这些决定看起来是难以改变的. 如果发现一些决定并不像你想象的那么难以改变,那么他就不再与架构相关.这么下去,架构自然就浓缩成了一些重要的东西.</p>
<p>在架构模式中,层次是最为重要的,Martin Fowler的&lt;&lt;企业应用架构模式&gt;&gt;全书都在阐释怎么将企业应用组织成不同的层次,还有这些层次如何协同工作.<br>架构和模式<br><a id="more"></a><br>其实二者没有严格的区分标准,我们依照架构的”不可轻易改变”抽取出了一部分模式来作为架构,其余的模式作为辅助,帮助架构的实现.这个和前面的说法很相似,因为”是否架构相关往往带有主观性”<br>企业应用</p>
<p>这里所提到的架构只是适合企业应用的,给企业应用下做几条标准就是:</p>
<ul>
<li>涉及到持久化数据</li>
<li>涉及到大量数据及其处理</li>
<li>涉及到很多人同事访问数据</li>
<li>涉及到大量操作数据的用户界面</li>
<li>与散布在企业周围的其他企业应用集成</li>
</ul>
<h2 id="业务逻辑">业务逻辑</h2><p>说是逻辑,其实是最没有逻辑的地方,因为系统中的逻辑并非取决于人们平时的认知,而是来自客户的要求,而客户的要求总是千奇百怪的<br>硬件提升可以解决的问题,就不要交给软件</p>
<h2 id="层的基本概念和演化">层的基本概念和演化</h2><p>在分解复杂的软件系统时,设计者用的最多的技术之一就是分层.你一定对大学里面的网络分层还有印象,依照不同的标准,我们有个七层网络模型 或者五层网络模型 ,到后来参加工作,听到网络专业的同学们会说:我们是在XX层工作的</p>
<p>分层的好处可以归纳为以下几点:</p>
<ul>
<li>每一层都可以分配人员进行工作,他们可以不用了解其他层的细节<br>  可以替换某个层的实现</li>
<li>一个层次一旦构建好,就可以为其他层次工作.可复用性强</li>
</ul>
<p>当然,事情都是两面的,分层的缺点是:</p>
<ul>
<li>一个层不能封装好所有的东西.修改一个层,可能会造成级联式的修改,比如,我们在用户界面(表现层)上增加一个要显示的数据,就必须在数据库中增加对应的字段(持久层)</li>
<li>层次太多会影响性能 层级之间传递数据是链式的,每个层都会把数据从一种形式转换到另一种形式,层次越多,处理就越多</li>
</ul>
<p>分层架构中,最困难的问题</p>
<ul>
<li>建立哪些层次?</li>
<li>每一层的职责?</li>
</ul>
<h2 id="层次的起源和进化">层次的起源和进化</h2><h3 id="一层架构">一层架构</h3><p>额,自己从来没见识过这种应用…</p>
<h3 id="两层架构">两层架构</h3><p>现在企业的应用基本是无法脱离网络的,那么这就造成了天生的两层客户端层 和 服务器层如果应用仅仅是对数据的简单显示和修改,那么这种两层架构还是能够胜任工作的.但是问题来自:每个企业应用都存在所谓的业务逻辑:比如验证,计算,数据的自定义处理等.</p>
<p>一种思路是把这种逻辑分给两层架构的客户端,这样会很笨拙,并且往往导致把业务逻辑和用户界面耦 合起来,随着业务逻辑的不断复杂,这些代码将越来越难以使用.</p>
<p>另一种思路是把这些逻辑放到数据库端,作为存储过程.但是存储过程只能提供有限的结构化机制,这将再次导致笨拙的代码.还有,很多人喜欢关系型数据库的原因之一是:SQL是一个标准,这允许他们更换数据库厂商,虽然很少有人更换.但是存储过程是数据库厂商私有的,那么,普通用户就被剥夺了更换厂商的可能性.</p>
<h3 id="三层架构">三层架构</h3><p>基于以上的问题,一个新的层次便应运而生:业务逻辑层 它成为系统中真正的核心</p>
<p>三层架构的层次和职责<br>层次     职责<br>表现层     1.显示信息(界面)2.与用户互动(触摸)3.接收信息(加速计等)<br>业务逻辑层     处理业务逻辑<br>数据源层     与数据库,云端,文件等交互,实现数据的持久化</p>
<p>深入一点说,表现层就是提供一个本应用的接口给别人(或者别的应用)使用,而数据源是使用别的应用的服务(比如数据库软件)</p>
<p>对每个层的依赖性,有一个普遍的原则: 业务逻辑层和数据源层绝对不要依赖表现层就是说,在业务逻辑层和数据源层的代码中,不要出现调用表现层代码的情况.这个原则将简化在相同基础上,替换表现层的代价,也使得表现层的修改所带来的连锁反应尽量小.</p>
<p>在使用业务逻辑层的时候,其中一个最复杂的困难就是:什么是业务逻辑,什么是其他逻辑.Martin对这个问题提出了一个不太正规的测试方法:设想向系统中添加一个全新的分层,比如向web应用增加一个命令行界面层.如果在这个过程中,发现需要重复实现某些功能,那么就说明一些本应该在业务逻辑层实现的代码,放到了表现层中了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决TableView重用机制带来的数据混乱问题]]></title>
      <url>http://yoursite.com/2014/04/14/iOS%20Tips/%E8%A7%A3%E5%86%B3TableView%E9%87%8D%E7%94%A8%E6%9C%BA%E5%88%B6%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B7%B7%E4%B9%B1%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>在开发一个项目中,本地用 TableView 进行服务器的数据展示.但是最后发现,数据每隔几条就重复.通过<br>charles 抓取服务器端返回的数据.没有任何问题.也就是说是本地的处理方式出了问题.  </p>
<h3 id="问题定位">问题定位</h3><p>本地的 UI 逻辑比较简单.所以可以很轻松的断定是 UITableView 的重用机制导致了这个问题.以下是核心代码:  </p>
<a id="more"></a>  
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">UITableViewCell</span>*)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *reuseid = <span class="string">@"contentCellReuse"</span>;</span><br><span class="line">    GQContentListCell * contentCell = [tableView dequeueReusableCellWithIdentifier:reuseid];</span><br><span class="line">    <span class="keyword">if</span> (contentCell==<span class="literal">nil</span>) &#123;</span><br><span class="line">        contentCell = [[GQContentListCell alloc]initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span> reuseIdentifier:reuseid];</span><br><span class="line">        GQContentFrameModel *frameModel = [[GQContentFrameModel alloc]init];</span><br><span class="line">        GQContentModel *model = <span class="keyword">self</span><span class="variable">.contentModelArray</span>[indexPath<span class="variable">.row</span>];</span><br><span class="line">        frameModel<span class="variable">.contentModel</span> = model;</span><br><span class="line">        contentCell<span class="variable">.cellFrame</span> = frameModel;</span><br><span class="line">        contentCell<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *dealDict = @&#123;<span class="string">@"indexPath"</span>:indexPath, <span class="string">@"contentModel"</span>:model&#125;;</span><br><span class="line">        contentCell<span class="variable">.dealButton</span><span class="variable">.myInfo</span> = dealDict;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *ignoreDict= @&#123;<span class="string">@"indexPath"</span>:indexPath,<span class="string">@"contentModel"</span>:model&#125;;</span><br><span class="line">        </span><br><span class="line">        contentCell<span class="variable">.ignoreButton</span><span class="variable">.myInfo</span> = ignoreDict;</span><br><span class="line">        contentCell<span class="variable">.dealButton</span><span class="variable">.myInfo</span> = dealDict;</span><br><span class="line">        </span><br><span class="line">        [contentCell<span class="variable">.dealButton</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(clickDealButton:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">        [contentCell<span class="variable">.ignoreButton</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(clickIgnoreButton:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    contentCell<span class="variable">.backgroundColor</span> = indexPath<span class="variable">.row</span>%<span class="number">2</span>==<span class="number">1</span>?[<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.949</span>f green:<span class="number">0.953</span>f blue:<span class="number">0.961</span>f alpha:<span class="number">1.00</span>f]:[<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> contentCell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题解决">问题解决</h3><h4 id="废掉重用机制的尝试">废掉重用机制的尝试</h4><p>一开始,也是最容易想到的办法,就是直接不用重用机制了.也就是将下面的代码:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GQContentListCell * contentCell = [tableView dequeueReusableCellWithIdentifier:reuseid];</span><br></pre></td></tr></table></figure>
<p>改成:  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GQContentListCell * contentCell = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure>
<p>好了,问题解决了.  </p>
<p>但是用脚趾头想想也知道,这样是不行的.因为一旦数据多起来,不卡才怪!  </p>
<h4 id="最终方案">最终方案</h4><p>静下来想,苹果做一件事情,一定不会这么弱智.所以问题肯定还是出在自己身上.<br>最终将 if 里面的代码拿出来,问题解决:<br>最终代码  </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">UITableViewCell</span>*)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">	&#123;</span><br><span class="line">	    </span><br><span class="line">	    <span class="keyword">static</span> <span class="built_in">NSString</span> *reuseid = <span class="string">@"contentCellReuse"</span>;</span><br><span class="line">	    GQContentListCell * contentCell = [tableView dequeueReusableCellWithIdentifier:reuseid];</span><br><span class="line">	    <span class="keyword">if</span> (contentCell==<span class="literal">nil</span>) &#123;</span><br><span class="line">	        contentCell = [[GQContentListCell alloc]initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span> reuseIdentifier:reuseid];</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    GQContentFrameModel *frameModel = [[GQContentFrameModel alloc]init];</span><br><span class="line">	    GQContentModel *model = <span class="keyword">self</span><span class="variable">.contentModelArray</span>[indexPath<span class="variable">.row</span>];</span><br><span class="line">	    frameModel<span class="variable">.contentModel</span> = model;</span><br><span class="line">	    contentCell<span class="variable">.cellFrame</span> = frameModel;</span><br><span class="line">	    contentCell<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">	    </span><br><span class="line">	    <span class="built_in">NSDictionary</span> *dealDict = @&#123;<span class="string">@"indexPath"</span>:indexPath, <span class="string">@"contentModel"</span>:model&#125;;</span><br><span class="line">	    contentCell<span class="variable">.dealButton</span><span class="variable">.myInfo</span> = dealDict;</span><br><span class="line">	    <span class="built_in">NSDictionary</span> *ignoreDict= @&#123;<span class="string">@"indexPath"</span>:indexPath,<span class="string">@"contentModel"</span>:model&#125;;</span><br><span class="line">	    </span><br><span class="line">	    contentCell<span class="variable">.ignoreButton</span><span class="variable">.myInfo</span> = ignoreDict;</span><br><span class="line">	    contentCell<span class="variable">.dealButton</span><span class="variable">.myInfo</span> = dealDict;</span><br><span class="line">	    </span><br><span class="line">	    [contentCell<span class="variable">.dealButton</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(clickDealButton:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">	    [contentCell<span class="variable">.ignoreButton</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(clickIgnoreButton:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">	    </span><br><span class="line">	    contentCell<span class="variable">.backgroundColor</span> = indexPath<span class="variable">.row</span>%<span class="number">2</span>==<span class="number">1</span>?[<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.949</span>f green:<span class="number">0.953</span>f blue:<span class="number">0.961</span>f alpha:<span class="number">1.00</span>f]:[<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">	    </span><br><span class="line">	    <span class="keyword">return</span> contentCell;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方案说明">方案说明</h3><p>假设一屏幕能显示 n 个 cell ,那么可以认为能被实例化的 cell 个数是 n+1 (或者其他,但是不会偏差太多).  </p>
<p>那么从 n+2 个开始,就会复用前面的的 cell ,也就是说 cell==nil 这个条件就不成立了,所以 if 里面的代码就不会执行. 所以,在里面的给模型赋值的代码也就失效了. tableView 显示的数据永远就是那 n+1 个.   </p>
<h3 id="结论">结论</h3><p><em>重用 cell 的时候, 所有给数据重新赋值的操作都应该拿到 if 外面执行</em></p>
]]></content>
    </entry>
    
  
  
</search>
